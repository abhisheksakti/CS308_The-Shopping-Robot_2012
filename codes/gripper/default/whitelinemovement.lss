
whitelinemovement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800200  000051be  00005252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000051be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  0080037a  0080037a  000053cc  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000053cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004df  00000000  00000000  000053ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017e7  00000000  00000000  000058cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000222  00000000  00000000  000070b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002207  00000000  00000000  000072d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  000094dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000484  00000000  00000000  000098ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__vector_54>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee eb       	ldi	r30, 0xBE	; 190
      fc:	f1 e5       	ldi	r31, 0x51	; 81
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 37       	cpi	r26, 0x7A	; 122
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	aa e7       	ldi	r26, 0x7A	; 122
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 3c       	cpi	r26, 0xC6	; 198
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 76 22 	call	0x44ec	; 0x44ec <main>
     122:	0c 94 dd 28 	jmp	0x51ba	; 0x51ba <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <timer5_init>:
// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz

void  timer5_init(){
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	
	TCCR5B = 0x00;	//Stop
     132:	e1 e2       	ldi	r30, 0x21	; 33
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     138:	e5 e2       	ldi	r30, 0x25	; 37
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     140:	e4 e2       	ldi	r30, 0x24	; 36
     142:	f1 e0       	ldi	r31, 0x01	; 1
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     148:	e9 e2       	ldi	r30, 0x29	; 41
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     14e:	e8 e2       	ldi	r30, 0x28	; 40
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     156:	eb e2       	ldi	r30, 0x2B	; 43
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     15c:	ea e2       	ldi	r30, 0x2A	; 42
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     164:	ed e2       	ldi	r30, 0x2D	; 45
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     16a:	ec e2       	ldi	r30, 0x2C	; 44
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	89 ea       	ldi	r24, 0xA9	; 169
     178:	80 83       	st	Z, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     17a:	e1 e2       	ldi	r30, 0x21	; 33
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	80 83       	st	Z, r24
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <lcd_port_config>:

void lcd_port_config (void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     190:	a7 e2       	ldi	r26, 0x27	; 39
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	e7 e2       	ldi	r30, 0x27	; 39
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	87 6f       	ori	r24, 0xF7	; 247
     19c:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     19e:	a8 e2       	ldi	r26, 0x28	; 40
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	e8 e2       	ldi	r30, 0x28	; 40
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	80 78       	andi	r24, 0x80	; 128
     1aa:	8c 93       	st	X, r24
}
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <config>:

void config()
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	0f 92       	push	r0
     1b8:	0f 92       	push	r0
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
	DDRJ = 0x00; //UART3 Input
     1be:	e4 e0       	ldi	r30, 0x04	; 4
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	10 82       	st	Z, r1
	PORTJ = 0x00; // Set to 0
     1c4:	e5 e0       	ldi	r30, 0x05	; 5
     1c6:	f1 e0       	ldi	r31, 0x01	; 1
     1c8:	10 82       	st	Z, r1

	DDRC = DDRC | 0x08; //set output for buzzer PC3 
     1ca:	a7 e2       	ldi	r26, 0x27	; 39
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	e7 e2       	ldi	r30, 0x27	; 39
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	88 60       	ori	r24, 0x08	; 8
     1d6:	8c 93       	st	X, r24
	PORTC = PORTC & 0xf7;
     1d8:	a8 e2       	ldi	r26, 0x28	; 40
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	e8 e2       	ldi	r30, 0x28	; 40
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	87 7f       	andi	r24, 0xF7	; 247
     1e4:	8c 93       	st	X, r24

	DDRA = DDRA | 0xff; //movement of motors .. all pins output
     1e6:	e1 e2       	ldi	r30, 0x21	; 33
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	e1 e2       	ldi	r30, 0x21	; 33
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	80 83       	st	Z, r24
	PORTA = PORTA & 0x00 ; // set 0 initially
     1f4:	e2 e2       	ldi	r30, 0x22	; 34
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	e2 e2       	ldi	r30, 0x22	; 34
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	10 82       	st	Z, r1

	DDRL = DDRL | 0x38; // velocity .. Setting PL3 and PL4 pins as output for PWM generation
     200:	aa e0       	ldi	r26, 0x0A	; 10
     202:	b1 e0       	ldi	r27, 0x01	; 1
     204:	ea e0       	ldi	r30, 0x0A	; 10
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	80 81       	ld	r24, Z
     20a:	88 63       	ori	r24, 0x38	; 56
     20c:	8c 93       	st	X, r24
	PORTL = PORTL | 0x38; //PL3 and PL4 pins are for velocity control using PWM.
     20e:	ab e0       	ldi	r26, 0x0B	; 11
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	eb e0       	ldi	r30, 0x0B	; 11
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	80 81       	ld	r24, Z
     218:	88 63       	ori	r24, 0x38	; 56
     21a:	8c 93       	st	X, r24
	PORTE = PORTE | 0x08;
     21c:	ae e2       	ldi	r26, 0x2E	; 46
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	ee e2       	ldi	r30, 0x2E	; 46
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	88 60       	ori	r24, 0x08	; 8
     228:	8c 93       	st	X, r24

	//ADC pin config:
	DDRF = 0x00; 
     22a:	e0 e3       	ldi	r30, 0x30	; 48
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	10 82       	st	Z, r1
 	PORTF = 0x00;
     230:	e1 e3       	ldi	r30, 0x31	; 49
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	10 82       	st	Z, r1
 	DDRK = 0x00;
     236:	e7 e0       	ldi	r30, 0x07	; 7
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	10 82       	st	Z, r1
 	PORTK = 0x00;
     23c:	e8 e0       	ldi	r30, 0x08	; 8
     23e:	f1 e0       	ldi	r31, 0x01	; 1
     240:	10 82       	st	Z, r1

}
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	cf 91       	pop	r28
     248:	df 91       	pop	r29
     24a:	08 95       	ret

0000024c <port_init>:

void port_init()
{
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	config();
     254:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <config>
	lcd_port_config();
     258:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_port_config>
}
     25c:	cf 91       	pop	r28
     25e:	df 91       	pop	r29
     260:	08 95       	ret

00000262 <adc_init>:


void adc_init()
{
     262:	df 93       	push	r29
     264:	cf 93       	push	r28
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     26a:	ea e7       	ldi	r30, 0x7A	; 122
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     270:	eb e7       	ldi	r30, 0x7B	; 123
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     276:	ec e7       	ldi	r30, 0x7C	; 124
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 e2       	ldi	r24, 0x20	; 32
     27c:	80 83       	st	Z, r24
	ACSR = 0x80;
     27e:	e0 e5       	ldi	r30, 0x50	; 80
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 e8       	ldi	r24, 0x80	; 128
     284:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     286:	ea e7       	ldi	r30, 0x7A	; 122
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	86 e8       	ldi	r24, 0x86	; 134
     28c:	80 83       	st	Z, r24
}
     28e:	cf 91       	pop	r28
     290:	df 91       	pop	r29
     292:	08 95       	ret

00000294 <uart0_init>:
void uart0_init(void)
{
     294:	df 93       	push	r29
     296:	cf 93       	push	r28
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
     29c:	e1 ec       	ldi	r30, 0xC1	; 193
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     2a2:	e0 ec       	ldi	r30, 0xC0	; 192
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	10 82       	st	Z, r1
 UCSR0C = 0x06;
     2a8:	e2 ec       	ldi	r30, 0xC2	; 194
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	86 e0       	ldi	r24, 0x06	; 6
     2ae:	80 83       	st	Z, r24
 UBRR0L = 0x47; //set baud rate lo
     2b0:	e4 ec       	ldi	r30, 0xC4	; 196
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	87 e4       	ldi	r24, 0x47	; 71
     2b6:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
     2b8:	e5 ec       	ldi	r30, 0xC5	; 197
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	10 82       	st	Z, r1
 UCSR0B = 0x98;
     2be:	e1 ec       	ldi	r30, 0xC1	; 193
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	88 e9       	ldi	r24, 0x98	; 152
     2c4:	80 83       	st	Z, r24
}
     2c6:	cf 91       	pop	r28
     2c8:	df 91       	pop	r29
     2ca:	08 95       	ret

000002cc <uart3_rfid_init>:

void uart3_rfid_init(void)
{
     2cc:	df 93       	push	r29
     2ce:	cf 93       	push	r28
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
	 UCSR3B = 0x00; //disable while setting baud rate
     2d4:	e1 e3       	ldi	r30, 0x31	; 49
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	10 82       	st	Z, r1
	 UCSR3A = 0x00;
     2da:	e0 e3       	ldi	r30, 0x30	; 48
     2dc:	f1 e0       	ldi	r31, 0x01	; 1
     2de:	10 82       	st	Z, r1
	 UCSR3C = 0x06;
     2e0:	e2 e3       	ldi	r30, 0x32	; 50
     2e2:	f1 e0       	ldi	r31, 0x01	; 1
     2e4:	86 e0       	ldi	r24, 0x06	; 6
     2e6:	80 83       	st	Z, r24
	 UBRR3L = 0x47; //set baud rate lo
     2e8:	e4 e3       	ldi	r30, 0x34	; 52
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
     2ec:	87 e4       	ldi	r24, 0x47	; 71
     2ee:	80 83       	st	Z, r24
	 UBRR3H = 0x00; //set baud rate hi
     2f0:	e5 e3       	ldi	r30, 0x35	; 53
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	10 82       	st	Z, r1
	 UCSR3B = 0x98;
     2f6:	e1 e3       	ldi	r30, 0x31	; 49
     2f8:	f1 e0       	ldi	r31, 0x01	; 1
     2fa:	88 e9       	ldi	r24, 0x98	; 152
     2fc:	80 83       	st	Z, r24
}
     2fe:	cf 91       	pop	r28
     300:	df 91       	pop	r29
     302:	08 95       	ret

00000304 <init_devices>:


void init_devices()
{
     304:	df 93       	push	r29
     306:	cf 93       	push	r28
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
	cli();
     30c:	f8 94       	cli
	port_init();
     30e:	0e 94 26 01 	call	0x24c	; 0x24c <port_init>
	adc_init();
     312:	0e 94 31 01 	call	0x262	; 0x262 <adc_init>
	timer5_init();
     316:	0e 94 95 00 	call	0x12a	; 0x12a <timer5_init>
	lcd_set_4bit();
     31a:	0e 94 4b 02 	call	0x496	; 0x496 <lcd_set_4bit>
	lcd_init();
     31e:	0e 94 4a 07 	call	0xe94	; 0xe94 <lcd_init>
	uart0_init();
     322:	0e 94 4a 01 	call	0x294	; 0x294 <uart0_init>
	uart3_rfid_init();
     326:	0e 94 66 01 	call	0x2cc	; 0x2cc <uart3_rfid_init>
	sei();
     32a:	78 94       	sei
}
     32c:	cf 91       	pop	r28
     32e:	df 91       	pop	r29
     330:	08 95       	ret

00000332 <buzzer_off>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/signal.h>

void buzzer_off()
{
     332:	df 93       	push	r29
     334:	cf 93       	push	r28
     336:	0f 92       	push	r0
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
     33c:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
     33e:	e6 e2       	ldi	r30, 0x26	; 38
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xF7;
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	87 7f       	andi	r24, 0xF7	; 247
     34a:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
     34c:	e8 e2       	ldi	r30, 0x28	; 40
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	80 83       	st	Z, r24
}
     354:	0f 90       	pop	r0
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	08 95       	ret

0000035c <buzzer_on>:

void buzzer_on()
{
     35c:	df 93       	push	r29
     35e:	cf 93       	push	r28
     360:	0f 92       	push	r0
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
     366:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
     368:	e6 e2       	ldi	r30, 0x26	; 38
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | 0x08;
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	88 60       	ori	r24, 0x08	; 8
     374:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
     376:	e8 e2       	ldi	r30, 0x28	; 40
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	80 83       	st	Z, r24
}
     37e:	0f 90       	pop	r0
     380:	cf 91       	pop	r28
     382:	df 91       	pop	r29
     384:	08 95       	ret

00000386 <display_led>:
#include <util/delay.h>
#include <avr/signal.h>


void display_led(unsigned char to_display)
{
     386:	df 93       	push	r29
     388:	cf 93       	push	r28
     38a:	0f 92       	push	r0
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	89 83       	std	Y+1, r24	; 0x01
	PORTJ = to_display;
     392:	e5 e0       	ldi	r30, 0x05	; 5
     394:	f1 e0       	ldi	r31, 0x01	; 1
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	80 83       	st	Z, r24
}
     39a:	0f 90       	pop	r0
     39c:	cf 91       	pop	r28
     39e:	df 91       	pop	r29
     3a0:	08 95       	ret

000003a2 <motion>:
#include <util/delay.h>
#include <avr/signal.h>
#include <math.h> //included to support power function

void motion(unsigned char dir)
{
     3a2:	df 93       	push	r29
     3a4:	cf 93       	push	r28
     3a6:	0f 92       	push	r0
     3a8:	0f 92       	push	r0
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char port_restore = 0;
     3b0:	19 82       	std	Y+1, r1	; 0x01
	dir &= 0x0f; // removing upper nibbel as it is not needed
     3b2:	8a 81       	ldd	r24, Y+2	; 0x02
     3b4:	8f 70       	andi	r24, 0x0F	; 15
     3b6:	8a 83       	std	Y+2, r24	; 0x02
	port_restore = PINA;  // reading the PORTA's original status
     3b8:	e0 e2       	ldi	r30, 0x20	; 32
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xf0;  // setting lower direction nibbel to 0
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	80 7f       	andi	r24, 0xF0	; 240
     3c4:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | dir;  // adding lower nibbel for direction command and restoring the PORTA status
     3c6:	99 81       	ldd	r25, Y+1	; 0x01
     3c8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ca:	89 2b       	or	r24, r25
     3cc:	89 83       	std	Y+1, r24	; 0x01
	PORTA = port_restore;  // setting the command to the port
     3ce:	e2 e2       	ldi	r30, 0x22	; 34
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	80 83       	st	Z, r24
}
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	cf 91       	pop	r28
     3dc:	df 91       	pop	r29
     3de:	08 95       	ret

000003e0 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
     3e0:	df 93       	push	r29
     3e2:	cf 93       	push	r28
     3e4:	0f 92       	push	r0
     3e6:	0f 92       	push	r0
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	89 83       	std	Y+1, r24	; 0x01
     3ee:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     3f0:	e8 e2       	ldi	r30, 0x28	; 40
     3f2:	f1 e0       	ldi	r31, 0x01	; 1
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     3f8:	ea e2       	ldi	r30, 0x2A	; 42
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	8a 81       	ldd	r24, Y+2	; 0x02
     3fe:	80 83       	st	Z, r24
}
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	cf 91       	pop	r28
     406:	df 91       	pop	r29
     408:	08 95       	ret

0000040a <forward>:

void forward()
{
     40a:	df 93       	push	r29
     40c:	cf 93       	push	r28
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
	motion(0x06);
     412:	86 e0       	ldi	r24, 0x06	; 6
     414:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <motion>
}
     418:	cf 91       	pop	r28
     41a:	df 91       	pop	r29
     41c:	08 95       	ret

0000041e <backward>:
void backward()
{
     41e:	df 93       	push	r29
     420:	cf 93       	push	r28
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
	motion(0x09);
     426:	89 e0       	ldi	r24, 0x09	; 9
     428:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <motion>
}
     42c:	cf 91       	pop	r28
     42e:	df 91       	pop	r29
     430:	08 95       	ret

00000432 <left>:
void left()
{
     432:	df 93       	push	r29
     434:	cf 93       	push	r28
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
	motion(0x05);
     43a:	85 e0       	ldi	r24, 0x05	; 5
     43c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <motion>
}
     440:	cf 91       	pop	r28
     442:	df 91       	pop	r29
     444:	08 95       	ret

00000446 <right>:
void right()
{
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
	motion(0x0a);
     44e:	8a e0       	ldi	r24, 0x0A	; 10
     450:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <motion>
}
     454:	cf 91       	pop	r28
     456:	df 91       	pop	r29
     458:	08 95       	ret

0000045a <small_left>:
void small_left()
{
     45a:	df 93       	push	r29
     45c:	cf 93       	push	r28
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
	motion(0x04);
     462:	84 e0       	ldi	r24, 0x04	; 4
     464:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <motion>
}
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	08 95       	ret

0000046e <small_right>:
void small_right()
{
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
	motion(0x02);
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <motion>
}
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	08 95       	ret

00000482 <stop>:

void stop()
{
     482:	df 93       	push	r29
     484:	cf 93       	push	r28
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	motion(0x00);
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <motion>
}
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	08 95       	ret

00000496 <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	df 93       	push	r29
     49c:	cf 93       	push	r28
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	c0 57       	subi	r28, 0x70	; 112
     4a4:	d0 40       	sbci	r29, 0x00	; 0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	fe 01       	movw	r30, r28
     4b2:	e3 59       	subi	r30, 0x93	; 147
     4b4:	ff 4f       	sbci	r31, 0xFF	; 255
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	a0 e8       	ldi	r26, 0x80	; 128
     4bc:	bf e3       	ldi	r27, 0x3F	; 63
     4be:	80 83       	st	Z, r24
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	a2 83       	std	Z+2, r26	; 0x02
     4c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4c6:	8e 01       	movw	r16, r28
     4c8:	07 59       	subi	r16, 0x97	; 151
     4ca:	1f 4f       	sbci	r17, 0xFF	; 255
     4cc:	fe 01       	movw	r30, r28
     4ce:	e3 59       	subi	r30, 0x93	; 147
     4d0:	ff 4f       	sbci	r31, 0xFF	; 255
     4d2:	60 81       	ld	r22, Z
     4d4:	71 81       	ldd	r23, Z+1	; 0x01
     4d6:	82 81       	ldd	r24, Z+2	; 0x02
     4d8:	93 81       	ldd	r25, Z+3	; 0x03
     4da:	2d ec       	ldi	r18, 0xCD	; 205
     4dc:	3c ec       	ldi	r19, 0xCC	; 204
     4de:	4c e2       	ldi	r20, 0x2C	; 44
     4e0:	55 e4       	ldi	r21, 0x45	; 69
     4e2:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	f8 01       	movw	r30, r16
     4ec:	80 83       	st	Z, r24
     4ee:	91 83       	std	Z+1, r25	; 0x01
     4f0:	a2 83       	std	Z+2, r26	; 0x02
     4f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4f4:	fe 01       	movw	r30, r28
     4f6:	e7 59       	subi	r30, 0x97	; 151
     4f8:	ff 4f       	sbci	r31, 0xFF	; 255
     4fa:	60 81       	ld	r22, Z
     4fc:	71 81       	ldd	r23, Z+1	; 0x01
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	93 81       	ldd	r25, Z+3	; 0x03
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e8       	ldi	r20, 0x80	; 128
     508:	5f e3       	ldi	r21, 0x3F	; 63
     50a:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
     50e:	88 23       	and	r24, r24
     510:	44 f4       	brge	.+16     	; 0x522 <lcd_set_4bit+0x8c>
		__ticks = 1;
     512:	fe 01       	movw	r30, r28
     514:	e9 59       	subi	r30, 0x99	; 153
     516:	ff 4f       	sbci	r31, 0xFF	; 255
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	91 83       	std	Z+1, r25	; 0x01
     51e:	80 83       	st	Z, r24
     520:	64 c0       	rjmp	.+200    	; 0x5ea <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     522:	fe 01       	movw	r30, r28
     524:	e7 59       	subi	r30, 0x97	; 151
     526:	ff 4f       	sbci	r31, 0xFF	; 255
     528:	60 81       	ld	r22, Z
     52a:	71 81       	ldd	r23, Z+1	; 0x01
     52c:	82 81       	ldd	r24, Z+2	; 0x02
     52e:	93 81       	ldd	r25, Z+3	; 0x03
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	3f ef       	ldi	r19, 0xFF	; 255
     534:	4f e7       	ldi	r20, 0x7F	; 127
     536:	57 e4       	ldi	r21, 0x47	; 71
     538:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
     53c:	18 16       	cp	r1, r24
     53e:	0c f0       	brlt	.+2      	; 0x542 <lcd_set_4bit+0xac>
     540:	43 c0       	rjmp	.+134    	; 0x5c8 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     542:	fe 01       	movw	r30, r28
     544:	e3 59       	subi	r30, 0x93	; 147
     546:	ff 4f       	sbci	r31, 0xFF	; 255
     548:	60 81       	ld	r22, Z
     54a:	71 81       	ldd	r23, Z+1	; 0x01
     54c:	82 81       	ldd	r24, Z+2	; 0x02
     54e:	93 81       	ldd	r25, Z+3	; 0x03
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	40 e2       	ldi	r20, 0x20	; 32
     556:	51 e4       	ldi	r21, 0x41	; 65
     558:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     55c:	dc 01       	movw	r26, r24
     55e:	cb 01       	movw	r24, r22
     560:	8e 01       	movw	r16, r28
     562:	09 59       	subi	r16, 0x99	; 153
     564:	1f 4f       	sbci	r17, 0xFF	; 255
     566:	bc 01       	movw	r22, r24
     568:	cd 01       	movw	r24, r26
     56a:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     56e:	dc 01       	movw	r26, r24
     570:	cb 01       	movw	r24, r22
     572:	f8 01       	movw	r30, r16
     574:	91 83       	std	Z+1, r25	; 0x01
     576:	80 83       	st	Z, r24
     578:	1f c0       	rjmp	.+62     	; 0x5b8 <lcd_set_4bit+0x122>
     57a:	fe 01       	movw	r30, r28
     57c:	eb 59       	subi	r30, 0x9B	; 155
     57e:	ff 4f       	sbci	r31, 0xFF	; 255
     580:	84 e1       	ldi	r24, 0x14	; 20
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	91 83       	std	Z+1, r25	; 0x01
     586:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     588:	fe 01       	movw	r30, r28
     58a:	eb 59       	subi	r30, 0x9B	; 155
     58c:	ff 4f       	sbci	r31, 0xFF	; 255
     58e:	80 81       	ld	r24, Z
     590:	91 81       	ldd	r25, Z+1	; 0x01
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <lcd_set_4bit+0xfc>
     596:	fe 01       	movw	r30, r28
     598:	eb 59       	subi	r30, 0x9B	; 155
     59a:	ff 4f       	sbci	r31, 0xFF	; 255
     59c:	91 83       	std	Z+1, r25	; 0x01
     59e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a0:	de 01       	movw	r26, r28
     5a2:	a9 59       	subi	r26, 0x99	; 153
     5a4:	bf 4f       	sbci	r27, 0xFF	; 255
     5a6:	fe 01       	movw	r30, r28
     5a8:	e9 59       	subi	r30, 0x99	; 153
     5aa:	ff 4f       	sbci	r31, 0xFF	; 255
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	11 96       	adiw	r26, 0x01	; 1
     5b4:	9c 93       	st	X, r25
     5b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5b8:	fe 01       	movw	r30, r28
     5ba:	e9 59       	subi	r30, 0x99	; 153
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	80 81       	ld	r24, Z
     5c0:	91 81       	ldd	r25, Z+1	; 0x01
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	d1 f6       	brne	.-76     	; 0x57a <lcd_set_4bit+0xe4>
     5c6:	27 c0       	rjmp	.+78     	; 0x616 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5c8:	8e 01       	movw	r16, r28
     5ca:	09 59       	subi	r16, 0x99	; 153
     5cc:	1f 4f       	sbci	r17, 0xFF	; 255
     5ce:	fe 01       	movw	r30, r28
     5d0:	e7 59       	subi	r30, 0x97	; 151
     5d2:	ff 4f       	sbci	r31, 0xFF	; 255
     5d4:	60 81       	ld	r22, Z
     5d6:	71 81       	ldd	r23, Z+1	; 0x01
     5d8:	82 81       	ldd	r24, Z+2	; 0x02
     5da:	93 81       	ldd	r25, Z+3	; 0x03
     5dc:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	f8 01       	movw	r30, r16
     5e6:	91 83       	std	Z+1, r25	; 0x01
     5e8:	80 83       	st	Z, r24
     5ea:	de 01       	movw	r26, r28
     5ec:	ad 59       	subi	r26, 0x9D	; 157
     5ee:	bf 4f       	sbci	r27, 0xFF	; 255
     5f0:	fe 01       	movw	r30, r28
     5f2:	e9 59       	subi	r30, 0x99	; 153
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	80 81       	ld	r24, Z
     5f8:	91 81       	ldd	r25, Z+1	; 0x01
     5fa:	8d 93       	st	X+, r24
     5fc:	9c 93       	st	X, r25
     5fe:	fe 01       	movw	r30, r28
     600:	ed 59       	subi	r30, 0x9D	; 157
     602:	ff 4f       	sbci	r31, 0xFF	; 255
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <lcd_set_4bit+0x172>
     60c:	fe 01       	movw	r30, r28
     60e:	ed 59       	subi	r30, 0x9D	; 157
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	91 83       	std	Z+1, r25	; 0x01
     614:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     616:	a8 e2       	ldi	r26, 0x28	; 40
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e8 e2       	ldi	r30, 0x28	; 40
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	8e 7f       	andi	r24, 0xFE	; 254
     622:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     624:	a8 e2       	ldi	r26, 0x28	; 40
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e8 e2       	ldi	r30, 0x28	; 40
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	8d 7f       	andi	r24, 0xFD	; 253
     630:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     632:	e8 e2       	ldi	r30, 0x28	; 40
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 e3       	ldi	r24, 0x30	; 48
     638:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     63a:	a8 e2       	ldi	r26, 0x28	; 40
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e8 e2       	ldi	r30, 0x28	; 40
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	84 60       	ori	r24, 0x04	; 4
     646:	8c 93       	st	X, r24
     648:	fe 01       	movw	r30, r28
     64a:	e1 5a       	subi	r30, 0xA1	; 161
     64c:	ff 4f       	sbci	r31, 0xFF	; 255
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	a0 ea       	ldi	r26, 0xA0	; 160
     654:	b0 e4       	ldi	r27, 0x40	; 64
     656:	80 83       	st	Z, r24
     658:	91 83       	std	Z+1, r25	; 0x01
     65a:	a2 83       	std	Z+2, r26	; 0x02
     65c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     65e:	8e 01       	movw	r16, r28
     660:	05 5a       	subi	r16, 0xA5	; 165
     662:	1f 4f       	sbci	r17, 0xFF	; 255
     664:	fe 01       	movw	r30, r28
     666:	e1 5a       	subi	r30, 0xA1	; 161
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	60 81       	ld	r22, Z
     66c:	71 81       	ldd	r23, Z+1	; 0x01
     66e:	82 81       	ldd	r24, Z+2	; 0x02
     670:	93 81       	ldd	r25, Z+3	; 0x03
     672:	2d ec       	ldi	r18, 0xCD	; 205
     674:	3c ec       	ldi	r19, 0xCC	; 204
     676:	4c e2       	ldi	r20, 0x2C	; 44
     678:	55 e4       	ldi	r21, 0x45	; 69
     67a:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	f8 01       	movw	r30, r16
     684:	80 83       	st	Z, r24
     686:	91 83       	std	Z+1, r25	; 0x01
     688:	a2 83       	std	Z+2, r26	; 0x02
     68a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     68c:	fe 01       	movw	r30, r28
     68e:	e5 5a       	subi	r30, 0xA5	; 165
     690:	ff 4f       	sbci	r31, 0xFF	; 255
     692:	60 81       	ld	r22, Z
     694:	71 81       	ldd	r23, Z+1	; 0x01
     696:	82 81       	ldd	r24, Z+2	; 0x02
     698:	93 81       	ldd	r25, Z+3	; 0x03
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e8       	ldi	r20, 0x80	; 128
     6a0:	5f e3       	ldi	r21, 0x3F	; 63
     6a2:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
     6a6:	88 23       	and	r24, r24
     6a8:	44 f4       	brge	.+16     	; 0x6ba <lcd_set_4bit+0x224>
		__ticks = 1;
     6aa:	fe 01       	movw	r30, r28
     6ac:	e7 5a       	subi	r30, 0xA7	; 167
     6ae:	ff 4f       	sbci	r31, 0xFF	; 255
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	91 83       	std	Z+1, r25	; 0x01
     6b6:	80 83       	st	Z, r24
     6b8:	64 c0       	rjmp	.+200    	; 0x782 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     6ba:	fe 01       	movw	r30, r28
     6bc:	e5 5a       	subi	r30, 0xA5	; 165
     6be:	ff 4f       	sbci	r31, 0xFF	; 255
     6c0:	60 81       	ld	r22, Z
     6c2:	71 81       	ldd	r23, Z+1	; 0x01
     6c4:	82 81       	ldd	r24, Z+2	; 0x02
     6c6:	93 81       	ldd	r25, Z+3	; 0x03
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	3f ef       	ldi	r19, 0xFF	; 255
     6cc:	4f e7       	ldi	r20, 0x7F	; 127
     6ce:	57 e4       	ldi	r21, 0x47	; 71
     6d0:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
     6d4:	18 16       	cp	r1, r24
     6d6:	0c f0       	brlt	.+2      	; 0x6da <lcd_set_4bit+0x244>
     6d8:	43 c0       	rjmp	.+134    	; 0x760 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6da:	fe 01       	movw	r30, r28
     6dc:	e1 5a       	subi	r30, 0xA1	; 161
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	60 81       	ld	r22, Z
     6e2:	71 81       	ldd	r23, Z+1	; 0x01
     6e4:	82 81       	ldd	r24, Z+2	; 0x02
     6e6:	93 81       	ldd	r25, Z+3	; 0x03
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e2       	ldi	r20, 0x20	; 32
     6ee:	51 e4       	ldi	r21, 0x41	; 65
     6f0:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	8e 01       	movw	r16, r28
     6fa:	07 5a       	subi	r16, 0xA7	; 167
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	bc 01       	movw	r22, r24
     700:	cd 01       	movw	r24, r26
     702:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     706:	dc 01       	movw	r26, r24
     708:	cb 01       	movw	r24, r22
     70a:	f8 01       	movw	r30, r16
     70c:	91 83       	std	Z+1, r25	; 0x01
     70e:	80 83       	st	Z, r24
     710:	1f c0       	rjmp	.+62     	; 0x750 <lcd_set_4bit+0x2ba>
     712:	fe 01       	movw	r30, r28
     714:	e9 5a       	subi	r30, 0xA9	; 169
     716:	ff 4f       	sbci	r31, 0xFF	; 255
     718:	84 e1       	ldi	r24, 0x14	; 20
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	91 83       	std	Z+1, r25	; 0x01
     71e:	80 83       	st	Z, r24
     720:	fe 01       	movw	r30, r28
     722:	e9 5a       	subi	r30, 0xA9	; 169
     724:	ff 4f       	sbci	r31, 0xFF	; 255
     726:	80 81       	ld	r24, Z
     728:	91 81       	ldd	r25, Z+1	; 0x01
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <lcd_set_4bit+0x294>
     72e:	fe 01       	movw	r30, r28
     730:	e9 5a       	subi	r30, 0xA9	; 169
     732:	ff 4f       	sbci	r31, 0xFF	; 255
     734:	91 83       	std	Z+1, r25	; 0x01
     736:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     738:	de 01       	movw	r26, r28
     73a:	a7 5a       	subi	r26, 0xA7	; 167
     73c:	bf 4f       	sbci	r27, 0xFF	; 255
     73e:	fe 01       	movw	r30, r28
     740:	e7 5a       	subi	r30, 0xA7	; 167
     742:	ff 4f       	sbci	r31, 0xFF	; 255
     744:	80 81       	ld	r24, Z
     746:	91 81       	ldd	r25, Z+1	; 0x01
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	11 96       	adiw	r26, 0x01	; 1
     74c:	9c 93       	st	X, r25
     74e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     750:	fe 01       	movw	r30, r28
     752:	e7 5a       	subi	r30, 0xA7	; 167
     754:	ff 4f       	sbci	r31, 0xFF	; 255
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	d1 f6       	brne	.-76     	; 0x712 <lcd_set_4bit+0x27c>
     75e:	27 c0       	rjmp	.+78     	; 0x7ae <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     760:	8e 01       	movw	r16, r28
     762:	07 5a       	subi	r16, 0xA7	; 167
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	fe 01       	movw	r30, r28
     768:	e5 5a       	subi	r30, 0xA5	; 165
     76a:	ff 4f       	sbci	r31, 0xFF	; 255
     76c:	60 81       	ld	r22, Z
     76e:	71 81       	ldd	r23, Z+1	; 0x01
     770:	82 81       	ldd	r24, Z+2	; 0x02
     772:	93 81       	ldd	r25, Z+3	; 0x03
     774:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
     77c:	f8 01       	movw	r30, r16
     77e:	91 83       	std	Z+1, r25	; 0x01
     780:	80 83       	st	Z, r24
     782:	de 01       	movw	r26, r28
     784:	ab 5a       	subi	r26, 0xAB	; 171
     786:	bf 4f       	sbci	r27, 0xFF	; 255
     788:	fe 01       	movw	r30, r28
     78a:	e7 5a       	subi	r30, 0xA7	; 167
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	80 81       	ld	r24, Z
     790:	91 81       	ldd	r25, Z+1	; 0x01
     792:	8d 93       	st	X+, r24
     794:	9c 93       	st	X, r25
     796:	fe 01       	movw	r30, r28
     798:	eb 5a       	subi	r30, 0xAB	; 171
     79a:	ff 4f       	sbci	r31, 0xFF	; 255
     79c:	80 81       	ld	r24, Z
     79e:	91 81       	ldd	r25, Z+1	; 0x01
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x30a>
     7a4:	fe 01       	movw	r30, r28
     7a6:	eb 5a       	subi	r30, 0xAB	; 171
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	91 83       	std	Z+1, r25	; 0x01
     7ac:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     7ae:	a8 e2       	ldi	r26, 0x28	; 40
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	e8 e2       	ldi	r30, 0x28	; 40
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	8b 7f       	andi	r24, 0xFB	; 251
     7ba:	8c 93       	st	X, r24
     7bc:	fe 01       	movw	r30, r28
     7be:	ef 5a       	subi	r30, 0xAF	; 175
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a0 e8       	ldi	r26, 0x80	; 128
     7c8:	bf e3       	ldi	r27, 0x3F	; 63
     7ca:	80 83       	st	Z, r24
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	a2 83       	std	Z+2, r26	; 0x02
     7d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7d2:	8e 01       	movw	r16, r28
     7d4:	03 5b       	subi	r16, 0xB3	; 179
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
     7d8:	fe 01       	movw	r30, r28
     7da:	ef 5a       	subi	r30, 0xAF	; 175
     7dc:	ff 4f       	sbci	r31, 0xFF	; 255
     7de:	60 81       	ld	r22, Z
     7e0:	71 81       	ldd	r23, Z+1	; 0x01
     7e2:	82 81       	ldd	r24, Z+2	; 0x02
     7e4:	93 81       	ldd	r25, Z+3	; 0x03
     7e6:	2d ec       	ldi	r18, 0xCD	; 205
     7e8:	3c ec       	ldi	r19, 0xCC	; 204
     7ea:	4c e2       	ldi	r20, 0x2C	; 44
     7ec:	55 e4       	ldi	r21, 0x45	; 69
     7ee:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	f8 01       	movw	r30, r16
     7f8:	80 83       	st	Z, r24
     7fa:	91 83       	std	Z+1, r25	; 0x01
     7fc:	a2 83       	std	Z+2, r26	; 0x02
     7fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     800:	fe 01       	movw	r30, r28
     802:	e3 5b       	subi	r30, 0xB3	; 179
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	60 81       	ld	r22, Z
     808:	71 81       	ldd	r23, Z+1	; 0x01
     80a:	82 81       	ldd	r24, Z+2	; 0x02
     80c:	93 81       	ldd	r25, Z+3	; 0x03
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e8       	ldi	r20, 0x80	; 128
     814:	5f e3       	ldi	r21, 0x3F	; 63
     816:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
     81a:	88 23       	and	r24, r24
     81c:	44 f4       	brge	.+16     	; 0x82e <lcd_set_4bit+0x398>
		__ticks = 1;
     81e:	fe 01       	movw	r30, r28
     820:	e5 5b       	subi	r30, 0xB5	; 181
     822:	ff 4f       	sbci	r31, 0xFF	; 255
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	91 83       	std	Z+1, r25	; 0x01
     82a:	80 83       	st	Z, r24
     82c:	64 c0       	rjmp	.+200    	; 0x8f6 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     82e:	fe 01       	movw	r30, r28
     830:	e3 5b       	subi	r30, 0xB3	; 179
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	60 81       	ld	r22, Z
     836:	71 81       	ldd	r23, Z+1	; 0x01
     838:	82 81       	ldd	r24, Z+2	; 0x02
     83a:	93 81       	ldd	r25, Z+3	; 0x03
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f e7       	ldi	r20, 0x7F	; 127
     842:	57 e4       	ldi	r21, 0x47	; 71
     844:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
     848:	18 16       	cp	r1, r24
     84a:	0c f0       	brlt	.+2      	; 0x84e <lcd_set_4bit+0x3b8>
     84c:	43 c0       	rjmp	.+134    	; 0x8d4 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     84e:	fe 01       	movw	r30, r28
     850:	ef 5a       	subi	r30, 0xAF	; 175
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	60 81       	ld	r22, Z
     856:	71 81       	ldd	r23, Z+1	; 0x01
     858:	82 81       	ldd	r24, Z+2	; 0x02
     85a:	93 81       	ldd	r25, Z+3	; 0x03
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e2       	ldi	r20, 0x20	; 32
     862:	51 e4       	ldi	r21, 0x41	; 65
     864:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	8e 01       	movw	r16, r28
     86e:	05 5b       	subi	r16, 0xB5	; 181
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	bc 01       	movw	r22, r24
     874:	cd 01       	movw	r24, r26
     876:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	f8 01       	movw	r30, r16
     880:	91 83       	std	Z+1, r25	; 0x01
     882:	80 83       	st	Z, r24
     884:	1f c0       	rjmp	.+62     	; 0x8c4 <lcd_set_4bit+0x42e>
     886:	fe 01       	movw	r30, r28
     888:	e7 5b       	subi	r30, 0xB7	; 183
     88a:	ff 4f       	sbci	r31, 0xFF	; 255
     88c:	84 e1       	ldi	r24, 0x14	; 20
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	91 83       	std	Z+1, r25	; 0x01
     892:	80 83       	st	Z, r24
     894:	fe 01       	movw	r30, r28
     896:	e7 5b       	subi	r30, 0xB7	; 183
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <lcd_set_4bit+0x408>
     8a2:	fe 01       	movw	r30, r28
     8a4:	e7 5b       	subi	r30, 0xB7	; 183
     8a6:	ff 4f       	sbci	r31, 0xFF	; 255
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ac:	de 01       	movw	r26, r28
     8ae:	a5 5b       	subi	r26, 0xB5	; 181
     8b0:	bf 4f       	sbci	r27, 0xFF	; 255
     8b2:	fe 01       	movw	r30, r28
     8b4:	e5 5b       	subi	r30, 0xB5	; 181
     8b6:	ff 4f       	sbci	r31, 0xFF	; 255
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	11 96       	adiw	r26, 0x01	; 1
     8c0:	9c 93       	st	X, r25
     8c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c4:	fe 01       	movw	r30, r28
     8c6:	e5 5b       	subi	r30, 0xB5	; 181
     8c8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	d1 f6       	brne	.-76     	; 0x886 <lcd_set_4bit+0x3f0>
     8d2:	27 c0       	rjmp	.+78     	; 0x922 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d4:	8e 01       	movw	r16, r28
     8d6:	05 5b       	subi	r16, 0xB5	; 181
     8d8:	1f 4f       	sbci	r17, 0xFF	; 255
     8da:	fe 01       	movw	r30, r28
     8dc:	e3 5b       	subi	r30, 0xB3	; 179
     8de:	ff 4f       	sbci	r31, 0xFF	; 255
     8e0:	60 81       	ld	r22, Z
     8e2:	71 81       	ldd	r23, Z+1	; 0x01
     8e4:	82 81       	ldd	r24, Z+2	; 0x02
     8e6:	93 81       	ldd	r25, Z+3	; 0x03
     8e8:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     8ec:	dc 01       	movw	r26, r24
     8ee:	cb 01       	movw	r24, r22
     8f0:	f8 01       	movw	r30, r16
     8f2:	91 83       	std	Z+1, r25	; 0x01
     8f4:	80 83       	st	Z, r24
     8f6:	de 01       	movw	r26, r28
     8f8:	a9 5b       	subi	r26, 0xB9	; 185
     8fa:	bf 4f       	sbci	r27, 0xFF	; 255
     8fc:	fe 01       	movw	r30, r28
     8fe:	e5 5b       	subi	r30, 0xB5	; 181
     900:	ff 4f       	sbci	r31, 0xFF	; 255
     902:	80 81       	ld	r24, Z
     904:	91 81       	ldd	r25, Z+1	; 0x01
     906:	8d 93       	st	X+, r24
     908:	9c 93       	st	X, r25
     90a:	fe 01       	movw	r30, r28
     90c:	e9 5b       	subi	r30, 0xB9	; 185
     90e:	ff 4f       	sbci	r31, 0xFF	; 255
     910:	80 81       	ld	r24, Z
     912:	91 81       	ldd	r25, Z+1	; 0x01
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <lcd_set_4bit+0x47e>
     918:	fe 01       	movw	r30, r28
     91a:	e9 5b       	subi	r30, 0xB9	; 185
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     922:	a8 e2       	ldi	r26, 0x28	; 40
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	e8 e2       	ldi	r30, 0x28	; 40
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	8e 7f       	andi	r24, 0xFE	; 254
     92e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     930:	a8 e2       	ldi	r26, 0x28	; 40
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	e8 e2       	ldi	r30, 0x28	; 40
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	8d 7f       	andi	r24, 0xFD	; 253
     93c:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     93e:	e8 e2       	ldi	r30, 0x28	; 40
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 e3       	ldi	r24, 0x30	; 48
     944:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     946:	a8 e2       	ldi	r26, 0x28	; 40
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e8 e2       	ldi	r30, 0x28	; 40
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	84 60       	ori	r24, 0x04	; 4
     952:	8c 93       	st	X, r24
     954:	fe 01       	movw	r30, r28
     956:	ed 5b       	subi	r30, 0xBD	; 189
     958:	ff 4f       	sbci	r31, 0xFF	; 255
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	a0 ea       	ldi	r26, 0xA0	; 160
     960:	b0 e4       	ldi	r27, 0x40	; 64
     962:	80 83       	st	Z, r24
     964:	91 83       	std	Z+1, r25	; 0x01
     966:	a2 83       	std	Z+2, r26	; 0x02
     968:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     96a:	8e 01       	movw	r16, r28
     96c:	01 5c       	subi	r16, 0xC1	; 193
     96e:	1f 4f       	sbci	r17, 0xFF	; 255
     970:	fe 01       	movw	r30, r28
     972:	ed 5b       	subi	r30, 0xBD	; 189
     974:	ff 4f       	sbci	r31, 0xFF	; 255
     976:	60 81       	ld	r22, Z
     978:	71 81       	ldd	r23, Z+1	; 0x01
     97a:	82 81       	ldd	r24, Z+2	; 0x02
     97c:	93 81       	ldd	r25, Z+3	; 0x03
     97e:	2d ec       	ldi	r18, 0xCD	; 205
     980:	3c ec       	ldi	r19, 0xCC	; 204
     982:	4c e2       	ldi	r20, 0x2C	; 44
     984:	55 e4       	ldi	r21, 0x45	; 69
     986:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     98a:	dc 01       	movw	r26, r24
     98c:	cb 01       	movw	r24, r22
     98e:	f8 01       	movw	r30, r16
     990:	80 83       	st	Z, r24
     992:	91 83       	std	Z+1, r25	; 0x01
     994:	a2 83       	std	Z+2, r26	; 0x02
     996:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     998:	fe 01       	movw	r30, r28
     99a:	ff 96       	adiw	r30, 0x3f	; 63
     99c:	60 81       	ld	r22, Z
     99e:	71 81       	ldd	r23, Z+1	; 0x01
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	93 81       	ldd	r25, Z+3	; 0x03
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e8       	ldi	r20, 0x80	; 128
     9aa:	5f e3       	ldi	r21, 0x3F	; 63
     9ac:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
     9b0:	88 23       	and	r24, r24
     9b2:	2c f4       	brge	.+10     	; 0x9be <lcd_set_4bit+0x528>
		__ticks = 1;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	9e af       	std	Y+62, r25	; 0x3e
     9ba:	8d af       	std	Y+61, r24	; 0x3d
     9bc:	46 c0       	rjmp	.+140    	; 0xa4a <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     9be:	fe 01       	movw	r30, r28
     9c0:	ff 96       	adiw	r30, 0x3f	; 63
     9c2:	60 81       	ld	r22, Z
     9c4:	71 81       	ldd	r23, Z+1	; 0x01
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	93 81       	ldd	r25, Z+3	; 0x03
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	3f ef       	ldi	r19, 0xFF	; 255
     9ce:	4f e7       	ldi	r20, 0x7F	; 127
     9d0:	57 e4       	ldi	r21, 0x47	; 71
     9d2:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
     9d6:	18 16       	cp	r1, r24
     9d8:	64 f5       	brge	.+88     	; 0xa32 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9da:	fe 01       	movw	r30, r28
     9dc:	ed 5b       	subi	r30, 0xBD	; 189
     9de:	ff 4f       	sbci	r31, 0xFF	; 255
     9e0:	60 81       	ld	r22, Z
     9e2:	71 81       	ldd	r23, Z+1	; 0x01
     9e4:	82 81       	ldd	r24, Z+2	; 0x02
     9e6:	93 81       	ldd	r25, Z+3	; 0x03
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e2       	ldi	r20, 0x20	; 32
     9ee:	51 e4       	ldi	r21, 0x41	; 65
     9f0:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	bc 01       	movw	r22, r24
     9fa:	cd 01       	movw	r24, r26
     9fc:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     a00:	dc 01       	movw	r26, r24
     a02:	cb 01       	movw	r24, r22
     a04:	9e af       	std	Y+62, r25	; 0x3e
     a06:	8d af       	std	Y+61, r24	; 0x3d
     a08:	0f c0       	rjmp	.+30     	; 0xa28 <lcd_set_4bit+0x592>
     a0a:	84 e1       	ldi	r24, 0x14	; 20
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	9c af       	std	Y+60, r25	; 0x3c
     a10:	8b af       	std	Y+59, r24	; 0x3b
     a12:	8b ad       	ldd	r24, Y+59	; 0x3b
     a14:	9c ad       	ldd	r25, Y+60	; 0x3c
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	f1 f7       	brne	.-4      	; 0xa16 <lcd_set_4bit+0x580>
     a1a:	9c af       	std	Y+60, r25	; 0x3c
     a1c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a1e:	8d ad       	ldd	r24, Y+61	; 0x3d
     a20:	9e ad       	ldd	r25, Y+62	; 0x3e
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	9e af       	std	Y+62, r25	; 0x3e
     a26:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a28:	8d ad       	ldd	r24, Y+61	; 0x3d
     a2a:	9e ad       	ldd	r25, Y+62	; 0x3e
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	69 f7       	brne	.-38     	; 0xa0a <lcd_set_4bit+0x574>
     a30:	16 c0       	rjmp	.+44     	; 0xa5e <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a32:	fe 01       	movw	r30, r28
     a34:	ff 96       	adiw	r30, 0x3f	; 63
     a36:	60 81       	ld	r22, Z
     a38:	71 81       	ldd	r23, Z+1	; 0x01
     a3a:	82 81       	ldd	r24, Z+2	; 0x02
     a3c:	93 81       	ldd	r25, Z+3	; 0x03
     a3e:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	9e af       	std	Y+62, r25	; 0x3e
     a48:	8d af       	std	Y+61, r24	; 0x3d
     a4a:	8d ad       	ldd	r24, Y+61	; 0x3d
     a4c:	9e ad       	ldd	r25, Y+62	; 0x3e
     a4e:	9a af       	std	Y+58, r25	; 0x3a
     a50:	89 af       	std	Y+57, r24	; 0x39
     a52:	89 ad       	ldd	r24, Y+57	; 0x39
     a54:	9a ad       	ldd	r25, Y+58	; 0x3a
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <lcd_set_4bit+0x5c0>
     a5a:	9a af       	std	Y+58, r25	; 0x3a
     a5c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     a5e:	a8 e2       	ldi	r26, 0x28	; 40
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e8 e2       	ldi	r30, 0x28	; 40
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	8b 7f       	andi	r24, 0xFB	; 251
     a6a:	8c 93       	st	X, r24
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e8       	ldi	r26, 0x80	; 128
     a72:	bf e3       	ldi	r27, 0x3F	; 63
     a74:	8d ab       	std	Y+53, r24	; 0x35
     a76:	9e ab       	std	Y+54, r25	; 0x36
     a78:	af ab       	std	Y+55, r26	; 0x37
     a7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a7c:	6d a9       	ldd	r22, Y+53	; 0x35
     a7e:	7e a9       	ldd	r23, Y+54	; 0x36
     a80:	8f a9       	ldd	r24, Y+55	; 0x37
     a82:	98 ad       	ldd	r25, Y+56	; 0x38
     a84:	2d ec       	ldi	r18, 0xCD	; 205
     a86:	3c ec       	ldi	r19, 0xCC	; 204
     a88:	4c e2       	ldi	r20, 0x2C	; 44
     a8a:	55 e4       	ldi	r21, 0x45	; 69
     a8c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     a90:	dc 01       	movw	r26, r24
     a92:	cb 01       	movw	r24, r22
     a94:	89 ab       	std	Y+49, r24	; 0x31
     a96:	9a ab       	std	Y+50, r25	; 0x32
     a98:	ab ab       	std	Y+51, r26	; 0x33
     a9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     a9c:	69 a9       	ldd	r22, Y+49	; 0x31
     a9e:	7a a9       	ldd	r23, Y+50	; 0x32
     aa0:	8b a9       	ldd	r24, Y+51	; 0x33
     aa2:	9c a9       	ldd	r25, Y+52	; 0x34
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e8       	ldi	r20, 0x80	; 128
     aaa:	5f e3       	ldi	r21, 0x3F	; 63
     aac:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
     ab0:	88 23       	and	r24, r24
     ab2:	2c f4       	brge	.+10     	; 0xabe <lcd_set_4bit+0x628>
		__ticks = 1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	98 ab       	std	Y+48, r25	; 0x30
     aba:	8f a7       	std	Y+47, r24	; 0x2f
     abc:	3f c0       	rjmp	.+126    	; 0xb3c <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     abe:	69 a9       	ldd	r22, Y+49	; 0x31
     ac0:	7a a9       	ldd	r23, Y+50	; 0x32
     ac2:	8b a9       	ldd	r24, Y+51	; 0x33
     ac4:	9c a9       	ldd	r25, Y+52	; 0x34
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	3f ef       	ldi	r19, 0xFF	; 255
     aca:	4f e7       	ldi	r20, 0x7F	; 127
     acc:	57 e4       	ldi	r21, 0x47	; 71
     ace:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
     ad2:	18 16       	cp	r1, r24
     ad4:	4c f5       	brge	.+82     	; 0xb28 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ad6:	6d a9       	ldd	r22, Y+53	; 0x35
     ad8:	7e a9       	ldd	r23, Y+54	; 0x36
     ada:	8f a9       	ldd	r24, Y+55	; 0x37
     adc:	98 ad       	ldd	r25, Y+56	; 0x38
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e2       	ldi	r20, 0x20	; 32
     ae4:	51 e4       	ldi	r21, 0x41	; 65
     ae6:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     aea:	dc 01       	movw	r26, r24
     aec:	cb 01       	movw	r24, r22
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     af6:	dc 01       	movw	r26, r24
     af8:	cb 01       	movw	r24, r22
     afa:	98 ab       	std	Y+48, r25	; 0x30
     afc:	8f a7       	std	Y+47, r24	; 0x2f
     afe:	0f c0       	rjmp	.+30     	; 0xb1e <lcd_set_4bit+0x688>
     b00:	84 e1       	ldi	r24, 0x14	; 20
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	9e a7       	std	Y+46, r25	; 0x2e
     b06:	8d a7       	std	Y+45, r24	; 0x2d
     b08:	8d a5       	ldd	r24, Y+45	; 0x2d
     b0a:	9e a5       	ldd	r25, Y+46	; 0x2e
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	f1 f7       	brne	.-4      	; 0xb0c <lcd_set_4bit+0x676>
     b10:	9e a7       	std	Y+46, r25	; 0x2e
     b12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b14:	8f a5       	ldd	r24, Y+47	; 0x2f
     b16:	98 a9       	ldd	r25, Y+48	; 0x30
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	98 ab       	std	Y+48, r25	; 0x30
     b1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
     b20:	98 a9       	ldd	r25, Y+48	; 0x30
     b22:	00 97       	sbiw	r24, 0x00	; 0
     b24:	69 f7       	brne	.-38     	; 0xb00 <lcd_set_4bit+0x66a>
     b26:	14 c0       	rjmp	.+40     	; 0xb50 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b28:	69 a9       	ldd	r22, Y+49	; 0x31
     b2a:	7a a9       	ldd	r23, Y+50	; 0x32
     b2c:	8b a9       	ldd	r24, Y+51	; 0x33
     b2e:	9c a9       	ldd	r25, Y+52	; 0x34
     b30:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	98 ab       	std	Y+48, r25	; 0x30
     b3a:	8f a7       	std	Y+47, r24	; 0x2f
     b3c:	8f a5       	ldd	r24, Y+47	; 0x2f
     b3e:	98 a9       	ldd	r25, Y+48	; 0x30
     b40:	9c a7       	std	Y+44, r25	; 0x2c
     b42:	8b a7       	std	Y+43, r24	; 0x2b
     b44:	8b a5       	ldd	r24, Y+43	; 0x2b
     b46:	9c a5       	ldd	r25, Y+44	; 0x2c
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <lcd_set_4bit+0x6b2>
     b4c:	9c a7       	std	Y+44, r25	; 0x2c
     b4e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b50:	a8 e2       	ldi	r26, 0x28	; 40
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e8 e2       	ldi	r30, 0x28	; 40
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8e 7f       	andi	r24, 0xFE	; 254
     b5c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b5e:	a8 e2       	ldi	r26, 0x28	; 40
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e8 e2       	ldi	r30, 0x28	; 40
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	8d 7f       	andi	r24, 0xFD	; 253
     b6a:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     b6c:	e8 e2       	ldi	r30, 0x28	; 40
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 e3       	ldi	r24, 0x30	; 48
     b72:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     b74:	a8 e2       	ldi	r26, 0x28	; 40
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e8 e2       	ldi	r30, 0x28	; 40
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	84 60       	ori	r24, 0x04	; 4
     b80:	8c 93       	st	X, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 ea       	ldi	r26, 0xA0	; 160
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8f a3       	std	Y+39, r24	; 0x27
     b8c:	98 a7       	std	Y+40, r25	; 0x28
     b8e:	a9 a7       	std	Y+41, r26	; 0x29
     b90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6f a1       	ldd	r22, Y+39	; 0x27
     b94:	78 a5       	ldd	r23, Y+40	; 0x28
     b96:	89 a5       	ldd	r24, Y+41	; 0x29
     b98:	9a a5       	ldd	r25, Y+42	; 0x2a
     b9a:	2d ec       	ldi	r18, 0xCD	; 205
     b9c:	3c ec       	ldi	r19, 0xCC	; 204
     b9e:	4c e2       	ldi	r20, 0x2C	; 44
     ba0:	55 e4       	ldi	r21, 0x45	; 69
     ba2:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8b a3       	std	Y+35, r24	; 0x23
     bac:	9c a3       	std	Y+36, r25	; 0x24
     bae:	ad a3       	std	Y+37, r26	; 0x25
     bb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bb2:	6b a1       	ldd	r22, Y+35	; 0x23
     bb4:	7c a1       	ldd	r23, Y+36	; 0x24
     bb6:	8d a1       	ldd	r24, Y+37	; 0x25
     bb8:	9e a1       	ldd	r25, Y+38	; 0x26
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <lcd_set_4bit+0x73e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9a a3       	std	Y+34, r25	; 0x22
     bd0:	89 a3       	std	Y+33, r24	; 0x21
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     bd4:	6b a1       	ldd	r22, Y+35	; 0x23
     bd6:	7c a1       	ldd	r23, Y+36	; 0x24
     bd8:	8d a1       	ldd	r24, Y+37	; 0x25
     bda:	9e a1       	ldd	r25, Y+38	; 0x26
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6f a1       	ldd	r22, Y+39	; 0x27
     bee:	78 a5       	ldd	r23, Y+40	; 0x28
     bf0:	89 a5       	ldd	r24, Y+41	; 0x29
     bf2:	9a a5       	ldd	r25, Y+42	; 0x2a
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9a a3       	std	Y+34, r25	; 0x22
     c12:	89 a3       	std	Y+33, r24	; 0x21
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <lcd_set_4bit+0x79e>
     c16:	84 e1       	ldi	r24, 0x14	; 20
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	98 a3       	std	Y+32, r25	; 0x20
     c1c:	8f 8f       	std	Y+31, r24	; 0x1f
     c1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c20:	98 a1       	ldd	r25, Y+32	; 0x20
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <lcd_set_4bit+0x78c>
     c26:	98 a3       	std	Y+32, r25	; 0x20
     c28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	89 a1       	ldd	r24, Y+33	; 0x21
     c2c:	9a a1       	ldd	r25, Y+34	; 0x22
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9a a3       	std	Y+34, r25	; 0x22
     c32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	89 a1       	ldd	r24, Y+33	; 0x21
     c36:	9a a1       	ldd	r25, Y+34	; 0x22
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <lcd_set_4bit+0x780>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6b a1       	ldd	r22, Y+35	; 0x23
     c40:	7c a1       	ldd	r23, Y+36	; 0x24
     c42:	8d a1       	ldd	r24, Y+37	; 0x25
     c44:	9e a1       	ldd	r25, Y+38	; 0x26
     c46:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9a a3       	std	Y+34, r25	; 0x22
     c50:	89 a3       	std	Y+33, r24	; 0x21
     c52:	89 a1       	ldd	r24, Y+33	; 0x21
     c54:	9a a1       	ldd	r25, Y+34	; 0x22
     c56:	9e 8f       	std	Y+30, r25	; 0x1e
     c58:	8d 8f       	std	Y+29, r24	; 0x1d
     c5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <lcd_set_4bit+0x7c8>
     c62:	9e 8f       	std	Y+30, r25	; 0x1e
     c64:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     c66:	a8 e2       	ldi	r26, 0x28	; 40
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e8 e2       	ldi	r30, 0x28	; 40
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8b 7f       	andi	r24, 0xFB	; 251
     c72:	8c 93       	st	X, r24
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	a0 e8       	ldi	r26, 0x80	; 128
     c7a:	bf e3       	ldi	r27, 0x3F	; 63
     c7c:	89 8f       	std	Y+25, r24	; 0x19
     c7e:	9a 8f       	std	Y+26, r25	; 0x1a
     c80:	ab 8f       	std	Y+27, r26	; 0x1b
     c82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c84:	69 8d       	ldd	r22, Y+25	; 0x19
     c86:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c88:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c8c:	2d ec       	ldi	r18, 0xCD	; 205
     c8e:	3c ec       	ldi	r19, 0xCC	; 204
     c90:	4c e2       	ldi	r20, 0x2C	; 44
     c92:	55 e4       	ldi	r21, 0x45	; 69
     c94:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     c98:	dc 01       	movw	r26, r24
     c9a:	cb 01       	movw	r24, r22
     c9c:	8d 8b       	std	Y+21, r24	; 0x15
     c9e:	9e 8b       	std	Y+22, r25	; 0x16
     ca0:	af 8b       	std	Y+23, r26	; 0x17
     ca2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ca4:	6d 89       	ldd	r22, Y+21	; 0x15
     ca6:	7e 89       	ldd	r23, Y+22	; 0x16
     ca8:	8f 89       	ldd	r24, Y+23	; 0x17
     caa:	98 8d       	ldd	r25, Y+24	; 0x18
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e8       	ldi	r20, 0x80	; 128
     cb2:	5f e3       	ldi	r21, 0x3F	; 63
     cb4:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
     cb8:	88 23       	and	r24, r24
     cba:	2c f4       	brge	.+10     	; 0xcc6 <lcd_set_4bit+0x830>
		__ticks = 1;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	9c 8b       	std	Y+20, r25	; 0x14
     cc2:	8b 8b       	std	Y+19, r24	; 0x13
     cc4:	3f c0       	rjmp	.+126    	; 0xd44 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     cc6:	6d 89       	ldd	r22, Y+21	; 0x15
     cc8:	7e 89       	ldd	r23, Y+22	; 0x16
     cca:	8f 89       	ldd	r24, Y+23	; 0x17
     ccc:	98 8d       	ldd	r25, Y+24	; 0x18
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	3f ef       	ldi	r19, 0xFF	; 255
     cd2:	4f e7       	ldi	r20, 0x7F	; 127
     cd4:	57 e4       	ldi	r21, 0x47	; 71
     cd6:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
     cda:	18 16       	cp	r1, r24
     cdc:	4c f5       	brge	.+82     	; 0xd30 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cde:	69 8d       	ldd	r22, Y+25	; 0x19
     ce0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ce2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ce4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e2       	ldi	r20, 0x20	; 32
     cec:	51 e4       	ldi	r21, 0x41	; 65
     cee:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	bc 01       	movw	r22, r24
     cf8:	cd 01       	movw	r24, r26
     cfa:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	9c 8b       	std	Y+20, r25	; 0x14
     d04:	8b 8b       	std	Y+19, r24	; 0x13
     d06:	0f c0       	rjmp	.+30     	; 0xd26 <lcd_set_4bit+0x890>
     d08:	84 e1       	ldi	r24, 0x14	; 20
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	9a 8b       	std	Y+18, r25	; 0x12
     d0e:	89 8b       	std	Y+17, r24	; 0x11
     d10:	89 89       	ldd	r24, Y+17	; 0x11
     d12:	9a 89       	ldd	r25, Y+18	; 0x12
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <lcd_set_4bit+0x87e>
     d18:	9a 8b       	std	Y+18, r25	; 0x12
     d1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d1c:	8b 89       	ldd	r24, Y+19	; 0x13
     d1e:	9c 89       	ldd	r25, Y+20	; 0x14
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	9c 8b       	std	Y+20, r25	; 0x14
     d24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d26:	8b 89       	ldd	r24, Y+19	; 0x13
     d28:	9c 89       	ldd	r25, Y+20	; 0x14
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	69 f7       	brne	.-38     	; 0xd08 <lcd_set_4bit+0x872>
     d2e:	14 c0       	rjmp	.+40     	; 0xd58 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d30:	6d 89       	ldd	r22, Y+21	; 0x15
     d32:	7e 89       	ldd	r23, Y+22	; 0x16
     d34:	8f 89       	ldd	r24, Y+23	; 0x17
     d36:	98 8d       	ldd	r25, Y+24	; 0x18
     d38:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	9c 8b       	std	Y+20, r25	; 0x14
     d42:	8b 8b       	std	Y+19, r24	; 0x13
     d44:	8b 89       	ldd	r24, Y+19	; 0x13
     d46:	9c 89       	ldd	r25, Y+20	; 0x14
     d48:	98 8b       	std	Y+16, r25	; 0x10
     d4a:	8f 87       	std	Y+15, r24	; 0x0f
     d4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d4e:	98 89       	ldd	r25, Y+16	; 0x10
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <lcd_set_4bit+0x8ba>
     d54:	98 8b       	std	Y+16, r25	; 0x10
     d56:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d58:	a8 e2       	ldi	r26, 0x28	; 40
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e8 e2       	ldi	r30, 0x28	; 40
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8e 7f       	andi	r24, 0xFE	; 254
     d64:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d66:	a8 e2       	ldi	r26, 0x28	; 40
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e8 e2       	ldi	r30, 0x28	; 40
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8d 7f       	andi	r24, 0xFD	; 253
     d72:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     d74:	e8 e2       	ldi	r30, 0x28	; 40
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 e2       	ldi	r24, 0x20	; 32
     d7a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     d7c:	a8 e2       	ldi	r26, 0x28	; 40
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e8 e2       	ldi	r30, 0x28	; 40
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	84 60       	ori	r24, 0x04	; 4
     d88:	8c 93       	st	X, r24
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a0 ea       	ldi	r26, 0xA0	; 160
     d90:	b0 e4       	ldi	r27, 0x40	; 64
     d92:	8b 87       	std	Y+11, r24	; 0x0b
     d94:	9c 87       	std	Y+12, r25	; 0x0c
     d96:	ad 87       	std	Y+13, r26	; 0x0d
     d98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     da0:	9e 85       	ldd	r25, Y+14	; 0x0e
     da2:	2d ec       	ldi	r18, 0xCD	; 205
     da4:	3c ec       	ldi	r19, 0xCC	; 204
     da6:	4c e2       	ldi	r20, 0x2C	; 44
     da8:	55 e4       	ldi	r21, 0x45	; 69
     daa:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	8f 83       	std	Y+7, r24	; 0x07
     db4:	98 87       	std	Y+8, r25	; 0x08
     db6:	a9 87       	std	Y+9, r26	; 0x09
     db8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dba:	6f 81       	ldd	r22, Y+7	; 0x07
     dbc:	78 85       	ldd	r23, Y+8	; 0x08
     dbe:	89 85       	ldd	r24, Y+9	; 0x09
     dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e8       	ldi	r20, 0x80	; 128
     dc8:	5f e3       	ldi	r21, 0x3F	; 63
     dca:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
     dce:	88 23       	and	r24, r24
     dd0:	2c f4       	brge	.+10     	; 0xddc <lcd_set_4bit+0x946>
		__ticks = 1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	3f c0       	rjmp	.+126    	; 0xe5a <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     ddc:	6f 81       	ldd	r22, Y+7	; 0x07
     dde:	78 85       	ldd	r23, Y+8	; 0x08
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	3f ef       	ldi	r19, 0xFF	; 255
     de8:	4f e7       	ldi	r20, 0x7F	; 127
     dea:	57 e4       	ldi	r21, 0x47	; 71
     dec:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
     df0:	18 16       	cp	r1, r24
     df2:	4c f5       	brge	.+82     	; 0xe46 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df4:	6b 85       	ldd	r22, Y+11	; 0x0b
     df6:	7c 85       	ldd	r23, Y+12	; 0x0c
     df8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e2       	ldi	r20, 0x20	; 32
     e02:	51 e4       	ldi	r21, 0x41	; 65
     e04:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	9e 83       	std	Y+6, r25	; 0x06
     e1a:	8d 83       	std	Y+5, r24	; 0x05
     e1c:	0f c0       	rjmp	.+30     	; 0xe3c <lcd_set_4bit+0x9a6>
     e1e:	84 e1       	ldi	r24, 0x14	; 20
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	9c 83       	std	Y+4, r25	; 0x04
     e24:	8b 83       	std	Y+3, r24	; 0x03
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <lcd_set_4bit+0x994>
     e2e:	9c 83       	std	Y+4, r25	; 0x04
     e30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3c:	8d 81       	ldd	r24, Y+5	; 0x05
     e3e:	9e 81       	ldd	r25, Y+6	; 0x06
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	69 f7       	brne	.-38     	; 0xe1e <lcd_set_4bit+0x988>
     e44:	14 c0       	rjmp	.+40     	; 0xe6e <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e46:	6f 81       	ldd	r22, Y+7	; 0x07
     e48:	78 85       	ldd	r23, Y+8	; 0x08
     e4a:	89 85       	ldd	r24, Y+9	; 0x09
     e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4e:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	8d 83       	std	Y+5, r24	; 0x05
     e5a:	8d 81       	ldd	r24, Y+5	; 0x05
     e5c:	9e 81       	ldd	r25, Y+6	; 0x06
     e5e:	9a 83       	std	Y+2, r25	; 0x02
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	9a 81       	ldd	r25, Y+2	; 0x02
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <lcd_set_4bit+0x9d0>
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     e6e:	a8 e2       	ldi	r26, 0x28	; 40
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e8 e2       	ldi	r30, 0x28	; 40
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8b 7f       	andi	r24, 0xFB	; 251
     e7a:	8c 93       	st	X, r24

	
}
     e7c:	c0 59       	subi	r28, 0x90	; 144
     e7e:	df 4f       	sbci	r29, 0xFF	; 255
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	08 95       	ret

00000e94 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	2e 97       	sbiw	r28, 0x0e	; 14
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a0 e8       	ldi	r26, 0x80	; 128
     eae:	bf e3       	ldi	r27, 0x3F	; 63
     eb0:	8b 87       	std	Y+11, r24	; 0x0b
     eb2:	9c 87       	std	Y+12, r25	; 0x0c
     eb4:	ad 87       	std	Y+13, r26	; 0x0d
     eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eba:	7c 85       	ldd	r23, Y+12	; 0x0c
     ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec0:	2d ec       	ldi	r18, 0xCD	; 205
     ec2:	3c ec       	ldi	r19, 0xCC	; 204
     ec4:	4c e2       	ldi	r20, 0x2C	; 44
     ec6:	55 e4       	ldi	r21, 0x45	; 69
     ec8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	8f 83       	std	Y+7, r24	; 0x07
     ed2:	98 87       	std	Y+8, r25	; 0x08
     ed4:	a9 87       	std	Y+9, r26	; 0x09
     ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed8:	6f 81       	ldd	r22, Y+7	; 0x07
     eda:	78 85       	ldd	r23, Y+8	; 0x08
     edc:	89 85       	ldd	r24, Y+9	; 0x09
     ede:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	5f e3       	ldi	r21, 0x3F	; 63
     ee8:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
     eec:	88 23       	and	r24, r24
     eee:	2c f4       	brge	.+10     	; 0xefa <lcd_init+0x66>
		__ticks = 1;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	8d 83       	std	Y+5, r24	; 0x05
     ef8:	3f c0       	rjmp	.+126    	; 0xf78 <lcd_init+0xe4>
	else if (__tmp > 65535)
     efa:	6f 81       	ldd	r22, Y+7	; 0x07
     efc:	78 85       	ldd	r23, Y+8	; 0x08
     efe:	89 85       	ldd	r24, Y+9	; 0x09
     f00:	9a 85       	ldd	r25, Y+10	; 0x0a
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	3f ef       	ldi	r19, 0xFF	; 255
     f06:	4f e7       	ldi	r20, 0x7F	; 127
     f08:	57 e4       	ldi	r21, 0x47	; 71
     f0a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
     f0e:	18 16       	cp	r1, r24
     f10:	4c f5       	brge	.+82     	; 0xf64 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f12:	6b 85       	ldd	r22, Y+11	; 0x0b
     f14:	7c 85       	ldd	r23, Y+12	; 0x0c
     f16:	8d 85       	ldd	r24, Y+13	; 0x0d
     f18:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	51 e4       	ldi	r21, 0x41	; 65
     f22:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <lcd_init+0xc6>
     f3c:	84 e1       	ldi	r24, 0x14	; 20
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	9c 83       	std	Y+4, r25	; 0x04
     f42:	8b 83       	std	Y+3, r24	; 0x03
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <lcd_init+0xb4>
     f4c:	9c 83       	std	Y+4, r25	; 0x04
     f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	69 f7       	brne	.-38     	; 0xf3c <lcd_init+0xa8>
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f64:	6f 81       	ldd	r22, Y+7	; 0x07
     f66:	78 85       	ldd	r23, Y+8	; 0x08
     f68:	89 85       	ldd	r24, Y+9	; 0x09
     f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	9e 83       	std	Y+6, r25	; 0x06
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <lcd_init+0xf0>
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     f8c:	88 e2       	ldi	r24, 0x28	; 40
     f8e:	0e 94 de 07 	call	0xfbc	; 0xfbc <lcd_wr_command>
	lcd_wr_command(0x01);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	0e 94 de 07 	call	0xfbc	; 0xfbc <lcd_wr_command>
	lcd_wr_command(0x06);
     f98:	86 e0       	ldi	r24, 0x06	; 6
     f9a:	0e 94 de 07 	call	0xfbc	; 0xfbc <lcd_wr_command>
	lcd_wr_command(0x0E);
     f9e:	8e e0       	ldi	r24, 0x0E	; 14
     fa0:	0e 94 de 07 	call	0xfbc	; 0xfbc <lcd_wr_command>
	lcd_wr_command(0x80);
     fa4:	80 e8       	ldi	r24, 0x80	; 128
     fa6:	0e 94 de 07 	call	0xfbc	; 0xfbc <lcd_wr_command>
		
}
     faa:	2e 96       	adiw	r28, 0x0e	; 14
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	6e 97       	sbiw	r28, 0x1e	; 30
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp1;
	temp1 = cmd;
     fd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd4:	8d 8f       	std	Y+29, r24	; 0x1d
	temp1 = temp1 & 0xF0;
     fd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd8:	80 7f       	andi	r24, 0xF0	; 240
     fda:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     fdc:	a8 e2       	ldi	r26, 0x28	; 40
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e8 e2       	ldi	r30, 0x28	; 40
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 70       	andi	r24, 0x0F	; 15
     fe8:	8c 93       	st	X, r24
	lcd_port |= temp1;
     fea:	a8 e2       	ldi	r26, 0x28	; 40
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e8 e2       	ldi	r30, 0x28	; 40
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	90 81       	ld	r25, Z
     ff4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ff6:	89 2b       	or	r24, r25
     ff8:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     ffa:	a8 e2       	ldi	r26, 0x28	; 40
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e8 e2       	ldi	r30, 0x28	; 40
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8e 7f       	andi	r24, 0xFE	; 254
    1006:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1008:	a8 e2       	ldi	r26, 0x28	; 40
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e8 e2       	ldi	r30, 0x28	; 40
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8d 7f       	andi	r24, 0xFD	; 253
    1014:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1016:	a8 e2       	ldi	r26, 0x28	; 40
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e8 e2       	ldi	r30, 0x28	; 40
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	84 60       	ori	r24, 0x04	; 4
    1022:	8c 93       	st	X, r24
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a0 ea       	ldi	r26, 0xA0	; 160
    102a:	b0 e4       	ldi	r27, 0x40	; 64
    102c:	89 8f       	std	Y+25, r24	; 0x19
    102e:	9a 8f       	std	Y+26, r25	; 0x1a
    1030:	ab 8f       	std	Y+27, r26	; 0x1b
    1032:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1034:	69 8d       	ldd	r22, Y+25	; 0x19
    1036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    103a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    103c:	2d ec       	ldi	r18, 0xCD	; 205
    103e:	3c ec       	ldi	r19, 0xCC	; 204
    1040:	4c e2       	ldi	r20, 0x2C	; 44
    1042:	55 e4       	ldi	r21, 0x45	; 69
    1044:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	8d 8b       	std	Y+21, r24	; 0x15
    104e:	9e 8b       	std	Y+22, r25	; 0x16
    1050:	af 8b       	std	Y+23, r26	; 0x17
    1052:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1054:	6d 89       	ldd	r22, Y+21	; 0x15
    1056:	7e 89       	ldd	r23, Y+22	; 0x16
    1058:	8f 89       	ldd	r24, Y+23	; 0x17
    105a:	98 8d       	ldd	r25, Y+24	; 0x18
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e8       	ldi	r20, 0x80	; 128
    1062:	5f e3       	ldi	r21, 0x3F	; 63
    1064:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    1068:	88 23       	and	r24, r24
    106a:	2c f4       	brge	.+10     	; 0x1076 <lcd_wr_command+0xba>
		__ticks = 1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	9c 8b       	std	Y+20, r25	; 0x14
    1072:	8b 8b       	std	Y+19, r24	; 0x13
    1074:	3f c0       	rjmp	.+126    	; 0x10f4 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    1076:	6d 89       	ldd	r22, Y+21	; 0x15
    1078:	7e 89       	ldd	r23, Y+22	; 0x16
    107a:	8f 89       	ldd	r24, Y+23	; 0x17
    107c:	98 8d       	ldd	r25, Y+24	; 0x18
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	3f ef       	ldi	r19, 0xFF	; 255
    1082:	4f e7       	ldi	r20, 0x7F	; 127
    1084:	57 e4       	ldi	r21, 0x47	; 71
    1086:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    108a:	18 16       	cp	r1, r24
    108c:	4c f5       	brge	.+82     	; 0x10e0 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108e:	69 8d       	ldd	r22, Y+25	; 0x19
    1090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e2       	ldi	r20, 0x20	; 32
    109c:	51 e4       	ldi	r21, 0x41	; 65
    109e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	bc 01       	movw	r22, r24
    10a8:	cd 01       	movw	r24, r26
    10aa:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	9c 8b       	std	Y+20, r25	; 0x14
    10b4:	8b 8b       	std	Y+19, r24	; 0x13
    10b6:	0f c0       	rjmp	.+30     	; 0x10d6 <lcd_wr_command+0x11a>
    10b8:	84 e1       	ldi	r24, 0x14	; 20
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	9a 8b       	std	Y+18, r25	; 0x12
    10be:	89 8b       	std	Y+17, r24	; 0x11
    10c0:	89 89       	ldd	r24, Y+17	; 0x11
    10c2:	9a 89       	ldd	r25, Y+18	; 0x12
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <lcd_wr_command+0x108>
    10c8:	9a 8b       	std	Y+18, r25	; 0x12
    10ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10cc:	8b 89       	ldd	r24, Y+19	; 0x13
    10ce:	9c 89       	ldd	r25, Y+20	; 0x14
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	9c 8b       	std	Y+20, r25	; 0x14
    10d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d6:	8b 89       	ldd	r24, Y+19	; 0x13
    10d8:	9c 89       	ldd	r25, Y+20	; 0x14
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	69 f7       	brne	.-38     	; 0x10b8 <lcd_wr_command+0xfc>
    10de:	14 c0       	rjmp	.+40     	; 0x1108 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e0:	6d 89       	ldd	r22, Y+21	; 0x15
    10e2:	7e 89       	ldd	r23, Y+22	; 0x16
    10e4:	8f 89       	ldd	r24, Y+23	; 0x17
    10e6:	98 8d       	ldd	r25, Y+24	; 0x18
    10e8:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	9c 8b       	std	Y+20, r25	; 0x14
    10f2:	8b 8b       	std	Y+19, r24	; 0x13
    10f4:	8b 89       	ldd	r24, Y+19	; 0x13
    10f6:	9c 89       	ldd	r25, Y+20	; 0x14
    10f8:	98 8b       	std	Y+16, r25	; 0x10
    10fa:	8f 87       	std	Y+15, r24	; 0x0f
    10fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10fe:	98 89       	ldd	r25, Y+16	; 0x10
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <lcd_wr_command+0x144>
    1104:	98 8b       	std	Y+16, r25	; 0x10
    1106:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1108:	a8 e2       	ldi	r26, 0x28	; 40
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e8 e2       	ldi	r30, 0x28	; 40
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8b 7f       	andi	r24, 0xFB	; 251
    1114:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    1116:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1118:	8f 70       	andi	r24, 0x0F	; 15
    111a:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    111c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    111e:	82 95       	swap	r24
    1120:	80 7f       	andi	r24, 0xF0	; 240
    1122:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1124:	a8 e2       	ldi	r26, 0x28	; 40
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e8 e2       	ldi	r30, 0x28	; 40
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 70       	andi	r24, 0x0F	; 15
    1130:	8c 93       	st	X, r24
	lcd_port |= cmd;
    1132:	a8 e2       	ldi	r26, 0x28	; 40
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e8 e2       	ldi	r30, 0x28	; 40
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	90 81       	ld	r25, Z
    113c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    113e:	89 2b       	or	r24, r25
    1140:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1142:	a8 e2       	ldi	r26, 0x28	; 40
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e8 e2       	ldi	r30, 0x28	; 40
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8e 7f       	andi	r24, 0xFE	; 254
    114e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1150:	a8 e2       	ldi	r26, 0x28	; 40
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e8 e2       	ldi	r30, 0x28	; 40
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8d 7f       	andi	r24, 0xFD	; 253
    115c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    115e:	a8 e2       	ldi	r26, 0x28	; 40
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e8 e2       	ldi	r30, 0x28	; 40
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	84 60       	ori	r24, 0x04	; 4
    116a:	8c 93       	st	X, r24
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a0 ea       	ldi	r26, 0xA0	; 160
    1172:	b0 e4       	ldi	r27, 0x40	; 64
    1174:	8b 87       	std	Y+11, r24	; 0x0b
    1176:	9c 87       	std	Y+12, r25	; 0x0c
    1178:	ad 87       	std	Y+13, r26	; 0x0d
    117a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117c:	6b 85       	ldd	r22, Y+11	; 0x0b
    117e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1180:	8d 85       	ldd	r24, Y+13	; 0x0d
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	2d ec       	ldi	r18, 0xCD	; 205
    1186:	3c ec       	ldi	r19, 0xCC	; 204
    1188:	4c e2       	ldi	r20, 0x2C	; 44
    118a:	55 e4       	ldi	r21, 0x45	; 69
    118c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	8f 83       	std	Y+7, r24	; 0x07
    1196:	98 87       	std	Y+8, r25	; 0x08
    1198:	a9 87       	std	Y+9, r26	; 0x09
    119a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    119c:	6f 81       	ldd	r22, Y+7	; 0x07
    119e:	78 85       	ldd	r23, Y+8	; 0x08
    11a0:	89 85       	ldd	r24, Y+9	; 0x09
    11a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e8       	ldi	r20, 0x80	; 128
    11aa:	5f e3       	ldi	r21, 0x3F	; 63
    11ac:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    11b0:	88 23       	and	r24, r24
    11b2:	2c f4       	brge	.+10     	; 0x11be <lcd_wr_command+0x202>
		__ticks = 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	9e 83       	std	Y+6, r25	; 0x06
    11ba:	8d 83       	std	Y+5, r24	; 0x05
    11bc:	3f c0       	rjmp	.+126    	; 0x123c <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    11be:	6f 81       	ldd	r22, Y+7	; 0x07
    11c0:	78 85       	ldd	r23, Y+8	; 0x08
    11c2:	89 85       	ldd	r24, Y+9	; 0x09
    11c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	3f ef       	ldi	r19, 0xFF	; 255
    11ca:	4f e7       	ldi	r20, 0x7F	; 127
    11cc:	57 e4       	ldi	r21, 0x47	; 71
    11ce:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    11d2:	18 16       	cp	r1, r24
    11d4:	4c f5       	brge	.+82     	; 0x1228 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11da:	8d 85       	ldd	r24, Y+13	; 0x0d
    11dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e2       	ldi	r20, 0x20	; 32
    11e4:	51 e4       	ldi	r21, 0x41	; 65
    11e6:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	0f c0       	rjmp	.+30     	; 0x121e <lcd_wr_command+0x262>
    1200:	84 e1       	ldi	r24, 0x14	; 20
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	9c 83       	std	Y+4, r25	; 0x04
    1206:	8b 83       	std	Y+3, r24	; 0x03
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <lcd_wr_command+0x250>
    1210:	9c 83       	std	Y+4, r25	; 0x04
    1212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	9e 83       	std	Y+6, r25	; 0x06
    121c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	69 f7       	brne	.-38     	; 0x1200 <lcd_wr_command+0x244>
    1226:	14 c0       	rjmp	.+40     	; 0x1250 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1228:	6f 81       	ldd	r22, Y+7	; 0x07
    122a:	78 85       	ldd	r23, Y+8	; 0x08
    122c:	89 85       	ldd	r24, Y+9	; 0x09
    122e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1230:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	9e 83       	std	Y+6, r25	; 0x06
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	9e 81       	ldd	r25, Y+6	; 0x06
    1240:	9a 83       	std	Y+2, r25	; 0x02
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <lcd_wr_command+0x28c>
    124c:	9a 83       	std	Y+2, r25	; 0x02
    124e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1250:	a8 e2       	ldi	r26, 0x28	; 40
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e8 e2       	ldi	r30, 0x28	; 40
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8b 7f       	andi	r24, 0xFB	; 251
    125c:	8c 93       	st	X, r24
}
    125e:	6e 96       	adiw	r28, 0x1e	; 30
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	6e 97       	sbiw	r28, 0x1e	; 30
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp1;
	temp1 = letter;
    1286:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1288:	8d 8f       	std	Y+29, r24	; 0x1d
	temp1 = (temp1 & 0xF0);
    128a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    128c:	80 7f       	andi	r24, 0xF0	; 240
    128e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1290:	a8 e2       	ldi	r26, 0x28	; 40
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e2       	ldi	r30, 0x28	; 40
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	8f 70       	andi	r24, 0x0F	; 15
    129c:	8c 93       	st	X, r24
	lcd_port |= temp1;
    129e:	a8 e2       	ldi	r26, 0x28	; 40
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e8 e2       	ldi	r30, 0x28	; 40
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	90 81       	ld	r25, Z
    12a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12aa:	89 2b       	or	r24, r25
    12ac:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    12ae:	a8 e2       	ldi	r26, 0x28	; 40
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e8 e2       	ldi	r30, 0x28	; 40
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	81 60       	ori	r24, 0x01	; 1
    12ba:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    12bc:	a8 e2       	ldi	r26, 0x28	; 40
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e8 e2       	ldi	r30, 0x28	; 40
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8d 7f       	andi	r24, 0xFD	; 253
    12c8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    12ca:	a8 e2       	ldi	r26, 0x28	; 40
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e8 e2       	ldi	r30, 0x28	; 40
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	84 60       	ori	r24, 0x04	; 4
    12d6:	8c 93       	st	X, r24
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a0 ea       	ldi	r26, 0xA0	; 160
    12de:	b0 e4       	ldi	r27, 0x40	; 64
    12e0:	89 8f       	std	Y+25, r24	; 0x19
    12e2:	9a 8f       	std	Y+26, r25	; 0x1a
    12e4:	ab 8f       	std	Y+27, r26	; 0x1b
    12e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e8:	69 8d       	ldd	r22, Y+25	; 0x19
    12ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f0:	2d ec       	ldi	r18, 0xCD	; 205
    12f2:	3c ec       	ldi	r19, 0xCC	; 204
    12f4:	4c e2       	ldi	r20, 0x2C	; 44
    12f6:	55 e4       	ldi	r21, 0x45	; 69
    12f8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	8d 8b       	std	Y+21, r24	; 0x15
    1302:	9e 8b       	std	Y+22, r25	; 0x16
    1304:	af 8b       	std	Y+23, r26	; 0x17
    1306:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1308:	6d 89       	ldd	r22, Y+21	; 0x15
    130a:	7e 89       	ldd	r23, Y+22	; 0x16
    130c:	8f 89       	ldd	r24, Y+23	; 0x17
    130e:	98 8d       	ldd	r25, Y+24	; 0x18
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    131c:	88 23       	and	r24, r24
    131e:	2c f4       	brge	.+10     	; 0x132a <lcd_wr_char+0xba>
		__ticks = 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9c 8b       	std	Y+20, r25	; 0x14
    1326:	8b 8b       	std	Y+19, r24	; 0x13
    1328:	3f c0       	rjmp	.+126    	; 0x13a8 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    132a:	6d 89       	ldd	r22, Y+21	; 0x15
    132c:	7e 89       	ldd	r23, Y+22	; 0x16
    132e:	8f 89       	ldd	r24, Y+23	; 0x17
    1330:	98 8d       	ldd	r25, Y+24	; 0x18
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	3f ef       	ldi	r19, 0xFF	; 255
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	57 e4       	ldi	r21, 0x47	; 71
    133a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    133e:	18 16       	cp	r1, r24
    1340:	4c f5       	brge	.+82     	; 0x1394 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1342:	69 8d       	ldd	r22, Y+25	; 0x19
    1344:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1346:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1348:	9c 8d       	ldd	r25, Y+28	; 0x1c
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9c 8b       	std	Y+20, r25	; 0x14
    1368:	8b 8b       	std	Y+19, r24	; 0x13
    136a:	0f c0       	rjmp	.+30     	; 0x138a <lcd_wr_char+0x11a>
    136c:	84 e1       	ldi	r24, 0x14	; 20
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	9a 8b       	std	Y+18, r25	; 0x12
    1372:	89 8b       	std	Y+17, r24	; 0x11
    1374:	89 89       	ldd	r24, Y+17	; 0x11
    1376:	9a 89       	ldd	r25, Y+18	; 0x12
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <lcd_wr_char+0x108>
    137c:	9a 8b       	std	Y+18, r25	; 0x12
    137e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1380:	8b 89       	ldd	r24, Y+19	; 0x13
    1382:	9c 89       	ldd	r25, Y+20	; 0x14
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	9c 8b       	std	Y+20, r25	; 0x14
    1388:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138a:	8b 89       	ldd	r24, Y+19	; 0x13
    138c:	9c 89       	ldd	r25, Y+20	; 0x14
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	69 f7       	brne	.-38     	; 0x136c <lcd_wr_char+0xfc>
    1392:	14 c0       	rjmp	.+40     	; 0x13bc <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1394:	6d 89       	ldd	r22, Y+21	; 0x15
    1396:	7e 89       	ldd	r23, Y+22	; 0x16
    1398:	8f 89       	ldd	r24, Y+23	; 0x17
    139a:	98 8d       	ldd	r25, Y+24	; 0x18
    139c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9c 8b       	std	Y+20, r25	; 0x14
    13a6:	8b 8b       	std	Y+19, r24	; 0x13
    13a8:	8b 89       	ldd	r24, Y+19	; 0x13
    13aa:	9c 89       	ldd	r25, Y+20	; 0x14
    13ac:	98 8b       	std	Y+16, r25	; 0x10
    13ae:	8f 87       	std	Y+15, r24	; 0x0f
    13b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b2:	98 89       	ldd	r25, Y+16	; 0x10
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <lcd_wr_char+0x144>
    13b8:	98 8b       	std	Y+16, r25	; 0x10
    13ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    13bc:	a8 e2       	ldi	r26, 0x28	; 40
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e8 e2       	ldi	r30, 0x28	; 40
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8b 7f       	andi	r24, 0xFB	; 251
    13c8:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    13ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13cc:	8f 70       	andi	r24, 0x0F	; 15
    13ce:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    13d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13d2:	82 95       	swap	r24
    13d4:	80 7f       	andi	r24, 0xF0	; 240
    13d6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    13d8:	a8 e2       	ldi	r26, 0x28	; 40
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e8 e2       	ldi	r30, 0x28	; 40
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8f 70       	andi	r24, 0x0F	; 15
    13e4:	8c 93       	st	X, r24
	lcd_port |= letter;
    13e6:	a8 e2       	ldi	r26, 0x28	; 40
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e8 e2       	ldi	r30, 0x28	; 40
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	90 81       	ld	r25, Z
    13f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13f2:	89 2b       	or	r24, r25
    13f4:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    13f6:	a8 e2       	ldi	r26, 0x28	; 40
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e8 e2       	ldi	r30, 0x28	; 40
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	81 60       	ori	r24, 0x01	; 1
    1402:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1404:	a8 e2       	ldi	r26, 0x28	; 40
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e8 e2       	ldi	r30, 0x28	; 40
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8d 7f       	andi	r24, 0xFD	; 253
    1410:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1412:	a8 e2       	ldi	r26, 0x28	; 40
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e8 e2       	ldi	r30, 0x28	; 40
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	84 60       	ori	r24, 0x04	; 4
    141e:	8c 93       	st	X, r24
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a0 ea       	ldi	r26, 0xA0	; 160
    1426:	b0 e4       	ldi	r27, 0x40	; 64
    1428:	8b 87       	std	Y+11, r24	; 0x0b
    142a:	9c 87       	std	Y+12, r25	; 0x0c
    142c:	ad 87       	std	Y+13, r26	; 0x0d
    142e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1430:	6b 85       	ldd	r22, Y+11	; 0x0b
    1432:	7c 85       	ldd	r23, Y+12	; 0x0c
    1434:	8d 85       	ldd	r24, Y+13	; 0x0d
    1436:	9e 85       	ldd	r25, Y+14	; 0x0e
    1438:	2d ec       	ldi	r18, 0xCD	; 205
    143a:	3c ec       	ldi	r19, 0xCC	; 204
    143c:	4c e2       	ldi	r20, 0x2C	; 44
    143e:	55 e4       	ldi	r21, 0x45	; 69
    1440:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	8f 83       	std	Y+7, r24	; 0x07
    144a:	98 87       	std	Y+8, r25	; 0x08
    144c:	a9 87       	std	Y+9, r26	; 0x09
    144e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1450:	6f 81       	ldd	r22, Y+7	; 0x07
    1452:	78 85       	ldd	r23, Y+8	; 0x08
    1454:	89 85       	ldd	r24, Y+9	; 0x09
    1456:	9a 85       	ldd	r25, Y+10	; 0x0a
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e8       	ldi	r20, 0x80	; 128
    145e:	5f e3       	ldi	r21, 0x3F	; 63
    1460:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    1464:	88 23       	and	r24, r24
    1466:	2c f4       	brge	.+10     	; 0x1472 <lcd_wr_char+0x202>
		__ticks = 1;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	3f c0       	rjmp	.+126    	; 0x14f0 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1472:	6f 81       	ldd	r22, Y+7	; 0x07
    1474:	78 85       	ldd	r23, Y+8	; 0x08
    1476:	89 85       	ldd	r24, Y+9	; 0x09
    1478:	9a 85       	ldd	r25, Y+10	; 0x0a
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	3f ef       	ldi	r19, 0xFF	; 255
    147e:	4f e7       	ldi	r20, 0x7F	; 127
    1480:	57 e4       	ldi	r21, 0x47	; 71
    1482:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    1486:	18 16       	cp	r1, r24
    1488:	4c f5       	brge	.+82     	; 0x14dc <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148a:	6b 85       	ldd	r22, Y+11	; 0x0b
    148c:	7c 85       	ldd	r23, Y+12	; 0x0c
    148e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1490:	9e 85       	ldd	r25, Y+14	; 0x0e
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e2       	ldi	r20, 0x20	; 32
    1498:	51 e4       	ldi	r21, 0x41	; 65
    149a:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	bc 01       	movw	r22, r24
    14a4:	cd 01       	movw	r24, r26
    14a6:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	9e 83       	std	Y+6, r25	; 0x06
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	0f c0       	rjmp	.+30     	; 0x14d2 <lcd_wr_char+0x262>
    14b4:	84 e1       	ldi	r24, 0x14	; 20
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	9c 83       	std	Y+4, r25	; 0x04
    14ba:	8b 83       	std	Y+3, r24	; 0x03
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <lcd_wr_char+0x250>
    14c4:	9c 83       	std	Y+4, r25	; 0x04
    14c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	9e 83       	std	Y+6, r25	; 0x06
    14d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	69 f7       	brne	.-38     	; 0x14b4 <lcd_wr_char+0x244>
    14da:	14 c0       	rjmp	.+40     	; 0x1504 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14dc:	6f 81       	ldd	r22, Y+7	; 0x07
    14de:	78 85       	ldd	r23, Y+8	; 0x08
    14e0:	89 85       	ldd	r24, Y+9	; 0x09
    14e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e4:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	8d 83       	std	Y+5, r24	; 0x05
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <lcd_wr_char+0x28c>
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1504:	a8 e2       	ldi	r26, 0x28	; 40
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e2       	ldi	r30, 0x28	; 40
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8b 7f       	andi	r24, 0xFB	; 251
    1510:	8c 93       	st	X, r24
}
    1512:	6e 96       	adiw	r28, 0x1e	; 30
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <lcd_home>:


void lcd_home()
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    152c:	80 e8       	ldi	r24, 0x80	; 128
    152e:	0e 94 de 07 	call	0xfbc	; 0xfbc <lcd_wr_command>
}
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <lcd_string+0x6>
    153e:	0f 92       	push	r0
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	9c 83       	std	Y+4, r25	; 0x04
    1546:	8b 83       	std	Y+3, r24	; 0x03
    1548:	0a c0       	rjmp	.+20     	; 0x155e <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    154a:	eb 81       	ldd	r30, Y+3	; 0x03
    154c:	fc 81       	ldd	r31, Y+4	; 0x04
    154e:	80 81       	ld	r24, Z
    1550:	0e 94 38 09 	call	0x1270	; 0x1270 <lcd_wr_char>
		str++;
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    155e:	eb 81       	ldd	r30, Y+3	; 0x03
    1560:	fc 81       	ldd	r31, Y+4	; 0x04
    1562:	80 81       	ld	r24, Z
    1564:	88 23       	and	r24, r24
    1566:	89 f7       	brne	.-30     	; 0x154a <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
	int i=0;
    1568:	1a 82       	std	Y+2, r1	; 0x02
    156a:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<12;i++) lcd_wr_char(' ');
    156c:	1a 82       	std	Y+2, r1	; 0x02
    156e:	19 82       	std	Y+1, r1	; 0x01
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <lcd_string+0x4a>
    1572:	80 e2       	ldi	r24, 0x20	; 32
    1574:	0e 94 38 09 	call	0x1270	; 0x1270 <lcd_wr_char>
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	8c 30       	cpi	r24, 0x0C	; 12
    1588:	91 05       	cpc	r25, r1
    158a:	9c f3       	brlt	.-26     	; 0x1572 <lcd_string+0x3a>
}
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <lcd_cursor+0x6>
    15a0:	0f 92       	push	r0
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	3c 83       	std	Y+4, r19	; 0x04
    15b2:	2b 83       	std	Y+3, r18	; 0x03
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	82 30       	cpi	r24, 0x02	; 2
    15ba:	91 05       	cpc	r25, r1
    15bc:	d9 f0       	breq	.+54     	; 0x15f4 <lcd_cursor+0x5a>
    15be:	2b 81       	ldd	r18, Y+3	; 0x03
    15c0:	3c 81       	ldd	r19, Y+4	; 0x04
    15c2:	23 30       	cpi	r18, 0x03	; 3
    15c4:	31 05       	cpc	r19, r1
    15c6:	34 f4       	brge	.+12     	; 0x15d4 <lcd_cursor+0x3a>
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 05       	cpc	r25, r1
    15d0:	61 f0       	breq	.+24     	; 0x15ea <lcd_cursor+0x50>
    15d2:	1e c0       	rjmp	.+60     	; 0x1610 <lcd_cursor+0x76>
    15d4:	2b 81       	ldd	r18, Y+3	; 0x03
    15d6:	3c 81       	ldd	r19, Y+4	; 0x04
    15d8:	23 30       	cpi	r18, 0x03	; 3
    15da:	31 05       	cpc	r19, r1
    15dc:	81 f0       	breq	.+32     	; 0x15fe <lcd_cursor+0x64>
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	84 30       	cpi	r24, 0x04	; 4
    15e4:	91 05       	cpc	r25, r1
    15e6:	81 f0       	breq	.+32     	; 0x1608 <lcd_cursor+0x6e>
    15e8:	13 c0       	rjmp	.+38     	; 0x1610 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	81 58       	subi	r24, 0x81	; 129
    15ee:	0e 94 de 07 	call	0xfbc	; 0xfbc <lcd_wr_command>
    15f2:	0e c0       	rjmp	.+28     	; 0x1610 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	81 54       	subi	r24, 0x41	; 65
    15f8:	0e 94 de 07 	call	0xfbc	; 0xfbc <lcd_wr_command>
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	8d 56       	subi	r24, 0x6D	; 109
    1602:	0e 94 de 07 	call	0xfbc	; 0xfbc <lcd_wr_command>
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	8d 52       	subi	r24, 0x2D	; 45
    160c:	0e 94 de 07 	call	0xfbc	; 0xfbc <lcd_wr_command>
		default: break;
	}
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	27 97       	sbiw	r28, 0x07	; 7
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	8a 83       	std	Y+2, r24	; 0x02
    1634:	6b 83       	std	Y+3, r22	; 0x03
    1636:	5d 83       	std	Y+5, r21	; 0x05
    1638:	4c 83       	std	Y+4, r20	; 0x04
    163a:	3f 83       	std	Y+7, r19	; 0x07
    163c:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    163e:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	88 23       	and	r24, r24
    1644:	19 f0       	breq	.+6      	; 0x164c <lcd_print+0x2e>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	88 23       	and	r24, r24
    164a:	19 f4       	brne	.+6      	; 0x1652 <lcd_print+0x34>
	{
		lcd_home();
    164c:	0e 94 92 0a 	call	0x1524	; 0x1524 <lcd_home>
    1650:	04 c0       	rjmp	.+8      	; 0x165a <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	6b 81       	ldd	r22, Y+3	; 0x03
    1656:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
	}
	if(digits==5 || flag==1)
    165a:	8e 81       	ldd	r24, Y+6	; 0x06
    165c:	9f 81       	ldd	r25, Y+7	; 0x07
    165e:	85 30       	cpi	r24, 0x05	; 5
    1660:	91 05       	cpc	r25, r1
    1662:	19 f0       	breq	.+6      	; 0x166a <lcd_print+0x4c>
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	a9 f4       	brne	.+42     	; 0x1694 <lcd_print+0x76>
	{
		million=value/10000+48;
    166a:	8c 81       	ldd	r24, Y+4	; 0x04
    166c:	9d 81       	ldd	r25, Y+5	; 0x05
    166e:	20 e1       	ldi	r18, 0x10	; 16
    1670:	37 e2       	ldi	r19, 0x27	; 39
    1672:	b9 01       	movw	r22, r18
    1674:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodhi4>
    1678:	cb 01       	movw	r24, r22
    167a:	c0 96       	adiw	r24, 0x30	; 48
    167c:	90 93 9f 03 	sts	0x039F, r25
    1680:	80 93 9e 03 	sts	0x039E, r24
		lcd_wr_char(million);
    1684:	80 91 9e 03 	lds	r24, 0x039E
    1688:	90 91 9f 03 	lds	r25, 0x039F
    168c:	0e 94 38 09 	call	0x1270	; 0x1270 <lcd_wr_char>
		flag=1;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1694:	8e 81       	ldd	r24, Y+6	; 0x06
    1696:	9f 81       	ldd	r25, Y+7	; 0x07
    1698:	84 30       	cpi	r24, 0x04	; 4
    169a:	91 05       	cpc	r25, r1
    169c:	19 f0       	breq	.+6      	; 0x16a4 <lcd_print+0x86>
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	11 f5       	brne	.+68     	; 0x16e8 <lcd_print+0xca>
	{
		temp1 = value/1000;
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	28 ee       	ldi	r18, 0xE8	; 232
    16aa:	33 e0       	ldi	r19, 0x03	; 3
    16ac:	b9 01       	movw	r22, r18
    16ae:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodhi4>
    16b2:	cb 01       	movw	r24, r22
    16b4:	90 93 a2 03 	sts	0x03A2, r25
    16b8:	80 93 a1 03 	sts	0x03A1, r24
		thousand = temp1%10 + 48;
    16bc:	80 91 a1 03 	lds	r24, 0x03A1
    16c0:	90 91 a2 03 	lds	r25, 0x03A2
    16c4:	2a e0       	ldi	r18, 0x0A	; 10
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	b9 01       	movw	r22, r18
    16ca:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodhi4>
    16ce:	c0 96       	adiw	r24, 0x30	; 48
    16d0:	90 93 ad 03 	sts	0x03AD, r25
    16d4:	80 93 ac 03 	sts	0x03AC, r24
		lcd_wr_char(thousand);
    16d8:	80 91 ac 03 	lds	r24, 0x03AC
    16dc:	90 91 ad 03 	lds	r25, 0x03AD
    16e0:	0e 94 38 09 	call	0x1270	; 0x1270 <lcd_wr_char>
		flag=1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    16e8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ea:	9f 81       	ldd	r25, Y+7	; 0x07
    16ec:	83 30       	cpi	r24, 0x03	; 3
    16ee:	91 05       	cpc	r25, r1
    16f0:	19 f0       	breq	.+6      	; 0x16f8 <lcd_print+0xda>
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	11 f5       	brne	.+68     	; 0x173c <lcd_print+0x11e>
	{
		temp1 = value/100;
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	24 e6       	ldi	r18, 0x64	; 100
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	b9 01       	movw	r22, r18
    1702:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodhi4>
    1706:	cb 01       	movw	r24, r22
    1708:	90 93 a2 03 	sts	0x03A2, r25
    170c:	80 93 a1 03 	sts	0x03A1, r24
		hundred = temp1%10 + 48;
    1710:	80 91 a1 03 	lds	r24, 0x03A1
    1714:	90 91 a2 03 	lds	r25, 0x03A2
    1718:	2a e0       	ldi	r18, 0x0A	; 10
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	b9 01       	movw	r22, r18
    171e:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodhi4>
    1722:	c0 96       	adiw	r24, 0x30	; 48
    1724:	90 93 a9 03 	sts	0x03A9, r25
    1728:	80 93 a8 03 	sts	0x03A8, r24
		lcd_wr_char(hundred);
    172c:	80 91 a8 03 	lds	r24, 0x03A8
    1730:	90 91 a9 03 	lds	r25, 0x03A9
    1734:	0e 94 38 09 	call	0x1270	; 0x1270 <lcd_wr_char>
		flag=1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    173c:	8e 81       	ldd	r24, Y+6	; 0x06
    173e:	9f 81       	ldd	r25, Y+7	; 0x07
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	91 05       	cpc	r25, r1
    1744:	19 f0       	breq	.+6      	; 0x174c <lcd_print+0x12e>
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	11 f5       	brne	.+68     	; 0x1790 <lcd_print+0x172>
	{
		temp1 = value/10;
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	2a e0       	ldi	r18, 0x0A	; 10
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	b9 01       	movw	r22, r18
    1756:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodhi4>
    175a:	cb 01       	movw	r24, r22
    175c:	90 93 a2 03 	sts	0x03A2, r25
    1760:	80 93 a1 03 	sts	0x03A1, r24
		tens = temp1%10 + 48;
    1764:	80 91 a1 03 	lds	r24, 0x03A1
    1768:	90 91 a2 03 	lds	r25, 0x03A2
    176c:	2a e0       	ldi	r18, 0x0A	; 10
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	b9 01       	movw	r22, r18
    1772:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodhi4>
    1776:	c0 96       	adiw	r24, 0x30	; 48
    1778:	90 93 a6 03 	sts	0x03A6, r25
    177c:	80 93 a5 03 	sts	0x03A5, r24
		lcd_wr_char(tens);
    1780:	80 91 a5 03 	lds	r24, 0x03A5
    1784:	90 91 a6 03 	lds	r25, 0x03A6
    1788:	0e 94 38 09 	call	0x1270	; 0x1270 <lcd_wr_char>
		flag=1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1790:	8e 81       	ldd	r24, Y+6	; 0x06
    1792:	9f 81       	ldd	r25, Y+7	; 0x07
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	19 f0       	breq	.+6      	; 0x17a0 <lcd_print+0x182>
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 f4       	brne	.+36     	; 0x17c4 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	9d 81       	ldd	r25, Y+5	; 0x05
    17a4:	2a e0       	ldi	r18, 0x0A	; 10
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	b9 01       	movw	r22, r18
    17aa:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodhi4>
    17ae:	c0 96       	adiw	r24, 0x30	; 48
    17b0:	90 93 ab 03 	sts	0x03AB, r25
    17b4:	80 93 aa 03 	sts	0x03AA, r24
		lcd_wr_char(unit);
    17b8:	80 91 aa 03 	lds	r24, 0x03AA
    17bc:	90 91 ab 03 	lds	r25, 0x03AB
    17c0:	0e 94 38 09 	call	0x1270	; 0x1270 <lcd_wr_char>
	}
	if(digits>5)
    17c4:	8e 81       	ldd	r24, Y+6	; 0x06
    17c6:	9f 81       	ldd	r25, Y+7	; 0x07
    17c8:	86 30       	cpi	r24, 0x06	; 6
    17ca:	91 05       	cpc	r25, r1
    17cc:	1c f0       	brlt	.+6      	; 0x17d4 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    17ce:	85 e4       	ldi	r24, 0x45	; 69
    17d0:	0e 94 38 09 	call	0x1270	; 0x1270 <lcd_wr_char>
	}
	
}
    17d4:	27 96       	adiw	r28, 0x07	; 7
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <ADC_Conversion>:



//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	0f 92       	push	r0
    17ec:	0f 92       	push	r0
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	88 30       	cpi	r24, 0x08	; 8
    17f8:	20 f0       	brcs	.+8      	; 0x1802 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    17fa:	eb e7       	ldi	r30, 0x7B	; 123
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	88 e0       	ldi	r24, 0x08	; 8
    1800:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	87 70       	andi	r24, 0x07	; 7
    1806:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    1808:	ec e7       	ldi	r30, 0x7C	; 124
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	80 62       	ori	r24, 0x20	; 32
    1810:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1812:	aa e7       	ldi	r26, 0x7A	; 122
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	ea e7       	ldi	r30, 0x7A	; 122
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	80 64       	ori	r24, 0x40	; 64
    181e:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1820:	ea e7       	ldi	r30, 0x7A	; 122
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	80 71       	andi	r24, 0x10	; 16
    182c:	90 70       	andi	r25, 0x00	; 0
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	b9 f3       	breq	.-18     	; 0x1820 <ADC_Conversion+0x3a>
	a=ADCH;
    1832:	e9 e7       	ldi	r30, 0x79	; 121
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    183a:	aa e7       	ldi	r26, 0x7A	; 122
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	ea e7       	ldi	r30, 0x7A	; 122
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 61       	ori	r24, 0x10	; 16
    1846:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1848:	eb e7       	ldi	r30, 0x7B	; 123
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	10 82       	st	Z, r1
	return a;
    184e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <print_sensor>:

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <print_sensor+0x6>
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	6a 83       	std	Y+2, r22	; 0x02
    1868:	4b 83       	std	Y+3, r20	; 0x03
 ADC_Value = ADC_Conversion(channel);
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <ADC_Conversion>
    1870:	80 93 a0 03 	sts	0x03A0, r24
 lcd_print(row, coloumn, ADC_Value, 3);
    1874:	80 91 a0 03 	lds	r24, 0x03A0
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	6a 81       	ldd	r22, Y+2	; 0x02
    1880:	a9 01       	movw	r20, r18
    1882:	23 e0       	ldi	r18, 0x03	; 3
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	0e 94 0f 0b 	call	0x161e	; 0x161e <lcd_print>
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <init_sensor_values>:


void init_sensor_values(void)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <init_sensor_values+0x6>
    189c:	0f 92       	push	r0
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	lline = ADC_Conversion(3);	//Getting data of Left WL Sensor
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <ADC_Conversion>
    18a8:	80 93 7a 03 	sts	0x037A, r24
	cline = ADC_Conversion(2);	//Getting data of Center WL Sensor
    18ac:	82 e0       	ldi	r24, 0x02	; 2
    18ae:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <ADC_Conversion>
    18b2:	80 93 7b 03 	sts	0x037B, r24
	rline = ADC_Conversion(1);	//Getting data of Right WL Sensor
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <ADC_Conversion>
    18bc:	80 93 7c 03 	sts	0x037C, r24
	char str[4];
	str[0] = lline;
    18c0:	80 91 7a 03 	lds	r24, 0x037A
    18c4:	89 83       	std	Y+1, r24	; 0x01
	str[1] = cline;
    18c6:	80 91 7b 03 	lds	r24, 0x037B
    18ca:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = rline;
    18cc:	80 91 7c 03 	lds	r24, 0x037C
    18d0:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = ',';
    18d2:	8c e2       	ldi	r24, 0x2C	; 44
    18d4:	8c 83       	std	Y+4, r24	; 0x04
	//xbee_sendString(str,4);
	print_sensor(2,1,3);		//Prints value of White Line Sensor Left
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	43 e0       	ldi	r20, 0x03	; 3
    18dc:	0e 94 2d 0c 	call	0x185a	; 0x185a <print_sensor>
	print_sensor(2,5,2);		//Prints value of White Line Sensor Center
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	65 e0       	ldi	r22, 0x05	; 5
    18e4:	42 e0       	ldi	r20, 0x02	; 2
    18e6:	0e 94 2d 0c 	call	0x185a	; 0x185a <print_sensor>
	print_sensor(2,9,1);		//Prints Value of White Line Sensor Right
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	69 e0       	ldi	r22, 0x09	; 9
    18ee:	41 e0       	ldi	r20, 0x01	; 1
    18f0:	0e 94 2d 0c 	call	0x185a	; 0x185a <print_sensor>
	last_prop = prop; 
	pow_diff = kp*prop + ki*integral + kd*der;
	if(pow_diff > max) pow_diff = max;
	if(pow_diff < -max) pow_diff = -max;
	*/
	fsharp = ADC_Conversion(11);
    18f4:	8b e0       	ldi	r24, 0x0B	; 11
    18f6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <ADC_Conversion>
    18fa:	80 93 7d 03 	sts	0x037D, r24
	fir = ADC_Conversion(6);
    18fe:	86 e0       	ldi	r24, 0x06	; 6
    1900:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <ADC_Conversion>
    1904:	80 93 7e 03 	sts	0x037E, r24
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <take_turn>:


void take_turn(int d)
{
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	a0 97       	sbiw	r28, 0x20	; 32
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	98 a3       	std	Y+32, r25	; 0x20
    1934:	8f 8f       	std	Y+31, r24	; 0x1f
	int flag=0;
    1936:	1e 8e       	std	Y+30, r1	; 0x1e
    1938:	1d 8e       	std	Y+29, r1	; 0x1d
	while(1)
	{
		if(d==1) left();
    193a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    193c:	98 a1       	ldd	r25, Y+32	; 0x20
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	91 05       	cpc	r25, r1
    1942:	19 f4       	brne	.+6      	; 0x194a <take_turn+0x34>
    1944:	0e 94 19 02 	call	0x432	; 0x432 <left>
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <take_turn+0x42>
		else if(d==2) right();
    194a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    194c:	98 a1       	ldd	r25, Y+32	; 0x20
    194e:	82 30       	cpi	r24, 0x02	; 2
    1950:	91 05       	cpc	r25, r1
    1952:	11 f4       	brne	.+4      	; 0x1958 <take_turn+0x42>
    1954:	0e 94 23 02 	call	0x446	; 0x446 <right>
		init_sensor_values();
    1958:	0e 94 4b 0c 	call	0x1896	; 0x1896 <init_sensor_values>
		//if(pow_diff < 0) velocity((max+pow_diff), max);
		//else velocity(max, (max-pow_diff));	
		if(d==1) velocity(leftspeed,(rightspeed-delta));
    195c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    195e:	98 a1       	ldd	r25, Y+32	; 0x20
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	91 05       	cpc	r25, r1
    1964:	a9 f4       	brne	.+42     	; 0x1990 <take_turn+0x7a>
    1966:	80 91 00 02 	lds	r24, 0x0200
    196a:	90 91 01 02 	lds	r25, 0x0201
    196e:	38 2f       	mov	r19, r24
    1970:	80 91 02 02 	lds	r24, 0x0202
    1974:	90 91 03 02 	lds	r25, 0x0203
    1978:	28 2f       	mov	r18, r24
    197a:	80 91 04 02 	lds	r24, 0x0204
    197e:	90 91 05 02 	lds	r25, 0x0205
    1982:	92 2f       	mov	r25, r18
    1984:	98 1b       	sub	r25, r24
    1986:	83 2f       	mov	r24, r19
    1988:	69 2f       	mov	r22, r25
    198a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <velocity>
    198e:	19 c0       	rjmp	.+50     	; 0x19c2 <take_turn+0xac>
		else if(d==2) velocity(leftspeed,(rightspeed-delta));
    1990:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1992:	98 a1       	ldd	r25, Y+32	; 0x20
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	91 05       	cpc	r25, r1
    1998:	a1 f4       	brne	.+40     	; 0x19c2 <take_turn+0xac>
    199a:	80 91 00 02 	lds	r24, 0x0200
    199e:	90 91 01 02 	lds	r25, 0x0201
    19a2:	38 2f       	mov	r19, r24
    19a4:	80 91 02 02 	lds	r24, 0x0202
    19a8:	90 91 03 02 	lds	r25, 0x0203
    19ac:	28 2f       	mov	r18, r24
    19ae:	80 91 04 02 	lds	r24, 0x0204
    19b2:	90 91 05 02 	lds	r25, 0x0205
    19b6:	92 2f       	mov	r25, r18
    19b8:	98 1b       	sub	r25, r24
    19ba:	83 2f       	mov	r24, r19
    19bc:	69 2f       	mov	r22, r25
    19be:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <velocity>

		if(cline<thresh && lline<thresh && rline<thresh)  //all on white
    19c2:	80 91 7b 03 	lds	r24, 0x037B
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	80 91 0c 02 	lds	r24, 0x020C
    19ce:	90 91 0d 02 	lds	r25, 0x020D
    19d2:	28 17       	cp	r18, r24
    19d4:	39 07       	cpc	r19, r25
    19d6:	0c f0       	brlt	.+2      	; 0x19da <take_turn+0xc4>
    19d8:	b0 cf       	rjmp	.-160    	; 0x193a <take_turn+0x24>
    19da:	80 91 7a 03 	lds	r24, 0x037A
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	80 91 0c 02 	lds	r24, 0x020C
    19e6:	90 91 0d 02 	lds	r25, 0x020D
    19ea:	28 17       	cp	r18, r24
    19ec:	39 07       	cpc	r19, r25
    19ee:	0c f0       	brlt	.+2      	; 0x19f2 <take_turn+0xdc>
    19f0:	a4 cf       	rjmp	.-184    	; 0x193a <take_turn+0x24>
    19f2:	80 91 7c 03 	lds	r24, 0x037C
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	80 91 0c 02 	lds	r24, 0x020C
    19fe:	90 91 0d 02 	lds	r25, 0x020D
    1a02:	28 17       	cp	r18, r24
    1a04:	39 07       	cpc	r19, r25
    1a06:	0c f0       	brlt	.+2      	; 0x1a0a <take_turn+0xf4>
    1a08:	98 cf       	rjmp	.-208    	; 0x193a <take_turn+0x24>
		{
			stop();
    1a0a:	0e 94 41 02 	call	0x482	; 0x482 <stop>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a8 e4       	ldi	r26, 0x48	; 72
    1a14:	b2 e4       	ldi	r27, 0x42	; 66
    1a16:	89 8f       	std	Y+25, r24	; 0x19
    1a18:	9a 8f       	std	Y+26, r25	; 0x1a
    1a1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a26:	2d ec       	ldi	r18, 0xCD	; 205
    1a28:	3c ec       	ldi	r19, 0xCC	; 204
    1a2a:	4c e2       	ldi	r20, 0x2C	; 44
    1a2c:	55 e4       	ldi	r21, 0x45	; 69
    1a2e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8d 8b       	std	Y+21, r24	; 0x15
    1a38:	9e 8b       	std	Y+22, r25	; 0x16
    1a3a:	af 8b       	std	Y+23, r26	; 0x17
    1a3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a40:	7e 89       	ldd	r23, Y+22	; 0x16
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <take_turn+0x14a>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9c 8b       	std	Y+20, r25	; 0x14
    1a5c:	8b 8b       	std	Y+19, r24	; 0x13
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <take_turn+0x1c8>
	else if (__tmp > 65535)
    1a60:	6d 89       	ldd	r22, Y+21	; 0x15
    1a62:	7e 89       	ldd	r23, Y+22	; 0x16
    1a64:	8f 89       	ldd	r24, Y+23	; 0x17
    1a66:	98 8d       	ldd	r25, Y+24	; 0x18
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <take_turn+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	69 8d       	ldd	r22, Y+25	; 0x19
    1a7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9c 8b       	std	Y+20, r25	; 0x14
    1a9e:	8b 8b       	std	Y+19, r24	; 0x13
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <take_turn+0x1aa>
    1aa2:	84 e1       	ldi	r24, 0x14	; 20
    1aa4:	91 e0       	ldi	r25, 0x01	; 1
    1aa6:	9a 8b       	std	Y+18, r25	; 0x12
    1aa8:	89 8b       	std	Y+17, r24	; 0x11
    1aaa:	89 89       	ldd	r24, Y+17	; 0x11
    1aac:	9a 89       	ldd	r25, Y+18	; 0x12
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <take_turn+0x198>
    1ab2:	9a 8b       	std	Y+18, r25	; 0x12
    1ab4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <take_turn+0x18c>
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <take_turn+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	6d 89       	ldd	r22, Y+21	; 0x15
    1acc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ace:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae2:	98 8b       	std	Y+16, r25	; 0x10
    1ae4:	8f 87       	std	Y+15, r24	; 0x0f
    1ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae8:	98 89       	ldd	r25, Y+16	; 0x10
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <take_turn+0x1d4>
    1aee:	98 8b       	std	Y+16, r25	; 0x10
    1af0:	8f 87       	std	Y+15, r24	; 0x0f
			break;
		}
	}
	while(1)
	{
		if(d==1) left();
    1af2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1af4:	98 a1       	ldd	r25, Y+32	; 0x20
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	91 05       	cpc	r25, r1
    1afa:	19 f4       	brne	.+6      	; 0x1b02 <take_turn+0x1ec>
    1afc:	0e 94 19 02 	call	0x432	; 0x432 <left>
    1b00:	07 c0       	rjmp	.+14     	; 0x1b10 <take_turn+0x1fa>
		else if(d==2) right();
    1b02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b04:	98 a1       	ldd	r25, Y+32	; 0x20
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	91 05       	cpc	r25, r1
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <take_turn+0x1fa>
    1b0c:	0e 94 23 02 	call	0x446	; 0x446 <right>
		init_sensor_values();
    1b10:	0e 94 4b 0c 	call	0x1896	; 0x1896 <init_sensor_values>
		//if(pow_diff < 0) velocity((max+pow_diff)/2, max/2);
		//else velocity(max/2, (max-pow_diff)/2);
		if(d==1) velocity(leftspeed*0.5,(rightspeed-delta));
    1b14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b16:	98 a1       	ldd	r25, Y+32	; 0x20
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	79 f5       	brne	.+94     	; 0x1b7c <take_turn+0x266>
    1b1e:	80 91 00 02 	lds	r24, 0x0200
    1b22:	90 91 01 02 	lds	r25, 0x0201
    1b26:	aa 27       	eor	r26, r26
    1b28:	97 fd       	sbrc	r25, 7
    1b2a:	a0 95       	com	r26
    1b2c:	ba 2f       	mov	r27, r26
    1b2e:	bc 01       	movw	r22, r24
    1b30:	cd 01       	movw	r24, r26
    1b32:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <__floatsisf>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	38 2f       	mov	r19, r24
    1b5c:	80 91 02 02 	lds	r24, 0x0202
    1b60:	90 91 03 02 	lds	r25, 0x0203
    1b64:	28 2f       	mov	r18, r24
    1b66:	80 91 04 02 	lds	r24, 0x0204
    1b6a:	90 91 05 02 	lds	r25, 0x0205
    1b6e:	92 2f       	mov	r25, r18
    1b70:	98 1b       	sub	r25, r24
    1b72:	83 2f       	mov	r24, r19
    1b74:	69 2f       	mov	r22, r25
    1b76:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <velocity>
    1b7a:	35 c0       	rjmp	.+106    	; 0x1be6 <take_turn+0x2d0>
		else if(d==2) velocity(leftspeed,(rightspeed-delta)*0.5);
    1b7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	91 05       	cpc	r25, r1
    1b84:	81 f5       	brne	.+96     	; 0x1be6 <take_turn+0x2d0>
    1b86:	80 91 00 02 	lds	r24, 0x0200
    1b8a:	90 91 01 02 	lds	r25, 0x0201
    1b8e:	18 2f       	mov	r17, r24
    1b90:	20 91 02 02 	lds	r18, 0x0202
    1b94:	30 91 03 02 	lds	r19, 0x0203
    1b98:	80 91 04 02 	lds	r24, 0x0204
    1b9c:	90 91 05 02 	lds	r25, 0x0205
    1ba0:	a9 01       	movw	r20, r18
    1ba2:	48 1b       	sub	r20, r24
    1ba4:	59 0b       	sbc	r21, r25
    1ba6:	ca 01       	movw	r24, r20
    1ba8:	aa 27       	eor	r26, r26
    1baa:	97 fd       	sbrc	r25, 7
    1bac:	a0 95       	com	r26
    1bae:	ba 2f       	mov	r27, r26
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <__floatsisf>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	5f e3       	ldi	r21, 0x3F	; 63
    1bc8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	98 2f       	mov	r25, r24
    1bde:	81 2f       	mov	r24, r17
    1be0:	69 2f       	mov	r22, r25
    1be2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <velocity>

		if(cline>thresh && lline>thresh*0.6 && d==1) flag=1;
    1be6:	80 91 7b 03 	lds	r24, 0x037B
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	80 91 0c 02 	lds	r24, 0x020C
    1bf2:	90 91 0d 02 	lds	r25, 0x020D
    1bf6:	82 17       	cp	r24, r18
    1bf8:	93 07       	cpc	r25, r19
    1bfa:	bc f5       	brge	.+110    	; 0x1c6a <take_turn+0x354>
    1bfc:	80 91 7a 03 	lds	r24, 0x037A
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	aa 27       	eor	r26, r26
    1c06:	97 fd       	sbrc	r25, 7
    1c08:	a0 95       	com	r26
    1c0a:	ba 2f       	mov	r27, r26
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <__floatsisf>
    1c14:	7b 01       	movw	r14, r22
    1c16:	8c 01       	movw	r16, r24
    1c18:	80 91 0c 02 	lds	r24, 0x020C
    1c1c:	90 91 0d 02 	lds	r25, 0x020D
    1c20:	aa 27       	eor	r26, r26
    1c22:	97 fd       	sbrc	r25, 7
    1c24:	a0 95       	com	r26
    1c26:	ba 2f       	mov	r27, r26
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <__floatsisf>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	2a e9       	ldi	r18, 0x9A	; 154
    1c3a:	39 e9       	ldi	r19, 0x99	; 153
    1c3c:	49 e1       	ldi	r20, 0x19	; 25
    1c3e:	5f e3       	ldi	r21, 0x3F	; 63
    1c40:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9c 01       	movw	r18, r24
    1c4a:	ad 01       	movw	r20, r26
    1c4c:	c8 01       	movw	r24, r16
    1c4e:	b7 01       	movw	r22, r14
    1c50:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f4       	brge	.+18     	; 0x1c6a <take_turn+0x354>
    1c58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c5a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	91 05       	cpc	r25, r1
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <take_turn+0x354>
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9e 8f       	std	Y+30, r25	; 0x1e
    1c68:	8d 8f       	std	Y+29, r24	; 0x1d
		if(cline>thresh && rline>thresh*0.6 && d==2) flag=1;
    1c6a:	80 91 7b 03 	lds	r24, 0x037B
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	80 91 0c 02 	lds	r24, 0x020C
    1c76:	90 91 0d 02 	lds	r25, 0x020D
    1c7a:	82 17       	cp	r24, r18
    1c7c:	93 07       	cpc	r25, r19
    1c7e:	bc f5       	brge	.+110    	; 0x1cee <take_turn+0x3d8>
    1c80:	80 91 7c 03 	lds	r24, 0x037C
    1c84:	88 2f       	mov	r24, r24
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	aa 27       	eor	r26, r26
    1c8a:	97 fd       	sbrc	r25, 7
    1c8c:	a0 95       	com	r26
    1c8e:	ba 2f       	mov	r27, r26
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <__floatsisf>
    1c98:	7b 01       	movw	r14, r22
    1c9a:	8c 01       	movw	r16, r24
    1c9c:	80 91 0c 02 	lds	r24, 0x020C
    1ca0:	90 91 0d 02 	lds	r25, 0x020D
    1ca4:	aa 27       	eor	r26, r26
    1ca6:	97 fd       	sbrc	r25, 7
    1ca8:	a0 95       	com	r26
    1caa:	ba 2f       	mov	r27, r26
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <__floatsisf>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	bc 01       	movw	r22, r24
    1cba:	cd 01       	movw	r24, r26
    1cbc:	2a e9       	ldi	r18, 0x9A	; 154
    1cbe:	39 e9       	ldi	r19, 0x99	; 153
    1cc0:	49 e1       	ldi	r20, 0x19	; 25
    1cc2:	5f e3       	ldi	r21, 0x3F	; 63
    1cc4:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9c 01       	movw	r18, r24
    1cce:	ad 01       	movw	r20, r26
    1cd0:	c8 01       	movw	r24, r16
    1cd2:	b7 01       	movw	r22, r14
    1cd4:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    1cd8:	18 16       	cp	r1, r24
    1cda:	4c f4       	brge	.+18     	; 0x1cee <take_turn+0x3d8>
    1cdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cde:	98 a1       	ldd	r25, Y+32	; 0x20
    1ce0:	82 30       	cpi	r24, 0x02	; 2
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	21 f4       	brne	.+8      	; 0x1cee <take_turn+0x3d8>
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9e 8f       	std	Y+30, r25	; 0x1e
    1cec:	8d 8f       	std	Y+29, r24	; 0x1d
		if(flag==1)
    1cee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <take_turn+0x3e4>
    1cf8:	fc ce       	rjmp	.-520    	; 0x1af2 <take_turn+0x1dc>
		{
			stop();
    1cfa:	0e 94 41 02 	call	0x482	; 0x482 <stop>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e2       	ldi	r26, 0x20	; 32
    1d04:	b2 e4       	ldi	r27, 0x42	; 66
    1d06:	8b 87       	std	Y+11, r24	; 0x0b
    1d08:	9c 87       	std	Y+12, r25	; 0x0c
    1d0a:	ad 87       	std	Y+13, r26	; 0x0d
    1d0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d16:	2d ec       	ldi	r18, 0xCD	; 205
    1d18:	3c ec       	ldi	r19, 0xCC	; 204
    1d1a:	4c e2       	ldi	r20, 0x2C	; 44
    1d1c:	55 e4       	ldi	r21, 0x45	; 69
    1d1e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8f 83       	std	Y+7, r24	; 0x07
    1d28:	98 87       	std	Y+8, r25	; 0x08
    1d2a:	a9 87       	std	Y+9, r26	; 0x09
    1d2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d30:	78 85       	ldd	r23, Y+8	; 0x08
    1d32:	89 85       	ldd	r24, Y+9	; 0x09
    1d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <take_turn+0x43a>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <take_turn+0x4b8>
	else if (__tmp > 65535)
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <take_turn+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <take_turn+0x49a>
    1d92:	84 e1       	ldi	r24, 0x14	; 20
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <take_turn+0x488>
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <take_turn+0x47c>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <take_turn+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <take_turn+0x4c4>
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(40);
			break;
		}
	}
    1de2:	a0 96       	adiw	r28, 0x20	; 32
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	ff 90       	pop	r15
    1df8:	ef 90       	pop	r14
    1dfa:	08 95       	ret

00001dfc <turn_left>:

}

void turn_left()
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
	lcd_cursor(1,1);		
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
	lcd_string("Left");
    1e0c:	8e e0       	ldi	r24, 0x0E	; 14
    1e0e:	92 e0       	ldi	r25, 0x02	; 2
    1e10:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
	take_turn(1);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 8b 0c 	call	0x1916	; 0x1916 <take_turn>
}
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <turn_right>:
void turn_right()
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	lcd_cursor(1,1);		
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
	lcd_string("Right");
    1e32:	83 e1       	ldi	r24, 0x13	; 19
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
	take_turn(2);
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <take_turn>
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <checkobstacle>:

int checkobstacle()
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	60 97       	sbiw	r28, 0x10	; 16
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
	init_sensor_values();
    1e5c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <init_sensor_values>
	if(fsharp>0x82 || fir<0xF0)
    1e60:	80 91 7d 03 	lds	r24, 0x037D
    1e64:	83 38       	cpi	r24, 0x83	; 131
    1e66:	28 f4       	brcc	.+10     	; 0x1e72 <checkobstacle+0x2a>
    1e68:	80 91 7e 03 	lds	r24, 0x037E
    1e6c:	80 3f       	cpi	r24, 0xF0	; 240
    1e6e:	08 f0       	brcs	.+2      	; 0x1e72 <checkobstacle+0x2a>
    1e70:	7f c0       	rjmp	.+254    	; 0x1f70 <checkobstacle+0x128>
	{
		stop();
    1e72:	0e 94 41 02 	call	0x482	; 0x482 <stop>
		lcd_cursor(1,1);		
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
		lcd_string("Obstacle");		
    1e7e:	89 e1       	ldi	r24, 0x19	; 25
    1e80:	92 e0       	ldi	r25, 0x02	; 2
    1e82:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a8 ec       	ldi	r26, 0xC8	; 200
    1e8c:	b2 e4       	ldi	r27, 0x42	; 66
    1e8e:	8b 87       	std	Y+11, r24	; 0x0b
    1e90:	9c 87       	std	Y+12, r25	; 0x0c
    1e92:	ad 87       	std	Y+13, r26	; 0x0d
    1e94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9e:	2d ec       	ldi	r18, 0xCD	; 205
    1ea0:	3c ec       	ldi	r19, 0xCC	; 204
    1ea2:	4c e2       	ldi	r20, 0x2C	; 44
    1ea4:	55 e4       	ldi	r21, 0x45	; 69
    1ea6:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8f 83       	std	Y+7, r24	; 0x07
    1eb0:	98 87       	std	Y+8, r25	; 0x08
    1eb2:	a9 87       	std	Y+9, r26	; 0x09
    1eb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb8:	78 85       	ldd	r23, Y+8	; 0x08
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	2c f4       	brge	.+10     	; 0x1ed8 <checkobstacle+0x90>
		__ticks = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
    1ed6:	3f c0       	rjmp	.+126    	; 0x1f56 <checkobstacle+0x10e>
	else if (__tmp > 65535)
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	57 e4       	ldi	r21, 0x47	; 71
    1ee8:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	4c f5       	brge	.+82     	; 0x1f42 <checkobstacle+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e2       	ldi	r20, 0x20	; 32
    1efe:	51 e4       	ldi	r21, 0x41	; 65
    1f00:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <checkobstacle+0xf0>
    1f1a:	84 e1       	ldi	r24, 0x14	; 20
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <checkobstacle+0xde>
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	69 f7       	brne	.-38     	; 0x1f1a <checkobstacle+0xd2>
    1f40:	14 c0       	rjmp	.+40     	; 0x1f6a <checkobstacle+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f42:	6f 81       	ldd	r22, Y+7	; 0x07
    1f44:	78 85       	ldd	r23, Y+8	; 0x08
    1f46:	89 85       	ldd	r24, Y+9	; 0x09
    1f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4a:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <checkobstacle+0x11a>
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);		
		return  0;
    1f6a:	18 8a       	std	Y+16, r1	; 0x10
    1f6c:	1f 86       	std	Y+15, r1	; 0x0f
    1f6e:	04 c0       	rjmp	.+8      	; 0x1f78 <checkobstacle+0x130>
	}	
	return 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	98 8b       	std	Y+16, r25	; 0x10
    1f76:	8f 87       	std	Y+15, r24	; 0x0f
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7a:	98 89       	ldd	r25, Y+16	; 0x10
}
    1f7c:	60 96       	adiw	r28, 0x10	; 16
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <checkintersection>:

int checkintersection()
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	ac 97       	sbiw	r28, 0x2c	; 44
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
	init_sensor_values();
    1fa2:	0e 94 4b 0c 	call	0x1896	; 0x1896 <init_sensor_values>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a0 e8       	ldi	r26, 0x80	; 128
    1fac:	bf e3       	ldi	r27, 0x3F	; 63
    1fae:	8f a3       	std	Y+39, r24	; 0x27
    1fb0:	98 a7       	std	Y+40, r25	; 0x28
    1fb2:	a9 a7       	std	Y+41, r26	; 0x29
    1fb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1fba:	89 a5       	ldd	r24, Y+41	; 0x29
    1fbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fbe:	2d ec       	ldi	r18, 0xCD	; 205
    1fc0:	3c ec       	ldi	r19, 0xCC	; 204
    1fc2:	4c e2       	ldi	r20, 0x2C	; 44
    1fc4:	55 e4       	ldi	r21, 0x45	; 69
    1fc6:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	8b a3       	std	Y+35, r24	; 0x23
    1fd0:	9c a3       	std	Y+36, r25	; 0x24
    1fd2:	ad a3       	std	Y+37, r26	; 0x25
    1fd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fda:	8d a1       	ldd	r24, Y+37	; 0x25
    1fdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    1fea:	88 23       	and	r24, r24
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <checkintersection+0x6a>
		__ticks = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9a a3       	std	Y+34, r25	; 0x22
    1ff4:	89 a3       	std	Y+33, r24	; 0x21
    1ff6:	3f c0       	rjmp	.+126    	; 0x2076 <checkintersection+0xe8>
	else if (__tmp > 65535)
    1ff8:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffa:	7c a1       	ldd	r23, Y+36	; 0x24
    1ffc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ffe:	9e a1       	ldd	r25, Y+38	; 0x26
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	3f ef       	ldi	r19, 0xFF	; 255
    2004:	4f e7       	ldi	r20, 0x7F	; 127
    2006:	57 e4       	ldi	r21, 0x47	; 71
    2008:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    200c:	18 16       	cp	r1, r24
    200e:	4c f5       	brge	.+82     	; 0x2062 <checkintersection+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2010:	6f a1       	ldd	r22, Y+39	; 0x27
    2012:	78 a5       	ldd	r23, Y+40	; 0x28
    2014:	89 a5       	ldd	r24, Y+41	; 0x29
    2016:	9a a5       	ldd	r25, Y+42	; 0x2a
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	51 e4       	ldi	r21, 0x41	; 65
    2020:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	9a a3       	std	Y+34, r25	; 0x22
    2036:	89 a3       	std	Y+33, r24	; 0x21
    2038:	0f c0       	rjmp	.+30     	; 0x2058 <checkintersection+0xca>
    203a:	84 e1       	ldi	r24, 0x14	; 20
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	98 a3       	std	Y+32, r25	; 0x20
    2040:	8f 8f       	std	Y+31, r24	; 0x1f
    2042:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2044:	98 a1       	ldd	r25, Y+32	; 0x20
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <checkintersection+0xb8>
    204a:	98 a3       	std	Y+32, r25	; 0x20
    204c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204e:	89 a1       	ldd	r24, Y+33	; 0x21
    2050:	9a a1       	ldd	r25, Y+34	; 0x22
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	9a a3       	std	Y+34, r25	; 0x22
    2056:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2058:	89 a1       	ldd	r24, Y+33	; 0x21
    205a:	9a a1       	ldd	r25, Y+34	; 0x22
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	69 f7       	brne	.-38     	; 0x203a <checkintersection+0xac>
    2060:	14 c0       	rjmp	.+40     	; 0x208a <checkintersection+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2062:	6b a1       	ldd	r22, Y+35	; 0x23
    2064:	7c a1       	ldd	r23, Y+36	; 0x24
    2066:	8d a1       	ldd	r24, Y+37	; 0x25
    2068:	9e a1       	ldd	r25, Y+38	; 0x26
    206a:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9a a3       	std	Y+34, r25	; 0x22
    2074:	89 a3       	std	Y+33, r24	; 0x21
    2076:	89 a1       	ldd	r24, Y+33	; 0x21
    2078:	9a a1       	ldd	r25, Y+34	; 0x22
    207a:	9e 8f       	std	Y+30, r25	; 0x1e
    207c:	8d 8f       	std	Y+29, r24	; 0x1d
    207e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2080:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <checkintersection+0xf4>
    2086:	9e 8f       	std	Y+30, r25	; 0x1e
    2088:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	if( cline>thresh && lline>thresh && rline >thresh)
    208a:	80 91 7b 03 	lds	r24, 0x037B
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	80 91 0c 02 	lds	r24, 0x020C
    2096:	90 91 0d 02 	lds	r25, 0x020D
    209a:	82 17       	cp	r24, r18
    209c:	93 07       	cpc	r25, r19
    209e:	0c f0       	brlt	.+2      	; 0x20a2 <checkintersection+0x114>
    20a0:	27 c1       	rjmp	.+590    	; 0x22f0 <__stack+0xf1>
    20a2:	80 91 7a 03 	lds	r24, 0x037A
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	80 91 0c 02 	lds	r24, 0x020C
    20ae:	90 91 0d 02 	lds	r25, 0x020D
    20b2:	82 17       	cp	r24, r18
    20b4:	93 07       	cpc	r25, r19
    20b6:	0c f0       	brlt	.+2      	; 0x20ba <checkintersection+0x12c>
    20b8:	1b c1       	rjmp	.+566    	; 0x22f0 <__stack+0xf1>
    20ba:	80 91 7c 03 	lds	r24, 0x037C
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	80 91 0c 02 	lds	r24, 0x020C
    20c6:	90 91 0d 02 	lds	r25, 0x020D
    20ca:	82 17       	cp	r24, r18
    20cc:	93 07       	cpc	r25, r19
    20ce:	0c f0       	brlt	.+2      	; 0x20d2 <checkintersection+0x144>
    20d0:	0f c1       	rjmp	.+542    	; 0x22f0 <__stack+0xf1>
	{
		buzzer_on();
    20d2:	0e 94 ae 01 	call	0x35c	; 0x35c <buzzer_on>
		lcd_cursor(1,1);		
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
		lcd_string("Intersection");
    20de:	82 e2       	ldi	r24, 0x22	; 34
    20e0:	92 e0       	ldi	r25, 0x02	; 2
    20e2:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
		init_sensor_values();
    20e6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <init_sensor_values>
		forward();
    20ea:	0e 94 05 02 	call	0x40a	; 0x40a <forward>
		velocity(leftspeed,(rightspeed-delta));
    20ee:	80 91 00 02 	lds	r24, 0x0200
    20f2:	90 91 01 02 	lds	r25, 0x0201
    20f6:	38 2f       	mov	r19, r24
    20f8:	80 91 02 02 	lds	r24, 0x0202
    20fc:	90 91 03 02 	lds	r25, 0x0203
    2100:	28 2f       	mov	r18, r24
    2102:	80 91 04 02 	lds	r24, 0x0204
    2106:	90 91 05 02 	lds	r25, 0x0205
    210a:	92 2f       	mov	r25, r18
    210c:	98 1b       	sub	r25, r24
    210e:	83 2f       	mov	r24, r19
    2110:	69 2f       	mov	r22, r25
    2112:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <velocity>
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a8 e4       	ldi	r26, 0x48	; 72
    211c:	b3 e4       	ldi	r27, 0x43	; 67
    211e:	89 8f       	std	Y+25, r24	; 0x19
    2120:	9a 8f       	std	Y+26, r25	; 0x1a
    2122:	ab 8f       	std	Y+27, r26	; 0x1b
    2124:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2126:	69 8d       	ldd	r22, Y+25	; 0x19
    2128:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212e:	2d ec       	ldi	r18, 0xCD	; 205
    2130:	3c ec       	ldi	r19, 0xCC	; 204
    2132:	4c e2       	ldi	r20, 0x2C	; 44
    2134:	55 e4       	ldi	r21, 0x45	; 69
    2136:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	8d 8b       	std	Y+21, r24	; 0x15
    2140:	9e 8b       	std	Y+22, r25	; 0x16
    2142:	af 8b       	std	Y+23, r26	; 0x17
    2144:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2146:	6d 89       	ldd	r22, Y+21	; 0x15
    2148:	7e 89       	ldd	r23, Y+22	; 0x16
    214a:	8f 89       	ldd	r24, Y+23	; 0x17
    214c:	98 8d       	ldd	r25, Y+24	; 0x18
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	2c f4       	brge	.+10     	; 0x2168 <checkintersection+0x1da>
		__ticks = 1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9c 8b       	std	Y+20, r25	; 0x14
    2164:	8b 8b       	std	Y+19, r24	; 0x13
    2166:	3f c0       	rjmp	.+126    	; 0x21e6 <checkintersection+0x258>
	else if (__tmp > 65535)
    2168:	6d 89       	ldd	r22, Y+21	; 0x15
    216a:	7e 89       	ldd	r23, Y+22	; 0x16
    216c:	8f 89       	ldd	r24, Y+23	; 0x17
    216e:	98 8d       	ldd	r25, Y+24	; 0x18
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	3f ef       	ldi	r19, 0xFF	; 255
    2174:	4f e7       	ldi	r20, 0x7F	; 127
    2176:	57 e4       	ldi	r21, 0x47	; 71
    2178:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    217c:	18 16       	cp	r1, r24
    217e:	4c f5       	brge	.+82     	; 0x21d2 <checkintersection+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2180:	69 8d       	ldd	r22, Y+25	; 0x19
    2182:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2184:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2186:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e2       	ldi	r20, 0x20	; 32
    218e:	51 e4       	ldi	r21, 0x41	; 65
    2190:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9c 8b       	std	Y+20, r25	; 0x14
    21a6:	8b 8b       	std	Y+19, r24	; 0x13
    21a8:	0f c0       	rjmp	.+30     	; 0x21c8 <checkintersection+0x23a>
    21aa:	84 e1       	ldi	r24, 0x14	; 20
    21ac:	91 e0       	ldi	r25, 0x01	; 1
    21ae:	9a 8b       	std	Y+18, r25	; 0x12
    21b0:	89 8b       	std	Y+17, r24	; 0x11
    21b2:	89 89       	ldd	r24, Y+17	; 0x11
    21b4:	9a 89       	ldd	r25, Y+18	; 0x12
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <checkintersection+0x228>
    21ba:	9a 8b       	std	Y+18, r25	; 0x12
    21bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	9c 8b       	std	Y+20, r25	; 0x14
    21c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ca:	9c 89       	ldd	r25, Y+20	; 0x14
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	69 f7       	brne	.-38     	; 0x21aa <checkintersection+0x21c>
    21d0:	14 c0       	rjmp	.+40     	; 0x21fa <checkintersection+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d2:	6d 89       	ldd	r22, Y+21	; 0x15
    21d4:	7e 89       	ldd	r23, Y+22	; 0x16
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9c 8b       	std	Y+20, r25	; 0x14
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
    21e6:	8b 89       	ldd	r24, Y+19	; 0x13
    21e8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ea:	98 8b       	std	Y+16, r25	; 0x10
    21ec:	8f 87       	std	Y+15, r24	; 0x0f
    21ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f0:	98 89       	ldd	r25, Y+16	; 0x10
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <checkintersection+0x264>
    21f6:	98 8b       	std	Y+16, r25	; 0x10
    21f8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);		
		stop();
    21fa:	0e 94 41 02 	call	0x482	; 0x482 <stop>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	aa e7       	ldi	r26, 0x7A	; 122
    2204:	b4 e4       	ldi	r27, 0x44	; 68
    2206:	8b 87       	std	Y+11, r24	; 0x0b
    2208:	9c 87       	std	Y+12, r25	; 0x0c
    220a:	ad 87       	std	Y+13, r26	; 0x0d
    220c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2210:	7c 85       	ldd	r23, Y+12	; 0x0c
    2212:	8d 85       	ldd	r24, Y+13	; 0x0d
    2214:	9e 85       	ldd	r25, Y+14	; 0x0e
    2216:	2d ec       	ldi	r18, 0xCD	; 205
    2218:	3c ec       	ldi	r19, 0xCC	; 204
    221a:	4c e2       	ldi	r20, 0x2C	; 44
    221c:	55 e4       	ldi	r21, 0x45	; 69
    221e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8f 83       	std	Y+7, r24	; 0x07
    2228:	98 87       	std	Y+8, r25	; 0x08
    222a:	a9 87       	std	Y+9, r26	; 0x09
    222c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <__stack+0x51>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9e 83       	std	Y+6, r25	; 0x06
    224c:	8d 83       	std	Y+5, r24	; 0x05
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <__stack+0xcf>
	else if (__tmp > 65535)
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <__stack+0xbb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	6b 85       	ldd	r22, Y+11	; 0x0b
    226a:	7c 85       	ldd	r23, Y+12	; 0x0c
    226c:	8d 85       	ldd	r24, Y+13	; 0x0d
    226e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <__stack+0xb1>
    2292:	84 e1       	ldi	r24, 0x14	; 20
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	8b 83       	std	Y+3, r24	; 0x03
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <__stack+0x9f>
    22a2:	9c 83       	std	Y+4, r25	; 0x04
    22a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <__stack+0x93>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <__stack+0xe3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <__stack+0xdb>
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		buzzer_off();
    22e2:	0e 94 99 01 	call	0x332	; 0x332 <buzzer_off>
		return 1;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9c a7       	std	Y+44, r25	; 0x2c
    22ec:	8b a7       	std	Y+43, r24	; 0x2b
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <__stack+0xf5>
	}
	return 0;
    22f0:	1c a6       	std	Y+44, r1	; 0x2c
    22f2:	1b a6       	std	Y+43, r1	; 0x2b
    22f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22f6:	9c a5       	ldd	r25, Y+44	; 0x2c
}
    22f8:	ac 96       	adiw	r28, 0x2c	; 44
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <follow>:


void follow()
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	66 97       	sbiw	r28, 0x16	; 22
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
	lcd_cursor(1,1);		
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
	lcd_string("Go Straight");
    2326:	8f e2       	ldi	r24, 0x2F	; 47
    2328:	92 e0       	ldi	r25, 0x02	; 2
    232a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
	init_sensor_values();
    232e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <init_sensor_values>
	forward();
    2332:	0e 94 05 02 	call	0x40a	; 0x40a <forward>
	//if(pow_diff < 0) velocity(max+pow_diff, max);
	//else velocity(max, max-pow_diff);
	int left = leftspeed;
    2336:	80 91 00 02 	lds	r24, 0x0200
    233a:	90 91 01 02 	lds	r25, 0x0201
    233e:	9a 8b       	std	Y+18, r25	; 0x12
    2340:	89 8b       	std	Y+17, r24	; 0x11
	int right = rightspeed-delta;
    2342:	20 91 02 02 	lds	r18, 0x0202
    2346:	30 91 03 02 	lds	r19, 0x0203
    234a:	80 91 04 02 	lds	r24, 0x0204
    234e:	90 91 05 02 	lds	r25, 0x0205
    2352:	a9 01       	movw	r20, r18
    2354:	48 1b       	sub	r20, r24
    2356:	59 0b       	sbc	r21, r25
    2358:	ca 01       	movw	r24, r20
    235a:	98 8b       	std	Y+16, r25	; 0x10
    235c:	8f 87       	std	Y+15, r24	; 0x0f
	if(cline>thresh)
    235e:	80 91 7b 03 	lds	r24, 0x037B
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	80 91 0c 02 	lds	r24, 0x020C
    236a:	90 91 0d 02 	lds	r25, 0x020D
    236e:	82 17       	cp	r24, r18
    2370:	93 07       	cpc	r25, r19
    2372:	0c f0       	brlt	.+2      	; 0x2376 <follow+0x6c>
    2374:	55 c0       	rjmp	.+170    	; 0x2420 <follow+0x116>
	{
		if(lline>thresh) left = left*0.7;
    2376:	80 91 7a 03 	lds	r24, 0x037A
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	80 91 0c 02 	lds	r24, 0x020C
    2382:	90 91 0d 02 	lds	r25, 0x020D
    2386:	82 17       	cp	r24, r18
    2388:	93 07       	cpc	r25, r19
    238a:	fc f4       	brge	.+62     	; 0x23ca <follow+0xc0>
    238c:	89 89       	ldd	r24, Y+17	; 0x11
    238e:	9a 89       	ldd	r25, Y+18	; 0x12
    2390:	aa 27       	eor	r26, r26
    2392:	97 fd       	sbrc	r25, 7
    2394:	a0 95       	com	r26
    2396:	ba 2f       	mov	r27, r26
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <__floatsisf>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	23 e3       	ldi	r18, 0x33	; 51
    23aa:	33 e3       	ldi	r19, 0x33	; 51
    23ac:	43 e3       	ldi	r20, 0x33	; 51
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	bc 01       	movw	r22, r24
    23ba:	cd 01       	movw	r24, r26
    23bc:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__fixsfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9a 8b       	std	Y+18, r25	; 0x12
    23c6:	89 8b       	std	Y+17, r24	; 0x11
    23c8:	6a c0       	rjmp	.+212    	; 0x249e <follow+0x194>
		else if(rline>thresh) right = right*0.7;
    23ca:	80 91 7c 03 	lds	r24, 0x037C
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	80 91 0c 02 	lds	r24, 0x020C
    23d6:	90 91 0d 02 	lds	r25, 0x020D
    23da:	82 17       	cp	r24, r18
    23dc:	93 07       	cpc	r25, r19
    23de:	0c f0       	brlt	.+2      	; 0x23e2 <follow+0xd8>
    23e0:	5e c0       	rjmp	.+188    	; 0x249e <follow+0x194>
    23e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e4:	98 89       	ldd	r25, Y+16	; 0x10
    23e6:	aa 27       	eor	r26, r26
    23e8:	97 fd       	sbrc	r25, 7
    23ea:	a0 95       	com	r26
    23ec:	ba 2f       	mov	r27, r26
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <__floatsisf>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	23 e3       	ldi	r18, 0x33	; 51
    2400:	33 e3       	ldi	r19, 0x33	; 51
    2402:	43 e3       	ldi	r20, 0x33	; 51
    2404:	5f e3       	ldi	r21, 0x3F	; 63
    2406:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__fixsfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	98 8b       	std	Y+16, r25	; 0x10
    241c:	8f 87       	std	Y+15, r24	; 0x0f
    241e:	3f c0       	rjmp	.+126    	; 0x249e <follow+0x194>
	}
	else
	{
		if(lline>thresh) left = left/2;
    2420:	80 91 7a 03 	lds	r24, 0x037A
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	80 91 0c 02 	lds	r24, 0x020C
    242c:	90 91 0d 02 	lds	r25, 0x020D
    2430:	82 17       	cp	r24, r18
    2432:	93 07       	cpc	r25, r19
    2434:	ac f4       	brge	.+42     	; 0x2460 <follow+0x156>
    2436:	89 89       	ldd	r24, Y+17	; 0x11
    2438:	9a 89       	ldd	r25, Y+18	; 0x12
    243a:	9c 8b       	std	Y+20, r25	; 0x14
    243c:	8b 8b       	std	Y+19, r24	; 0x13
    243e:	8b 89       	ldd	r24, Y+19	; 0x13
    2440:	9c 89       	ldd	r25, Y+20	; 0x14
    2442:	99 23       	and	r25, r25
    2444:	34 f4       	brge	.+12     	; 0x2452 <follow+0x148>
    2446:	4b 89       	ldd	r20, Y+19	; 0x13
    2448:	5c 89       	ldd	r21, Y+20	; 0x14
    244a:	4f 5f       	subi	r20, 0xFF	; 255
    244c:	5f 4f       	sbci	r21, 0xFF	; 255
    244e:	5c 8b       	std	Y+20, r21	; 0x14
    2450:	4b 8b       	std	Y+19, r20	; 0x13
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	9c 89       	ldd	r25, Y+20	; 0x14
    2456:	95 95       	asr	r25
    2458:	87 95       	ror	r24
    245a:	9a 8b       	std	Y+18, r25	; 0x12
    245c:	89 8b       	std	Y+17, r24	; 0x11
    245e:	1f c0       	rjmp	.+62     	; 0x249e <follow+0x194>
		else if(rline>thresh) right = right/2;
    2460:	80 91 7c 03 	lds	r24, 0x037C
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	80 91 0c 02 	lds	r24, 0x020C
    246c:	90 91 0d 02 	lds	r25, 0x020D
    2470:	82 17       	cp	r24, r18
    2472:	93 07       	cpc	r25, r19
    2474:	a4 f4       	brge	.+40     	; 0x249e <follow+0x194>
    2476:	8f 85       	ldd	r24, Y+15	; 0x0f
    2478:	98 89       	ldd	r25, Y+16	; 0x10
    247a:	9e 8b       	std	Y+22, r25	; 0x16
    247c:	8d 8b       	std	Y+21, r24	; 0x15
    247e:	8d 89       	ldd	r24, Y+21	; 0x15
    2480:	9e 89       	ldd	r25, Y+22	; 0x16
    2482:	99 23       	and	r25, r25
    2484:	34 f4       	brge	.+12     	; 0x2492 <follow+0x188>
    2486:	4d 89       	ldd	r20, Y+21	; 0x15
    2488:	5e 89       	ldd	r21, Y+22	; 0x16
    248a:	4f 5f       	subi	r20, 0xFF	; 255
    248c:	5f 4f       	sbci	r21, 0xFF	; 255
    248e:	5e 8b       	std	Y+22, r21	; 0x16
    2490:	4d 8b       	std	Y+21, r20	; 0x15
    2492:	8d 89       	ldd	r24, Y+21	; 0x15
    2494:	9e 89       	ldd	r25, Y+22	; 0x16
    2496:	95 95       	asr	r25
    2498:	87 95       	ror	r24
    249a:	98 8b       	std	Y+16, r25	; 0x10
    249c:	8f 87       	std	Y+15, r24	; 0x0f
	}
	velocity(left,right);
    249e:	89 89       	ldd	r24, Y+17	; 0x11
    24a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24a2:	69 2f       	mov	r22, r25
    24a4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <velocity>
	if((cline<thresh) && (lline<thresh) && (rline<thresh) ) 
    24a8:	80 91 7b 03 	lds	r24, 0x037B
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	80 91 0c 02 	lds	r24, 0x020C
    24b4:	90 91 0d 02 	lds	r25, 0x020D
    24b8:	28 17       	cp	r18, r24
    24ba:	39 07       	cpc	r19, r25
    24bc:	0c f0       	brlt	.+2      	; 0x24c0 <follow+0x1b6>
    24be:	94 c0       	rjmp	.+296    	; 0x25e8 <follow+0x2de>
    24c0:	80 91 7a 03 	lds	r24, 0x037A
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	80 91 0c 02 	lds	r24, 0x020C
    24cc:	90 91 0d 02 	lds	r25, 0x020D
    24d0:	28 17       	cp	r18, r24
    24d2:	39 07       	cpc	r19, r25
    24d4:	0c f0       	brlt	.+2      	; 0x24d8 <follow+0x1ce>
    24d6:	88 c0       	rjmp	.+272    	; 0x25e8 <follow+0x2de>
    24d8:	80 91 7c 03 	lds	r24, 0x037C
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	80 91 0c 02 	lds	r24, 0x020C
    24e4:	90 91 0d 02 	lds	r25, 0x020D
    24e8:	28 17       	cp	r18, r24
    24ea:	39 07       	cpc	r19, r25
    24ec:	0c f0       	brlt	.+2      	; 0x24f0 <follow+0x1e6>
    24ee:	7c c0       	rjmp	.+248    	; 0x25e8 <follow+0x2de>
	{
		
		stop();
    24f0:	0e 94 41 02 	call	0x482	; 0x482 <stop>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a8 ec       	ldi	r26, 0xC8	; 200
    24fa:	b2 e4       	ldi	r27, 0x42	; 66
    24fc:	8b 87       	std	Y+11, r24	; 0x0b
    24fe:	9c 87       	std	Y+12, r25	; 0x0c
    2500:	ad 87       	std	Y+13, r26	; 0x0d
    2502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	6b 85       	ldd	r22, Y+11	; 0x0b
    2506:	7c 85       	ldd	r23, Y+12	; 0x0c
    2508:	8d 85       	ldd	r24, Y+13	; 0x0d
    250a:	9e 85       	ldd	r25, Y+14	; 0x0e
    250c:	2d ec       	ldi	r18, 0xCD	; 205
    250e:	3c ec       	ldi	r19, 0xCC	; 204
    2510:	4c e2       	ldi	r20, 0x2C	; 44
    2512:	55 e4       	ldi	r21, 0x45	; 69
    2514:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	8f 83       	std	Y+7, r24	; 0x07
    251e:	98 87       	std	Y+8, r25	; 0x08
    2520:	a9 87       	std	Y+9, r26	; 0x09
    2522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2524:	6f 81       	ldd	r22, Y+7	; 0x07
    2526:	78 85       	ldd	r23, Y+8	; 0x08
    2528:	89 85       	ldd	r24, Y+9	; 0x09
    252a:	9a 85       	ldd	r25, Y+10	; 0x0a
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e8       	ldi	r20, 0x80	; 128
    2532:	5f e3       	ldi	r21, 0x3F	; 63
    2534:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    2538:	88 23       	and	r24, r24
    253a:	2c f4       	brge	.+10     	; 0x2546 <follow+0x23c>
		__ticks = 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	3f c0       	rjmp	.+126    	; 0x25c4 <follow+0x2ba>
	else if (__tmp > 65535)
    2546:	6f 81       	ldd	r22, Y+7	; 0x07
    2548:	78 85       	ldd	r23, Y+8	; 0x08
    254a:	89 85       	ldd	r24, Y+9	; 0x09
    254c:	9a 85       	ldd	r25, Y+10	; 0x0a
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	3f ef       	ldi	r19, 0xFF	; 255
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	57 e4       	ldi	r21, 0x47	; 71
    2556:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    255a:	18 16       	cp	r1, r24
    255c:	4c f5       	brge	.+82     	; 0x25b0 <follow+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2560:	7c 85       	ldd	r23, Y+12	; 0x0c
    2562:	8d 85       	ldd	r24, Y+13	; 0x0d
    2564:	9e 85       	ldd	r25, Y+14	; 0x0e
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9e 83       	std	Y+6, r25	; 0x06
    2584:	8d 83       	std	Y+5, r24	; 0x05
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <follow+0x29c>
    2588:	84 e1       	ldi	r24, 0x14	; 20
    258a:	91 e0       	ldi	r25, 0x01	; 1
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <follow+0x28a>
    2598:	9c 83       	std	Y+4, r25	; 0x04
    259a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	9e 83       	std	Y+6, r25	; 0x06
    25a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	69 f7       	brne	.-38     	; 0x2588 <follow+0x27e>
    25ae:	14 c0       	rjmp	.+40     	; 0x25d8 <follow+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <follow+0x2c6>
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		lcd_cursor(1,1);		
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
		lcd_string("Stop");
    25e0:	8b e3       	ldi	r24, 0x3B	; 59
    25e2:	92 e0       	ldi	r25, 0x02	; 2
    25e4:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
		
	}
}
    25e8:	66 96       	adiw	r28, 0x16	; 22
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <__vector_25>:
unsigned char chkid2 = '\0';
unsigned char mytemp;
const char myid = '0';
int recv_count=0;;
SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    25fa:	1f 92       	push	r1
    25fc:	0f 92       	push	r0
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	0f 92       	push	r0
    2602:	00 90 5b 00 	lds	r0, 0x005B
    2606:	0f 92       	push	r0
    2608:	11 24       	eor	r1, r1
    260a:	2f 93       	push	r18
    260c:	3f 93       	push	r19
    260e:	4f 93       	push	r20
    2610:	5f 93       	push	r21
    2612:	6f 93       	push	r22
    2614:	7f 93       	push	r23
    2616:	8f 93       	push	r24
    2618:	9f 93       	push	r25
    261a:	af 93       	push	r26
    261c:	bf 93       	push	r27
    261e:	ef 93       	push	r30
    2620:	ff 93       	push	r31
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	00 d0       	rcall	.+0      	; 0x2628 <__vector_25+0x2e>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	//receiving protocol : d myid data --> 3chars sent by coordinator
	cli();
    262c:	f8 94       	cli
	mytemp = UDR0 ;
    262e:	e6 ec       	ldi	r30, 0xC6	; 198
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	80 93 9d 03 	sts	0x039D, r24
	if(recv_count==0) { chkid1=mytemp; recv_count++; }
    2638:	80 91 99 03 	lds	r24, 0x0399
    263c:	90 91 9a 03 	lds	r25, 0x039A
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	71 f4       	brne	.+28     	; 0x2660 <__vector_25+0x66>
    2644:	80 91 9d 03 	lds	r24, 0x039D
    2648:	80 93 97 03 	sts	0x0397, r24
    264c:	80 91 99 03 	lds	r24, 0x0399
    2650:	90 91 9a 03 	lds	r25, 0x039A
    2654:	01 96       	adiw	r24, 0x01	; 1
    2656:	90 93 9a 03 	sts	0x039A, r25
    265a:	80 93 99 03 	sts	0x0399, r24
    265e:	32 c0       	rjmp	.+100    	; 0x26c4 <__vector_25+0xca>
	else if (recv_count==1) { chkid2=mytemp; recv_count++; }
    2660:	80 91 99 03 	lds	r24, 0x0399
    2664:	90 91 9a 03 	lds	r25, 0x039A
    2668:	81 30       	cpi	r24, 0x01	; 1
    266a:	91 05       	cpc	r25, r1
    266c:	71 f4       	brne	.+28     	; 0x268a <__vector_25+0x90>
    266e:	80 91 9d 03 	lds	r24, 0x039D
    2672:	80 93 98 03 	sts	0x0398, r24
    2676:	80 91 99 03 	lds	r24, 0x0399
    267a:	90 91 9a 03 	lds	r25, 0x039A
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	90 93 9a 03 	sts	0x039A, r25
    2684:	80 93 99 03 	sts	0x0399, r24
    2688:	1d c0       	rjmp	.+58     	; 0x26c4 <__vector_25+0xca>
	else if(recv_count==2)
    268a:	80 91 99 03 	lds	r24, 0x0399
    268e:	90 91 9a 03 	lds	r25, 0x039A
    2692:	82 30       	cpi	r24, 0x02	; 2
    2694:	91 05       	cpc	r25, r1
    2696:	b1 f4       	brne	.+44     	; 0x26c4 <__vector_25+0xca>
	{
		if(chkid1 == 'g' && chkid2 == myid)
    2698:	80 91 97 03 	lds	r24, 0x0397
    269c:	87 36       	cpi	r24, 0x67	; 103
    269e:	51 f4       	brne	.+20     	; 0x26b4 <__vector_25+0xba>
    26a0:	90 91 98 03 	lds	r25, 0x0398
    26a4:	80 91 40 02 	lds	r24, 0x0240
    26a8:	98 17       	cp	r25, r24
    26aa:	21 f4       	brne	.+8      	; 0x26b4 <__vector_25+0xba>
		{
			data=mytemp;
    26ac:	80 91 9d 03 	lds	r24, 0x039D
    26b0:	80 93 a7 03 	sts	0x03A7, r24
		}
		chkid1='\0';
    26b4:	10 92 97 03 	sts	0x0397, r1
		chkid2='\0';
    26b8:	10 92 98 03 	sts	0x0398, r1
		recv_count=0;
    26bc:	10 92 9a 03 	sts	0x039A, r1
    26c0:	10 92 99 03 	sts	0x0399, r1
	}
	sei();
    26c4:	78 94       	sei
	lcd_cursor(1,1);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	61 e0       	ldi	r22, 0x01	; 1
    26ca:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
	char msg[3];
}
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	ff 91       	pop	r31
    26da:	ef 91       	pop	r30
    26dc:	bf 91       	pop	r27
    26de:	af 91       	pop	r26
    26e0:	9f 91       	pop	r25
    26e2:	8f 91       	pop	r24
    26e4:	7f 91       	pop	r23
    26e6:	6f 91       	pop	r22
    26e8:	5f 91       	pop	r21
    26ea:	4f 91       	pop	r20
    26ec:	3f 91       	pop	r19
    26ee:	2f 91       	pop	r18
    26f0:	0f 90       	pop	r0
    26f2:	00 92 5b 00 	sts	0x005B, r0
    26f6:	0f 90       	pop	r0
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	0f 90       	pop	r0
    26fc:	1f 90       	pop	r1
    26fe:	18 95       	reti

00002700 <xbee_sendString>:


void xbee_sendString(char str[],int strlngt)
{	
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	e0 97       	sbiw	r28, 0x30	; 48
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	9e a7       	std	Y+46, r25	; 0x2e
    2716:	8d a7       	std	Y+45, r24	; 0x2d
    2718:	78 ab       	std	Y+48, r23	; 0x30
    271a:	6f a7       	std	Y+47, r22	; 0x2f
	cli();
    271c:	f8 94       	cli
	int i;
	UDR0='#';
    271e:	e6 ec       	ldi	r30, 0xC6	; 198
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	83 e2       	ldi	r24, 0x23	; 35
    2724:	80 83       	st	Z, r24
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	a0 e8       	ldi	r26, 0x80	; 128
    272c:	bf e3       	ldi	r27, 0x3F	; 63
    272e:	8f a3       	std	Y+39, r24	; 0x27
    2730:	98 a7       	std	Y+40, r25	; 0x28
    2732:	a9 a7       	std	Y+41, r26	; 0x29
    2734:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	6f a1       	ldd	r22, Y+39	; 0x27
    2738:	78 a5       	ldd	r23, Y+40	; 0x28
    273a:	89 a5       	ldd	r24, Y+41	; 0x29
    273c:	9a a5       	ldd	r25, Y+42	; 0x2a
    273e:	2d ec       	ldi	r18, 0xCD	; 205
    2740:	3c ec       	ldi	r19, 0xCC	; 204
    2742:	4c e2       	ldi	r20, 0x2C	; 44
    2744:	55 e4       	ldi	r21, 0x45	; 69
    2746:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8b a3       	std	Y+35, r24	; 0x23
    2750:	9c a3       	std	Y+36, r25	; 0x24
    2752:	ad a3       	std	Y+37, r26	; 0x25
    2754:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2756:	6b a1       	ldd	r22, Y+35	; 0x23
    2758:	7c a1       	ldd	r23, Y+36	; 0x24
    275a:	8d a1       	ldd	r24, Y+37	; 0x25
    275c:	9e a1       	ldd	r25, Y+38	; 0x26
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    276a:	88 23       	and	r24, r24
    276c:	2c f4       	brge	.+10     	; 0x2778 <xbee_sendString+0x78>
		__ticks = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9a a3       	std	Y+34, r25	; 0x22
    2774:	89 a3       	std	Y+33, r24	; 0x21
    2776:	3f c0       	rjmp	.+126    	; 0x27f6 <xbee_sendString+0xf6>
	else if (__tmp > 65535)
    2778:	6b a1       	ldd	r22, Y+35	; 0x23
    277a:	7c a1       	ldd	r23, Y+36	; 0x24
    277c:	8d a1       	ldd	r24, Y+37	; 0x25
    277e:	9e a1       	ldd	r25, Y+38	; 0x26
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	4f e7       	ldi	r20, 0x7F	; 127
    2786:	57 e4       	ldi	r21, 0x47	; 71
    2788:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    278c:	18 16       	cp	r1, r24
    278e:	4c f5       	brge	.+82     	; 0x27e2 <xbee_sendString+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	6f a1       	ldd	r22, Y+39	; 0x27
    2792:	78 a5       	ldd	r23, Y+40	; 0x28
    2794:	89 a5       	ldd	r24, Y+41	; 0x29
    2796:	9a a5       	ldd	r25, Y+42	; 0x2a
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9a a3       	std	Y+34, r25	; 0x22
    27b6:	89 a3       	std	Y+33, r24	; 0x21
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <xbee_sendString+0xd8>
    27ba:	84 e1       	ldi	r24, 0x14	; 20
    27bc:	91 e0       	ldi	r25, 0x01	; 1
    27be:	98 a3       	std	Y+32, r25	; 0x20
    27c0:	8f 8f       	std	Y+31, r24	; 0x1f
    27c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27c4:	98 a1       	ldd	r25, Y+32	; 0x20
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <xbee_sendString+0xc6>
    27ca:	98 a3       	std	Y+32, r25	; 0x20
    27cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	89 a1       	ldd	r24, Y+33	; 0x21
    27d0:	9a a1       	ldd	r25, Y+34	; 0x22
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9a a3       	std	Y+34, r25	; 0x22
    27d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	89 a1       	ldd	r24, Y+33	; 0x21
    27da:	9a a1       	ldd	r25, Y+34	; 0x22
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <xbee_sendString+0xba>
    27e0:	14 c0       	rjmp	.+40     	; 0x280a <xbee_sendString+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	6b a1       	ldd	r22, Y+35	; 0x23
    27e4:	7c a1       	ldd	r23, Y+36	; 0x24
    27e6:	8d a1       	ldd	r24, Y+37	; 0x25
    27e8:	9e a1       	ldd	r25, Y+38	; 0x26
    27ea:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9a a3       	std	Y+34, r25	; 0x22
    27f4:	89 a3       	std	Y+33, r24	; 0x21
    27f6:	89 a1       	ldd	r24, Y+33	; 0x21
    27f8:	9a a1       	ldd	r25, Y+34	; 0x22
    27fa:	9e 8f       	std	Y+30, r25	; 0x1e
    27fc:	8d 8f       	std	Y+29, r24	; 0x1d
    27fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2800:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <xbee_sendString+0x102>
    2806:	9e 8f       	std	Y+30, r25	; 0x1e
    2808:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	for(i=0;i<strlngt;i++)
    280a:	1c a6       	std	Y+44, r1	; 0x2c
    280c:	1b a6       	std	Y+43, r1	; 0x2b
    280e:	82 c0       	rjmp	.+260    	; 0x2914 <xbee_sendString+0x214>
	{
		UDR0=str[i];
    2810:	a6 ec       	ldi	r26, 0xC6	; 198
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	2b a5       	ldd	r18, Y+43	; 0x2b
    2816:	3c a5       	ldd	r19, Y+44	; 0x2c
    2818:	8d a5       	ldd	r24, Y+45	; 0x2d
    281a:	9e a5       	ldd	r25, Y+46	; 0x2e
    281c:	fc 01       	movw	r30, r24
    281e:	e2 0f       	add	r30, r18
    2820:	f3 1f       	adc	r31, r19
    2822:	80 81       	ld	r24, Z
    2824:	8c 93       	st	X, r24
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	a0 e8       	ldi	r26, 0x80	; 128
    282c:	bf e3       	ldi	r27, 0x3F	; 63
    282e:	89 8f       	std	Y+25, r24	; 0x19
    2830:	9a 8f       	std	Y+26, r25	; 0x1a
    2832:	ab 8f       	std	Y+27, r26	; 0x1b
    2834:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2836:	69 8d       	ldd	r22, Y+25	; 0x19
    2838:	7a 8d       	ldd	r23, Y+26	; 0x1a
    283a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    283c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    283e:	2d ec       	ldi	r18, 0xCD	; 205
    2840:	3c ec       	ldi	r19, 0xCC	; 204
    2842:	4c e2       	ldi	r20, 0x2C	; 44
    2844:	55 e4       	ldi	r21, 0x45	; 69
    2846:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	8d 8b       	std	Y+21, r24	; 0x15
    2850:	9e 8b       	std	Y+22, r25	; 0x16
    2852:	af 8b       	std	Y+23, r26	; 0x17
    2854:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2856:	6d 89       	ldd	r22, Y+21	; 0x15
    2858:	7e 89       	ldd	r23, Y+22	; 0x16
    285a:	8f 89       	ldd	r24, Y+23	; 0x17
    285c:	98 8d       	ldd	r25, Y+24	; 0x18
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e8       	ldi	r20, 0x80	; 128
    2864:	5f e3       	ldi	r21, 0x3F	; 63
    2866:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    286a:	88 23       	and	r24, r24
    286c:	2c f4       	brge	.+10     	; 0x2878 <xbee_sendString+0x178>
		__ticks = 1;
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9c 8b       	std	Y+20, r25	; 0x14
    2874:	8b 8b       	std	Y+19, r24	; 0x13
    2876:	3f c0       	rjmp	.+126    	; 0x28f6 <xbee_sendString+0x1f6>
	else if (__tmp > 65535)
    2878:	6d 89       	ldd	r22, Y+21	; 0x15
    287a:	7e 89       	ldd	r23, Y+22	; 0x16
    287c:	8f 89       	ldd	r24, Y+23	; 0x17
    287e:	98 8d       	ldd	r25, Y+24	; 0x18
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	3f ef       	ldi	r19, 0xFF	; 255
    2884:	4f e7       	ldi	r20, 0x7F	; 127
    2886:	57 e4       	ldi	r21, 0x47	; 71
    2888:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    288c:	18 16       	cp	r1, r24
    288e:	4c f5       	brge	.+82     	; 0x28e2 <xbee_sendString+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2890:	69 8d       	ldd	r22, Y+25	; 0x19
    2892:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e2       	ldi	r20, 0x20	; 32
    289e:	51 e4       	ldi	r21, 0x41	; 65
    28a0:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	bc 01       	movw	r22, r24
    28aa:	cd 01       	movw	r24, r26
    28ac:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
    28b8:	0f c0       	rjmp	.+30     	; 0x28d8 <xbee_sendString+0x1d8>
    28ba:	84 e1       	ldi	r24, 0x14	; 20
    28bc:	91 e0       	ldi	r25, 0x01	; 1
    28be:	9a 8b       	std	Y+18, r25	; 0x12
    28c0:	89 8b       	std	Y+17, r24	; 0x11
    28c2:	89 89       	ldd	r24, Y+17	; 0x11
    28c4:	9a 89       	ldd	r25, Y+18	; 0x12
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <xbee_sendString+0x1c6>
    28ca:	9a 8b       	std	Y+18, r25	; 0x12
    28cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ce:	8b 89       	ldd	r24, Y+19	; 0x13
    28d0:	9c 89       	ldd	r25, Y+20	; 0x14
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	9c 8b       	std	Y+20, r25	; 0x14
    28d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d8:	8b 89       	ldd	r24, Y+19	; 0x13
    28da:	9c 89       	ldd	r25, Y+20	; 0x14
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	69 f7       	brne	.-38     	; 0x28ba <xbee_sendString+0x1ba>
    28e0:	14 c0       	rjmp	.+40     	; 0x290a <xbee_sendString+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e2:	6d 89       	ldd	r22, Y+21	; 0x15
    28e4:	7e 89       	ldd	r23, Y+22	; 0x16
    28e6:	8f 89       	ldd	r24, Y+23	; 0x17
    28e8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ea:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9c 8b       	std	Y+20, r25	; 0x14
    28f4:	8b 8b       	std	Y+19, r24	; 0x13
    28f6:	8b 89       	ldd	r24, Y+19	; 0x13
    28f8:	9c 89       	ldd	r25, Y+20	; 0x14
    28fa:	98 8b       	std	Y+16, r25	; 0x10
    28fc:	8f 87       	std	Y+15, r24	; 0x0f
    28fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2900:	98 89       	ldd	r25, Y+16	; 0x10
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	f1 f7       	brne	.-4      	; 0x2902 <xbee_sendString+0x202>
    2906:	98 8b       	std	Y+16, r25	; 0x10
    2908:	8f 87       	std	Y+15, r24	; 0x0f
{	
	cli();
	int i;
	UDR0='#';
	_delay_ms(1);
	for(i=0;i<strlngt;i++)
    290a:	8b a5       	ldd	r24, Y+43	; 0x2b
    290c:	9c a5       	ldd	r25, Y+44	; 0x2c
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	9c a7       	std	Y+44, r25	; 0x2c
    2912:	8b a7       	std	Y+43, r24	; 0x2b
    2914:	2b a5       	ldd	r18, Y+43	; 0x2b
    2916:	3c a5       	ldd	r19, Y+44	; 0x2c
    2918:	8f a5       	ldd	r24, Y+47	; 0x2f
    291a:	98 a9       	ldd	r25, Y+48	; 0x30
    291c:	28 17       	cp	r18, r24
    291e:	39 07       	cpc	r19, r25
    2920:	0c f4       	brge	.+2      	; 0x2924 <xbee_sendString+0x224>
    2922:	76 cf       	rjmp	.-276    	; 0x2810 <xbee_sendString+0x110>
	{
		UDR0=str[i];
		_delay_ms(1);
	}
	UDR0='#';
    2924:	e6 ec       	ldi	r30, 0xC6	; 198
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	83 e2       	ldi	r24, 0x23	; 35
    292a:	80 83       	st	Z, r24
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	a0 e8       	ldi	r26, 0x80	; 128
    2932:	bf e3       	ldi	r27, 0x3F	; 63
    2934:	8b 87       	std	Y+11, r24	; 0x0b
    2936:	9c 87       	std	Y+12, r25	; 0x0c
    2938:	ad 87       	std	Y+13, r26	; 0x0d
    293a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293c:	6b 85       	ldd	r22, Y+11	; 0x0b
    293e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2940:	8d 85       	ldd	r24, Y+13	; 0x0d
    2942:	9e 85       	ldd	r25, Y+14	; 0x0e
    2944:	2d ec       	ldi	r18, 0xCD	; 205
    2946:	3c ec       	ldi	r19, 0xCC	; 204
    2948:	4c e2       	ldi	r20, 0x2C	; 44
    294a:	55 e4       	ldi	r21, 0x45	; 69
    294c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	8f 83       	std	Y+7, r24	; 0x07
    2956:	98 87       	std	Y+8, r25	; 0x08
    2958:	a9 87       	std	Y+9, r26	; 0x09
    295a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    295c:	6f 81       	ldd	r22, Y+7	; 0x07
    295e:	78 85       	ldd	r23, Y+8	; 0x08
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	9a 85       	ldd	r25, Y+10	; 0x0a
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	2c f4       	brge	.+10     	; 0x297e <xbee_sendString+0x27e>
		__ticks = 1;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9e 83       	std	Y+6, r25	; 0x06
    297a:	8d 83       	std	Y+5, r24	; 0x05
    297c:	3f c0       	rjmp	.+126    	; 0x29fc <xbee_sendString+0x2fc>
	else if (__tmp > 65535)
    297e:	6f 81       	ldd	r22, Y+7	; 0x07
    2980:	78 85       	ldd	r23, Y+8	; 0x08
    2982:	89 85       	ldd	r24, Y+9	; 0x09
    2984:	9a 85       	ldd	r25, Y+10	; 0x0a
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	4f e7       	ldi	r20, 0x7F	; 127
    298c:	57 e4       	ldi	r21, 0x47	; 71
    298e:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    2992:	18 16       	cp	r1, r24
    2994:	4c f5       	brge	.+82     	; 0x29e8 <xbee_sendString+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	6b 85       	ldd	r22, Y+11	; 0x0b
    2998:	7c 85       	ldd	r23, Y+12	; 0x0c
    299a:	8d 85       	ldd	r24, Y+13	; 0x0d
    299c:	9e 85       	ldd	r25, Y+14	; 0x0e
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e2       	ldi	r20, 0x20	; 32
    29a4:	51 e4       	ldi	r21, 0x41	; 65
    29a6:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
    29be:	0f c0       	rjmp	.+30     	; 0x29de <xbee_sendString+0x2de>
    29c0:	84 e1       	ldi	r24, 0x14	; 20
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	9c 83       	std	Y+4, r25	; 0x04
    29c6:	8b 83       	std	Y+3, r24	; 0x03
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	9c 81       	ldd	r25, Y+4	; 0x04
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <xbee_sendString+0x2cc>
    29d0:	9c 83       	std	Y+4, r25	; 0x04
    29d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	9e 81       	ldd	r25, Y+6	; 0x06
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	9e 83       	std	Y+6, r25	; 0x06
    29dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29de:	8d 81       	ldd	r24, Y+5	; 0x05
    29e0:	9e 81       	ldd	r25, Y+6	; 0x06
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	69 f7       	brne	.-38     	; 0x29c0 <xbee_sendString+0x2c0>
    29e6:	14 c0       	rjmp	.+40     	; 0x2a10 <xbee_sendString+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ea:	78 85       	ldd	r23, Y+8	; 0x08
    29ec:	89 85       	ldd	r24, Y+9	; 0x09
    29ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f0:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9e 83       	std	Y+6, r25	; 0x06
    29fa:	8d 83       	std	Y+5, r24	; 0x05
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	9a 81       	ldd	r25, Y+2	; 0x02
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <xbee_sendString+0x308>
    2a0c:	9a 83       	std	Y+2, r25	; 0x02
    2a0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	sei();
    2a10:	78 94       	sei
}
    2a12:	e0 96       	adiw	r28, 0x30	; 48
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <senddroppedsig>:

void senddroppedsig()
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	2a 97       	sbiw	r28, 0x0a	; 10
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	str[0] = 'g';
    2a38:	87 e6       	ldi	r24, 0x67	; 103
    2a3a:	89 83       	std	Y+1, r24	; 0x01
	str[1] = myid;
    2a3c:	80 91 40 02 	lds	r24, 0x0240
    2a40:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '.';
    2a42:	8e e2       	ldi	r24, 0x2E	; 46
    2a44:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = '*'; //for dropped
    2a46:	8a e2       	ldi	r24, 0x2A	; 42
    2a48:	8c 83       	std	Y+4, r24	; 0x04
	str[4] = '\0';
    2a4a:	1d 82       	std	Y+5, r1	; 0x05
	xbee_sendString(str,4);
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	64 e0       	ldi	r22, 0x04	; 4
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	0e 94 80 13 	call	0x2700	; 0x2700 <xbee_sendString>
}
    2a58:	2a 96       	adiw	r28, 0x0a	; 10
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <comintersection>:

//protocol : gbot :#g srcid/destid.data#
void comintersection()
{
    2a6a:	df 93       	push	r29
    2a6c:	cf 93       	push	r28
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	2a 97       	sbiw	r28, 0x0a	; 10
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	str[0] = 'g';
    2a7e:	87 e6       	ldi	r24, 0x67	; 103
    2a80:	89 83       	std	Y+1, r24	; 0x01
	str[1] = myid;
    2a82:	80 91 40 02 	lds	r24, 0x0240
    2a86:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '.';
    2a88:	8e e2       	ldi	r24, 0x2E	; 46
    2a8a:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = '\0';
    2a8c:	1c 82       	std	Y+4, r1	; 0x04
	xbee_sendString(str,3);
    2a8e:	ce 01       	movw	r24, r28
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	63 e0       	ldi	r22, 0x03	; 3
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	0e 94 80 13 	call	0x2700	; 0x2700 <xbee_sendString>

}
    2a9a:	2a 96       	adiw	r28, 0x0a	; 10
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <__vector_54>:
	lcd_string("Inter Done");
	sei();
}
*/
SIGNAL(SIG_USART3_RECV) 		// ISR for receive complete interrupt
{
    2aac:	1f 92       	push	r1
    2aae:	0f 92       	push	r0
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	0f 92       	push	r0
    2ab4:	00 90 5b 00 	lds	r0, 0x005B
    2ab8:	0f 92       	push	r0
    2aba:	11 24       	eor	r1, r1
    2abc:	2f 93       	push	r18
    2abe:	3f 93       	push	r19
    2ac0:	4f 93       	push	r20
    2ac2:	5f 93       	push	r21
    2ac4:	6f 93       	push	r22
    2ac6:	7f 93       	push	r23
    2ac8:	8f 93       	push	r24
    2aca:	9f 93       	push	r25
    2acc:	af 93       	push	r26
    2ace:	bf 93       	push	r27
    2ad0:	ef 93       	push	r30
    2ad2:	ff 93       	push	r31
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	0f 92       	push	r0
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
	cli();
    2ade:	f8 94       	cli
	char mytemp = UDR3;
    2ae0:	e6 e3       	ldi	r30, 0x36	; 54
    2ae2:	f1 e0       	ldi	r31, 0x01	; 1
    2ae4:	80 81       	ld	r24, Z
    2ae6:	89 83       	std	Y+1, r24	; 0x01
	lcd_cursor(2,1);		
    2ae8:	82 e0       	ldi	r24, 0x02	; 2
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
	lcd_string("Reading...");	
    2af0:	81 e4       	ldi	r24, 0x41	; 65
    2af2:	92 e0       	ldi	r25, 0x02	; 2
    2af4:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
	if(rfid_count==2)
    2af8:	80 91 9b 03 	lds	r24, 0x039B
    2afc:	90 91 9c 03 	lds	r25, 0x039C
    2b00:	82 30       	cpi	r24, 0x02	; 2
    2b02:	91 05       	cpc	r25, r1
    2b04:	49 f5       	brne	.+82     	; 0x2b58 <__vector_54+0xac>
	{
		if(mytemp !=  '0')
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	80 33       	cpi	r24, 0x30	; 48
    2b0a:	e1 f0       	breq	.+56     	; 0x2b44 <__vector_54+0x98>
		{
			rfidval[rfid_count] = '0';
    2b0c:	80 91 9b 03 	lds	r24, 0x039B
    2b10:	90 91 9c 03 	lds	r25, 0x039C
    2b14:	fc 01       	movw	r30, r24
    2b16:	e2 55       	subi	r30, 0x52	; 82
    2b18:	fc 4f       	sbci	r31, 0xFC	; 252
    2b1a:	80 e3       	ldi	r24, 0x30	; 48
    2b1c:	80 83       	st	Z, r24
			rfid_count++;
    2b1e:	80 91 9b 03 	lds	r24, 0x039B
    2b22:	90 91 9c 03 	lds	r25, 0x039C
    2b26:	01 96       	adiw	r24, 0x01	; 1
    2b28:	90 93 9c 03 	sts	0x039C, r25
    2b2c:	80 93 9b 03 	sts	0x039B, r24
			rfidval[rfid_count] = mytemp;
    2b30:	80 91 9b 03 	lds	r24, 0x039B
    2b34:	90 91 9c 03 	lds	r25, 0x039C
    2b38:	fc 01       	movw	r30, r24
    2b3a:	e2 55       	subi	r30, 0x52	; 82
    2b3c:	fc 4f       	sbci	r31, 0xFC	; 252
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	80 83       	st	Z, r24
    2b42:	13 c0       	rjmp	.+38     	; 0x2b6a <__vector_54+0xbe>
		}
		else
		{
			 rfidval[rfid_count] = mytemp;
    2b44:	80 91 9b 03 	lds	r24, 0x039B
    2b48:	90 91 9c 03 	lds	r25, 0x039C
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	e2 55       	subi	r30, 0x52	; 82
    2b50:	fc 4f       	sbci	r31, 0xFC	; 252
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	80 83       	st	Z, r24
    2b56:	09 c0       	rjmp	.+18     	; 0x2b6a <__vector_54+0xbe>
		}
	}
	else 
	{
		rfidval[rfid_count] = mytemp;	
    2b58:	80 91 9b 03 	lds	r24, 0x039B
    2b5c:	90 91 9c 03 	lds	r25, 0x039C
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 55       	subi	r30, 0x52	; 82
    2b64:	fc 4f       	sbci	r31, 0xFC	; 252
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	80 83       	st	Z, r24
	}
	rfid_count ++;
    2b6a:	80 91 9b 03 	lds	r24, 0x039B
    2b6e:	90 91 9c 03 	lds	r25, 0x039C
    2b72:	01 96       	adiw	r24, 0x01	; 1
    2b74:	90 93 9c 03 	sts	0x039C, r25
    2b78:	80 93 9b 03 	sts	0x039B, r24
	if(rfid_count == 4)
    2b7c:	80 91 9b 03 	lds	r24, 0x039B
    2b80:	90 91 9c 03 	lds	r25, 0x039C
    2b84:	84 30       	cpi	r24, 0x04	; 4
    2b86:	91 05       	cpc	r25, r1
    2b88:	51 f4       	brne	.+20     	; 0x2b9e <__vector_54+0xf2>
	{
		lcd_cursor(2,1);		
    2b8a:	82 e0       	ldi	r24, 0x02	; 2
    2b8c:	61 e0       	ldi	r22, 0x01	; 1
    2b8e:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
		lcd_string("RfidRead");
    2b92:	8c e4       	ldi	r24, 0x4C	; 76
    2b94:	92 e0       	ldi	r25, 0x02	; 2
    2b96:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
		rfidval[4] = '\0';
    2b9a:	10 92 b2 03 	sts	0x03B2, r1
	}
	sei();
    2b9e:	78 94       	sei
}
    2ba0:	0f 90       	pop	r0
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	ff 91       	pop	r31
    2ba8:	ef 91       	pop	r30
    2baa:	bf 91       	pop	r27
    2bac:	af 91       	pop	r26
    2bae:	9f 91       	pop	r25
    2bb0:	8f 91       	pop	r24
    2bb2:	7f 91       	pop	r23
    2bb4:	6f 91       	pop	r22
    2bb6:	5f 91       	pop	r21
    2bb8:	4f 91       	pop	r20
    2bba:	3f 91       	pop	r19
    2bbc:	2f 91       	pop	r18
    2bbe:	0f 90       	pop	r0
    2bc0:	00 92 5b 00 	sts	0x005B, r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	0f 90       	pop	r0
    2bca:	1f 90       	pop	r1
    2bcc:	18 95       	reti

00002bce <clearrfid>:

void clearrfid()
{
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
	rfidval[0]='\0';
    2bd6:	10 92 ae 03 	sts	0x03AE, r1
	rfidval[1]='\0';
    2bda:	10 92 af 03 	sts	0x03AF, r1
	rfidval[2]='\0';
    2bde:	10 92 b0 03 	sts	0x03B0, r1
	rfidval[3]='\0';
    2be2:	10 92 b1 03 	sts	0x03B1, r1
}
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <readrfidtag>:

//protocol : dbot :#g srcid/destid.data#
void readrfidtag()
{
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	69 97       	sbiw	r28, 0x19	; 25
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
	char str[25];
	str[0] = 'g';
    2c00:	87 e6       	ldi	r24, 0x67	; 103
    2c02:	89 83       	std	Y+1, r24	; 0x01
	str[1] = myid;
    2c04:	80 91 40 02 	lds	r24, 0x0240
    2c08:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '.';
    2c0a:	8e e2       	ldi	r24, 0x2E	; 46
    2c0c:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = rfidval[0];
    2c0e:	80 91 ae 03 	lds	r24, 0x03AE
    2c12:	8c 83       	std	Y+4, r24	; 0x04
	str[4] = rfidval[1];
    2c14:	80 91 af 03 	lds	r24, 0x03AF
    2c18:	8d 83       	std	Y+5, r24	; 0x05
	str[5] = rfidval[2];
    2c1a:	80 91 b0 03 	lds	r24, 0x03B0
    2c1e:	8e 83       	std	Y+6, r24	; 0x06
	str[6] = rfidval[3];
    2c20:	80 91 b1 03 	lds	r24, 0x03B1
    2c24:	8f 83       	std	Y+7, r24	; 0x07
	str[7] = '\0';
    2c26:	18 86       	std	Y+8, r1	; 0x08
	rfid_count=0;
    2c28:	10 92 9c 03 	sts	0x039C, r1
    2c2c:	10 92 9b 03 	sts	0x039B, r1
	xbee_sendString(str,7);
    2c30:	ce 01       	movw	r24, r28
    2c32:	01 96       	adiw	r24, 0x01	; 1
    2c34:	67 e0       	ldi	r22, 0x07	; 7
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	0e 94 80 13 	call	0x2700	; 0x2700 <xbee_sendString>
}
    2c3c:	69 96       	adiw	r28, 0x19	; 25
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <arm_motion>:
#include <util/delay.h>
#include <avr/signal.h>
#include <math.h> //included to support power function

void arm_motion(unsigned char dir)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	0f 92       	push	r0
    2c54:	0f 92       	push	r0
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char port_restore = 0;
    2c5c:	19 82       	std	Y+1, r1	; 0x01
	dir &= 0xf0; // removing lower nibbel as it is not needed
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	80 7f       	andi	r24, 0xF0	; 240
    2c62:	8a 83       	std	Y+2, r24	; 0x02
	port_restore = dir;  // adding lower nibbel for direction command and restoring the PORTA status
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	89 83       	std	Y+1, r24	; 0x01
	PORTA = port_restore;  // setting the command to the port
    2c68:	e2 e2       	ldi	r30, 0x22	; 34
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	80 83       	st	Z, r24
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <arm_down>:


void arm_down()
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
	arm_motion(0x80);
    2c82:	80 e8       	ldi	r24, 0x80	; 128
    2c84:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <arm_motion>
}
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <arm_up>:

void arm_up()
{
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
	arm_motion(0x40);
    2c96:	80 e4       	ldi	r24, 0x40	; 64
    2c98:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <arm_motion>
}
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <hold>:

void hold()
{
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
	arm_motion(0x10);
    2caa:	80 e1       	ldi	r24, 0x10	; 16
    2cac:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <arm_motion>
}
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <leave>:

void leave()
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
	arm_motion(0x20);
    2cbe:	80 e2       	ldi	r24, 0x20	; 32
    2cc0:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <arm_motion>
}
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <stop_arm>:

void stop_arm()
{
    2cca:	df 93       	push	r29
    2ccc:	cf 93       	push	r28
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
	arm_motion(0x00);
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <arm_motion>
}
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <go_up>:

void go_up()
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	6c 97       	sbiw	r28, 0x1c	; 28
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
	arm_up();
    2cf2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <arm_up>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 ee       	ldi	r25, 0xE0	; 224
    2cfa:	ab e2       	ldi	r26, 0x2B	; 43
    2cfc:	b5 e4       	ldi	r27, 0x45	; 69
    2cfe:	89 8f       	std	Y+25, r24	; 0x19
    2d00:	9a 8f       	std	Y+26, r25	; 0x1a
    2d02:	ab 8f       	std	Y+27, r26	; 0x1b
    2d04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d06:	69 8d       	ldd	r22, Y+25	; 0x19
    2d08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0e:	2d ec       	ldi	r18, 0xCD	; 205
    2d10:	3c ec       	ldi	r19, 0xCC	; 204
    2d12:	4c e2       	ldi	r20, 0x2C	; 44
    2d14:	55 e4       	ldi	r21, 0x45	; 69
    2d16:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	8d 8b       	std	Y+21, r24	; 0x15
    2d20:	9e 8b       	std	Y+22, r25	; 0x16
    2d22:	af 8b       	std	Y+23, r26	; 0x17
    2d24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d26:	6d 89       	ldd	r22, Y+21	; 0x15
    2d28:	7e 89       	ldd	r23, Y+22	; 0x16
    2d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e8       	ldi	r20, 0x80	; 128
    2d34:	5f e3       	ldi	r21, 0x3F	; 63
    2d36:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    2d3a:	88 23       	and	r24, r24
    2d3c:	2c f4       	brge	.+10     	; 0x2d48 <go_up+0x6a>
		__ticks = 1;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9c 8b       	std	Y+20, r25	; 0x14
    2d44:	8b 8b       	std	Y+19, r24	; 0x13
    2d46:	3f c0       	rjmp	.+126    	; 0x2dc6 <go_up+0xe8>
	else if (__tmp > 65535)
    2d48:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	3f ef       	ldi	r19, 0xFF	; 255
    2d54:	4f e7       	ldi	r20, 0x7F	; 127
    2d56:	57 e4       	ldi	r21, 0x47	; 71
    2d58:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    2d5c:	18 16       	cp	r1, r24
    2d5e:	4c f5       	brge	.+82     	; 0x2db2 <go_up+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d60:	69 8d       	ldd	r22, Y+25	; 0x19
    2d62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e2       	ldi	r20, 0x20	; 32
    2d6e:	51 e4       	ldi	r21, 0x41	; 65
    2d70:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9c 8b       	std	Y+20, r25	; 0x14
    2d86:	8b 8b       	std	Y+19, r24	; 0x13
    2d88:	0f c0       	rjmp	.+30     	; 0x2da8 <go_up+0xca>
    2d8a:	84 e1       	ldi	r24, 0x14	; 20
    2d8c:	91 e0       	ldi	r25, 0x01	; 1
    2d8e:	9a 8b       	std	Y+18, r25	; 0x12
    2d90:	89 8b       	std	Y+17, r24	; 0x11
    2d92:	89 89       	ldd	r24, Y+17	; 0x11
    2d94:	9a 89       	ldd	r25, Y+18	; 0x12
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <go_up+0xb8>
    2d9a:	9a 8b       	std	Y+18, r25	; 0x12
    2d9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2da0:	9c 89       	ldd	r25, Y+20	; 0x14
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	9c 8b       	std	Y+20, r25	; 0x14
    2da6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da8:	8b 89       	ldd	r24, Y+19	; 0x13
    2daa:	9c 89       	ldd	r25, Y+20	; 0x14
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	69 f7       	brne	.-38     	; 0x2d8a <go_up+0xac>
    2db0:	14 c0       	rjmp	.+40     	; 0x2dda <go_up+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db2:	6d 89       	ldd	r22, Y+21	; 0x15
    2db4:	7e 89       	ldd	r23, Y+22	; 0x16
    2db6:	8f 89       	ldd	r24, Y+23	; 0x17
    2db8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dba:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	9c 8b       	std	Y+20, r25	; 0x14
    2dc4:	8b 8b       	std	Y+19, r24	; 0x13
    2dc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dca:	98 8b       	std	Y+16, r25	; 0x10
    2dcc:	8f 87       	std	Y+15, r24	; 0x0f
    2dce:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd0:	98 89       	ldd	r25, Y+16	; 0x10
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <go_up+0xf4>
    2dd6:	98 8b       	std	Y+16, r25	; 0x10
    2dd8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2750);
    stop_arm();
    2dda:	0e 94 65 16 	call	0x2cca	; 0x2cca <stop_arm>
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	aa ef       	ldi	r26, 0xFA	; 250
    2de4:	b4 e4       	ldi	r27, 0x44	; 68
    2de6:	8b 87       	std	Y+11, r24	; 0x0b
    2de8:	9c 87       	std	Y+12, r25	; 0x0c
    2dea:	ad 87       	std	Y+13, r26	; 0x0d
    2dec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df6:	2d ec       	ldi	r18, 0xCD	; 205
    2df8:	3c ec       	ldi	r19, 0xCC	; 204
    2dfa:	4c e2       	ldi	r20, 0x2C	; 44
    2dfc:	55 e4       	ldi	r21, 0x45	; 69
    2dfe:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	8f 83       	std	Y+7, r24	; 0x07
    2e08:	98 87       	std	Y+8, r25	; 0x08
    2e0a:	a9 87       	std	Y+9, r26	; 0x09
    2e0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e10:	78 85       	ldd	r23, Y+8	; 0x08
    2e12:	89 85       	ldd	r24, Y+9	; 0x09
    2e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e8       	ldi	r20, 0x80	; 128
    2e1c:	5f e3       	ldi	r21, 0x3F	; 63
    2e1e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    2e22:	88 23       	and	r24, r24
    2e24:	2c f4       	brge	.+10     	; 0x2e30 <go_up+0x152>
		__ticks = 1;
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	9e 83       	std	Y+6, r25	; 0x06
    2e2c:	8d 83       	std	Y+5, r24	; 0x05
    2e2e:	3f c0       	rjmp	.+126    	; 0x2eae <go_up+0x1d0>
	else if (__tmp > 65535)
    2e30:	6f 81       	ldd	r22, Y+7	; 0x07
    2e32:	78 85       	ldd	r23, Y+8	; 0x08
    2e34:	89 85       	ldd	r24, Y+9	; 0x09
    2e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	3f ef       	ldi	r19, 0xFF	; 255
    2e3c:	4f e7       	ldi	r20, 0x7F	; 127
    2e3e:	57 e4       	ldi	r21, 0x47	; 71
    2e40:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    2e44:	18 16       	cp	r1, r24
    2e46:	4c f5       	brge	.+82     	; 0x2e9a <go_up+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e2       	ldi	r20, 0x20	; 32
    2e56:	51 e4       	ldi	r21, 0x41	; 65
    2e58:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	bc 01       	movw	r22, r24
    2e62:	cd 01       	movw	r24, r26
    2e64:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	9e 83       	std	Y+6, r25	; 0x06
    2e6e:	8d 83       	std	Y+5, r24	; 0x05
    2e70:	0f c0       	rjmp	.+30     	; 0x2e90 <go_up+0x1b2>
    2e72:	84 e1       	ldi	r24, 0x14	; 20
    2e74:	91 e0       	ldi	r25, 0x01	; 1
    2e76:	9c 83       	std	Y+4, r25	; 0x04
    2e78:	8b 83       	std	Y+3, r24	; 0x03
    2e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	f1 f7       	brne	.-4      	; 0x2e7e <go_up+0x1a0>
    2e82:	9c 83       	std	Y+4, r25	; 0x04
    2e84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e86:	8d 81       	ldd	r24, Y+5	; 0x05
    2e88:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	9e 83       	std	Y+6, r25	; 0x06
    2e8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e90:	8d 81       	ldd	r24, Y+5	; 0x05
    2e92:	9e 81       	ldd	r25, Y+6	; 0x06
    2e94:	00 97       	sbiw	r24, 0x00	; 0
    2e96:	69 f7       	brne	.-38     	; 0x2e72 <go_up+0x194>
    2e98:	14 c0       	rjmp	.+40     	; 0x2ec2 <go_up+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9c:	78 85       	ldd	r23, Y+8	; 0x08
    2e9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9e 83       	std	Y+6, r25	; 0x06
    2eac:	8d 83       	std	Y+5, r24	; 0x05
    2eae:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb2:	9a 83       	std	Y+2, r25	; 0x02
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	f1 f7       	brne	.-4      	; 0x2eba <go_up+0x1dc>
    2ebe:	9a 83       	std	Y+2, r25	; 0x02
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2000);
}
    2ec2:	6c 96       	adiw	r28, 0x1c	; 28
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	08 95       	ret

00002ed4 <go_down>:

void go_down()
{
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	6c 97       	sbiw	r28, 0x1c	; 28
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
	arm_down();
    2ee8:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <arm_down>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e2       	ldi	r25, 0x20	; 32
    2ef0:	a9 e1       	ldi	r26, 0x19	; 25
    2ef2:	b5 e4       	ldi	r27, 0x45	; 69
    2ef4:	89 8f       	std	Y+25, r24	; 0x19
    2ef6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ef8:	ab 8f       	std	Y+27, r26	; 0x1b
    2efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efc:	69 8d       	ldd	r22, Y+25	; 0x19
    2efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f04:	2d ec       	ldi	r18, 0xCD	; 205
    2f06:	3c ec       	ldi	r19, 0xCC	; 204
    2f08:	4c e2       	ldi	r20, 0x2C	; 44
    2f0a:	55 e4       	ldi	r21, 0x45	; 69
    2f0c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	8d 8b       	std	Y+21, r24	; 0x15
    2f16:	9e 8b       	std	Y+22, r25	; 0x16
    2f18:	af 8b       	std	Y+23, r26	; 0x17
    2f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f20:	8f 89       	ldd	r24, Y+23	; 0x17
    2f22:	98 8d       	ldd	r25, Y+24	; 0x18
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e8       	ldi	r20, 0x80	; 128
    2f2a:	5f e3       	ldi	r21, 0x3F	; 63
    2f2c:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    2f30:	88 23       	and	r24, r24
    2f32:	2c f4       	brge	.+10     	; 0x2f3e <go_down+0x6a>
		__ticks = 1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	9c 8b       	std	Y+20, r25	; 0x14
    2f3a:	8b 8b       	std	Y+19, r24	; 0x13
    2f3c:	3f c0       	rjmp	.+126    	; 0x2fbc <go_down+0xe8>
	else if (__tmp > 65535)
    2f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f40:	7e 89       	ldd	r23, Y+22	; 0x16
    2f42:	8f 89       	ldd	r24, Y+23	; 0x17
    2f44:	98 8d       	ldd	r25, Y+24	; 0x18
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f ef       	ldi	r19, 0xFF	; 255
    2f4a:	4f e7       	ldi	r20, 0x7F	; 127
    2f4c:	57 e4       	ldi	r21, 0x47	; 71
    2f4e:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	4c f5       	brge	.+82     	; 0x2fa8 <go_down+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f56:	69 8d       	ldd	r22, Y+25	; 0x19
    2f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e2       	ldi	r20, 0x20	; 32
    2f64:	51 e4       	ldi	r21, 0x41	; 65
    2f66:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	9c 8b       	std	Y+20, r25	; 0x14
    2f7c:	8b 8b       	std	Y+19, r24	; 0x13
    2f7e:	0f c0       	rjmp	.+30     	; 0x2f9e <go_down+0xca>
    2f80:	84 e1       	ldi	r24, 0x14	; 20
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	9a 8b       	std	Y+18, r25	; 0x12
    2f86:	89 8b       	std	Y+17, r24	; 0x11
    2f88:	89 89       	ldd	r24, Y+17	; 0x11
    2f8a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <go_down+0xb8>
    2f90:	9a 8b       	std	Y+18, r25	; 0x12
    2f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f94:	8b 89       	ldd	r24, Y+19	; 0x13
    2f96:	9c 89       	ldd	r25, Y+20	; 0x14
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	9c 8b       	std	Y+20, r25	; 0x14
    2f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <go_down+0xac>
    2fa6:	14 c0       	rjmp	.+40     	; 0x2fd0 <go_down+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    2faa:	7e 89       	ldd	r23, Y+22	; 0x16
    2fac:	8f 89       	ldd	r24, Y+23	; 0x17
    2fae:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb0:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9c 8b       	std	Y+20, r25	; 0x14
    2fba:	8b 8b       	std	Y+19, r24	; 0x13
    2fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc0:	98 8b       	std	Y+16, r25	; 0x10
    2fc2:	8f 87       	std	Y+15, r24	; 0x0f
    2fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc6:	98 89       	ldd	r25, Y+16	; 0x10
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <go_down+0xf4>
    2fcc:	98 8b       	std	Y+16, r25	; 0x10
    2fce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2450);
	stop_arm();
    2fd0:	0e 94 65 16 	call	0x2cca	; 0x2cca <stop_arm>
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	aa ef       	ldi	r26, 0xFA	; 250
    2fda:	b4 e4       	ldi	r27, 0x44	; 68
    2fdc:	8b 87       	std	Y+11, r24	; 0x0b
    2fde:	9c 87       	std	Y+12, r25	; 0x0c
    2fe0:	ad 87       	std	Y+13, r26	; 0x0d
    2fe2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fec:	2d ec       	ldi	r18, 0xCD	; 205
    2fee:	3c ec       	ldi	r19, 0xCC	; 204
    2ff0:	4c e2       	ldi	r20, 0x2C	; 44
    2ff2:	55 e4       	ldi	r21, 0x45	; 69
    2ff4:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	8f 83       	std	Y+7, r24	; 0x07
    2ffe:	98 87       	std	Y+8, r25	; 0x08
    3000:	a9 87       	std	Y+9, r26	; 0x09
    3002:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3004:	6f 81       	ldd	r22, Y+7	; 0x07
    3006:	78 85       	ldd	r23, Y+8	; 0x08
    3008:	89 85       	ldd	r24, Y+9	; 0x09
    300a:	9a 85       	ldd	r25, Y+10	; 0x0a
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e8       	ldi	r20, 0x80	; 128
    3012:	5f e3       	ldi	r21, 0x3F	; 63
    3014:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    3018:	88 23       	and	r24, r24
    301a:	2c f4       	brge	.+10     	; 0x3026 <go_down+0x152>
		__ticks = 1;
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	8d 83       	std	Y+5, r24	; 0x05
    3024:	3f c0       	rjmp	.+126    	; 0x30a4 <go_down+0x1d0>
	else if (__tmp > 65535)
    3026:	6f 81       	ldd	r22, Y+7	; 0x07
    3028:	78 85       	ldd	r23, Y+8	; 0x08
    302a:	89 85       	ldd	r24, Y+9	; 0x09
    302c:	9a 85       	ldd	r25, Y+10	; 0x0a
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	3f ef       	ldi	r19, 0xFF	; 255
    3032:	4f e7       	ldi	r20, 0x7F	; 127
    3034:	57 e4       	ldi	r21, 0x47	; 71
    3036:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    303a:	18 16       	cp	r1, r24
    303c:	4c f5       	brge	.+82     	; 0x3090 <go_down+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3040:	7c 85       	ldd	r23, Y+12	; 0x0c
    3042:	8d 85       	ldd	r24, Y+13	; 0x0d
    3044:	9e 85       	ldd	r25, Y+14	; 0x0e
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e2       	ldi	r20, 0x20	; 32
    304c:	51 e4       	ldi	r21, 0x41	; 65
    304e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	bc 01       	movw	r22, r24
    3058:	cd 01       	movw	r24, r26
    305a:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	9e 83       	std	Y+6, r25	; 0x06
    3064:	8d 83       	std	Y+5, r24	; 0x05
    3066:	0f c0       	rjmp	.+30     	; 0x3086 <go_down+0x1b2>
    3068:	84 e1       	ldi	r24, 0x14	; 20
    306a:	91 e0       	ldi	r25, 0x01	; 1
    306c:	9c 83       	std	Y+4, r25	; 0x04
    306e:	8b 83       	std	Y+3, r24	; 0x03
    3070:	8b 81       	ldd	r24, Y+3	; 0x03
    3072:	9c 81       	ldd	r25, Y+4	; 0x04
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <go_down+0x1a0>
    3078:	9c 83       	std	Y+4, r25	; 0x04
    307a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307c:	8d 81       	ldd	r24, Y+5	; 0x05
    307e:	9e 81       	ldd	r25, Y+6	; 0x06
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	9e 83       	std	Y+6, r25	; 0x06
    3084:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3086:	8d 81       	ldd	r24, Y+5	; 0x05
    3088:	9e 81       	ldd	r25, Y+6	; 0x06
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	69 f7       	brne	.-38     	; 0x3068 <go_down+0x194>
    308e:	14 c0       	rjmp	.+40     	; 0x30b8 <go_down+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3090:	6f 81       	ldd	r22, Y+7	; 0x07
    3092:	78 85       	ldd	r23, Y+8	; 0x08
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	9e 83       	std	Y+6, r25	; 0x06
    30a2:	8d 83       	std	Y+5, r24	; 0x05
    30a4:	8d 81       	ldd	r24, Y+5	; 0x05
    30a6:	9e 81       	ldd	r25, Y+6	; 0x06
    30a8:	9a 83       	std	Y+2, r25	; 0x02
    30aa:	89 83       	std	Y+1, r24	; 0x01
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	f1 f7       	brne	.-4      	; 0x30b0 <go_down+0x1dc>
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
    30b8:	6c 96       	adiw	r28, 0x1c	; 28
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	08 95       	ret

000030ca <grab>:

void grab()
{
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	6c 97       	sbiw	r28, 0x1c	; 28
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
	 hold();
    30de:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <hold>
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	a8 ec       	ldi	r26, 0xC8	; 200
    30e8:	b4 e4       	ldi	r27, 0x44	; 68
    30ea:	89 8f       	std	Y+25, r24	; 0x19
    30ec:	9a 8f       	std	Y+26, r25	; 0x1a
    30ee:	ab 8f       	std	Y+27, r26	; 0x1b
    30f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f2:	69 8d       	ldd	r22, Y+25	; 0x19
    30f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30fa:	2d ec       	ldi	r18, 0xCD	; 205
    30fc:	3c ec       	ldi	r19, 0xCC	; 204
    30fe:	4c e2       	ldi	r20, 0x2C	; 44
    3100:	55 e4       	ldi	r21, 0x45	; 69
    3102:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	8d 8b       	std	Y+21, r24	; 0x15
    310c:	9e 8b       	std	Y+22, r25	; 0x16
    310e:	af 8b       	std	Y+23, r26	; 0x17
    3110:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3112:	6d 89       	ldd	r22, Y+21	; 0x15
    3114:	7e 89       	ldd	r23, Y+22	; 0x16
    3116:	8f 89       	ldd	r24, Y+23	; 0x17
    3118:	98 8d       	ldd	r25, Y+24	; 0x18
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e8       	ldi	r20, 0x80	; 128
    3120:	5f e3       	ldi	r21, 0x3F	; 63
    3122:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    3126:	88 23       	and	r24, r24
    3128:	2c f4       	brge	.+10     	; 0x3134 <grab+0x6a>
		__ticks = 1;
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	9c 8b       	std	Y+20, r25	; 0x14
    3130:	8b 8b       	std	Y+19, r24	; 0x13
    3132:	3f c0       	rjmp	.+126    	; 0x31b2 <grab+0xe8>
	else if (__tmp > 65535)
    3134:	6d 89       	ldd	r22, Y+21	; 0x15
    3136:	7e 89       	ldd	r23, Y+22	; 0x16
    3138:	8f 89       	ldd	r24, Y+23	; 0x17
    313a:	98 8d       	ldd	r25, Y+24	; 0x18
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	3f ef       	ldi	r19, 0xFF	; 255
    3140:	4f e7       	ldi	r20, 0x7F	; 127
    3142:	57 e4       	ldi	r21, 0x47	; 71
    3144:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    3148:	18 16       	cp	r1, r24
    314a:	4c f5       	brge	.+82     	; 0x319e <grab+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314c:	69 8d       	ldd	r22, Y+25	; 0x19
    314e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e2       	ldi	r20, 0x20	; 32
    315a:	51 e4       	ldi	r21, 0x41	; 65
    315c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	bc 01       	movw	r22, r24
    3166:	cd 01       	movw	r24, r26
    3168:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	9c 8b       	std	Y+20, r25	; 0x14
    3172:	8b 8b       	std	Y+19, r24	; 0x13
    3174:	0f c0       	rjmp	.+30     	; 0x3194 <grab+0xca>
    3176:	84 e1       	ldi	r24, 0x14	; 20
    3178:	91 e0       	ldi	r25, 0x01	; 1
    317a:	9a 8b       	std	Y+18, r25	; 0x12
    317c:	89 8b       	std	Y+17, r24	; 0x11
    317e:	89 89       	ldd	r24, Y+17	; 0x11
    3180:	9a 89       	ldd	r25, Y+18	; 0x12
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	f1 f7       	brne	.-4      	; 0x3182 <grab+0xb8>
    3186:	9a 8b       	std	Y+18, r25	; 0x12
    3188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318a:	8b 89       	ldd	r24, Y+19	; 0x13
    318c:	9c 89       	ldd	r25, Y+20	; 0x14
    318e:	01 97       	sbiw	r24, 0x01	; 1
    3190:	9c 8b       	std	Y+20, r25	; 0x14
    3192:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3194:	8b 89       	ldd	r24, Y+19	; 0x13
    3196:	9c 89       	ldd	r25, Y+20	; 0x14
    3198:	00 97       	sbiw	r24, 0x00	; 0
    319a:	69 f7       	brne	.-38     	; 0x3176 <grab+0xac>
    319c:	14 c0       	rjmp	.+40     	; 0x31c6 <grab+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    319e:	6d 89       	ldd	r22, Y+21	; 0x15
    31a0:	7e 89       	ldd	r23, Y+22	; 0x16
    31a2:	8f 89       	ldd	r24, Y+23	; 0x17
    31a4:	98 8d       	ldd	r25, Y+24	; 0x18
    31a6:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	9c 8b       	std	Y+20, r25	; 0x14
    31b0:	8b 8b       	std	Y+19, r24	; 0x13
    31b2:	8b 89       	ldd	r24, Y+19	; 0x13
    31b4:	9c 89       	ldd	r25, Y+20	; 0x14
    31b6:	98 8b       	std	Y+16, r25	; 0x10
    31b8:	8f 87       	std	Y+15, r24	; 0x0f
    31ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    31bc:	98 89       	ldd	r25, Y+16	; 0x10
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	f1 f7       	brne	.-4      	; 0x31be <grab+0xf4>
    31c2:	98 8b       	std	Y+16, r25	; 0x10
    31c4:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1600);
    stop_arm();
    31c6:	0e 94 65 16 	call	0x2cca	; 0x2cca <stop_arm>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	aa ef       	ldi	r26, 0xFA	; 250
    31d0:	b4 e4       	ldi	r27, 0x44	; 68
    31d2:	8b 87       	std	Y+11, r24	; 0x0b
    31d4:	9c 87       	std	Y+12, r25	; 0x0c
    31d6:	ad 87       	std	Y+13, r26	; 0x0d
    31d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31da:	6b 85       	ldd	r22, Y+11	; 0x0b
    31dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31de:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e2:	2d ec       	ldi	r18, 0xCD	; 205
    31e4:	3c ec       	ldi	r19, 0xCC	; 204
    31e6:	4c e2       	ldi	r20, 0x2C	; 44
    31e8:	55 e4       	ldi	r21, 0x45	; 69
    31ea:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	8f 83       	std	Y+7, r24	; 0x07
    31f4:	98 87       	std	Y+8, r25	; 0x08
    31f6:	a9 87       	std	Y+9, r26	; 0x09
    31f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31fa:	6f 81       	ldd	r22, Y+7	; 0x07
    31fc:	78 85       	ldd	r23, Y+8	; 0x08
    31fe:	89 85       	ldd	r24, Y+9	; 0x09
    3200:	9a 85       	ldd	r25, Y+10	; 0x0a
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <grab+0x152>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9e 83       	std	Y+6, r25	; 0x06
    3218:	8d 83       	std	Y+5, r24	; 0x05
    321a:	3f c0       	rjmp	.+126    	; 0x329a <grab+0x1d0>
	else if (__tmp > 65535)
    321c:	6f 81       	ldd	r22, Y+7	; 0x07
    321e:	78 85       	ldd	r23, Y+8	; 0x08
    3220:	89 85       	ldd	r24, Y+9	; 0x09
    3222:	9a 85       	ldd	r25, Y+10	; 0x0a
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	4c f5       	brge	.+82     	; 0x3286 <grab+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3234:	6b 85       	ldd	r22, Y+11	; 0x0b
    3236:	7c 85       	ldd	r23, Y+12	; 0x0c
    3238:	8d 85       	ldd	r24, Y+13	; 0x0d
    323a:	9e 85       	ldd	r25, Y+14	; 0x0e
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	51 e4       	ldi	r21, 0x41	; 65
    3244:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9e 83       	std	Y+6, r25	; 0x06
    325a:	8d 83       	std	Y+5, r24	; 0x05
    325c:	0f c0       	rjmp	.+30     	; 0x327c <grab+0x1b2>
    325e:	84 e1       	ldi	r24, 0x14	; 20
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	9c 83       	std	Y+4, r25	; 0x04
    3264:	8b 83       	std	Y+3, r24	; 0x03
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	9c 81       	ldd	r25, Y+4	; 0x04
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <grab+0x1a0>
    326e:	9c 83       	std	Y+4, r25	; 0x04
    3270:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	8d 81       	ldd	r24, Y+5	; 0x05
    3274:	9e 81       	ldd	r25, Y+6	; 0x06
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9e 83       	std	Y+6, r25	; 0x06
    327a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327c:	8d 81       	ldd	r24, Y+5	; 0x05
    327e:	9e 81       	ldd	r25, Y+6	; 0x06
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	69 f7       	brne	.-38     	; 0x325e <grab+0x194>
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <grab+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	6f 81       	ldd	r22, Y+7	; 0x07
    3288:	78 85       	ldd	r23, Y+8	; 0x08
    328a:	89 85       	ldd	r24, Y+9	; 0x09
    328c:	9a 85       	ldd	r25, Y+10	; 0x0a
    328e:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	9e 81       	ldd	r25, Y+6	; 0x06
    329e:	9a 83       	std	Y+2, r25	; 0x02
    32a0:	89 83       	std	Y+1, r24	; 0x01
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	9a 81       	ldd	r25, Y+2	; 0x02
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <grab+0x1dc>
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2000);
}
    32ae:	6c 96       	adiw	r28, 0x1c	; 28
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	cf 91       	pop	r28
    32bc:	df 91       	pop	r29
    32be:	08 95       	ret

000032c0 <release>:

void release()
{
    32c0:	df 93       	push	r29
    32c2:	cf 93       	push	r28
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	6c 97       	sbiw	r28, 0x1c	; 28
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
	leave();
    32d4:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <leave>
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	a8 ec       	ldi	r26, 0xC8	; 200
    32de:	b4 e4       	ldi	r27, 0x44	; 68
    32e0:	89 8f       	std	Y+25, r24	; 0x19
    32e2:	9a 8f       	std	Y+26, r25	; 0x1a
    32e4:	ab 8f       	std	Y+27, r26	; 0x1b
    32e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e8:	69 8d       	ldd	r22, Y+25	; 0x19
    32ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32f0:	2d ec       	ldi	r18, 0xCD	; 205
    32f2:	3c ec       	ldi	r19, 0xCC	; 204
    32f4:	4c e2       	ldi	r20, 0x2C	; 44
    32f6:	55 e4       	ldi	r21, 0x45	; 69
    32f8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	8d 8b       	std	Y+21, r24	; 0x15
    3302:	9e 8b       	std	Y+22, r25	; 0x16
    3304:	af 8b       	std	Y+23, r26	; 0x17
    3306:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3308:	6d 89       	ldd	r22, Y+21	; 0x15
    330a:	7e 89       	ldd	r23, Y+22	; 0x16
    330c:	8f 89       	ldd	r24, Y+23	; 0x17
    330e:	98 8d       	ldd	r25, Y+24	; 0x18
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e8       	ldi	r20, 0x80	; 128
    3316:	5f e3       	ldi	r21, 0x3F	; 63
    3318:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    331c:	88 23       	and	r24, r24
    331e:	2c f4       	brge	.+10     	; 0x332a <release+0x6a>
		__ticks = 1;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	9c 8b       	std	Y+20, r25	; 0x14
    3326:	8b 8b       	std	Y+19, r24	; 0x13
    3328:	3f c0       	rjmp	.+126    	; 0x33a8 <release+0xe8>
	else if (__tmp > 65535)
    332a:	6d 89       	ldd	r22, Y+21	; 0x15
    332c:	7e 89       	ldd	r23, Y+22	; 0x16
    332e:	8f 89       	ldd	r24, Y+23	; 0x17
    3330:	98 8d       	ldd	r25, Y+24	; 0x18
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	3f ef       	ldi	r19, 0xFF	; 255
    3336:	4f e7       	ldi	r20, 0x7F	; 127
    3338:	57 e4       	ldi	r21, 0x47	; 71
    333a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    333e:	18 16       	cp	r1, r24
    3340:	4c f5       	brge	.+82     	; 0x3394 <release+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3342:	69 8d       	ldd	r22, Y+25	; 0x19
    3344:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3346:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3348:	9c 8d       	ldd	r25, Y+28	; 0x1c
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e2       	ldi	r20, 0x20	; 32
    3350:	51 e4       	ldi	r21, 0x41	; 65
    3352:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	bc 01       	movw	r22, r24
    335c:	cd 01       	movw	r24, r26
    335e:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	9c 8b       	std	Y+20, r25	; 0x14
    3368:	8b 8b       	std	Y+19, r24	; 0x13
    336a:	0f c0       	rjmp	.+30     	; 0x338a <release+0xca>
    336c:	84 e1       	ldi	r24, 0x14	; 20
    336e:	91 e0       	ldi	r25, 0x01	; 1
    3370:	9a 8b       	std	Y+18, r25	; 0x12
    3372:	89 8b       	std	Y+17, r24	; 0x11
    3374:	89 89       	ldd	r24, Y+17	; 0x11
    3376:	9a 89       	ldd	r25, Y+18	; 0x12
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <release+0xb8>
    337c:	9a 8b       	std	Y+18, r25	; 0x12
    337e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3380:	8b 89       	ldd	r24, Y+19	; 0x13
    3382:	9c 89       	ldd	r25, Y+20	; 0x14
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	9c 8b       	std	Y+20, r25	; 0x14
    3388:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338a:	8b 89       	ldd	r24, Y+19	; 0x13
    338c:	9c 89       	ldd	r25, Y+20	; 0x14
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	69 f7       	brne	.-38     	; 0x336c <release+0xac>
    3392:	14 c0       	rjmp	.+40     	; 0x33bc <release+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3394:	6d 89       	ldd	r22, Y+21	; 0x15
    3396:	7e 89       	ldd	r23, Y+22	; 0x16
    3398:	8f 89       	ldd	r24, Y+23	; 0x17
    339a:	98 8d       	ldd	r25, Y+24	; 0x18
    339c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	9c 8b       	std	Y+20, r25	; 0x14
    33a6:	8b 8b       	std	Y+19, r24	; 0x13
    33a8:	8b 89       	ldd	r24, Y+19	; 0x13
    33aa:	9c 89       	ldd	r25, Y+20	; 0x14
    33ac:	98 8b       	std	Y+16, r25	; 0x10
    33ae:	8f 87       	std	Y+15, r24	; 0x0f
    33b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b2:	98 89       	ldd	r25, Y+16	; 0x10
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	f1 f7       	brne	.-4      	; 0x33b4 <release+0xf4>
    33b8:	98 8b       	std	Y+16, r25	; 0x10
    33ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1600);
	stop();
    33bc:	0e 94 41 02 	call	0x482	; 0x482 <stop>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	aa e7       	ldi	r26, 0x7A	; 122
    33c6:	b4 e4       	ldi	r27, 0x44	; 68
    33c8:	8b 87       	std	Y+11, r24	; 0x0b
    33ca:	9c 87       	std	Y+12, r25	; 0x0c
    33cc:	ad 87       	std	Y+13, r26	; 0x0d
    33ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d8:	2d ec       	ldi	r18, 0xCD	; 205
    33da:	3c ec       	ldi	r19, 0xCC	; 204
    33dc:	4c e2       	ldi	r20, 0x2C	; 44
    33de:	55 e4       	ldi	r21, 0x45	; 69
    33e0:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8f 83       	std	Y+7, r24	; 0x07
    33ea:	98 87       	std	Y+8, r25	; 0x08
    33ec:	a9 87       	std	Y+9, r26	; 0x09
    33ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f0:	6f 81       	ldd	r22, Y+7	; 0x07
    33f2:	78 85       	ldd	r23, Y+8	; 0x08
    33f4:	89 85       	ldd	r24, Y+9	; 0x09
    33f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <release+0x152>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9e 83       	std	Y+6, r25	; 0x06
    340e:	8d 83       	std	Y+5, r24	; 0x05
    3410:	3f c0       	rjmp	.+126    	; 0x3490 <release+0x1d0>
	else if (__tmp > 65535)
    3412:	6f 81       	ldd	r22, Y+7	; 0x07
    3414:	78 85       	ldd	r23, Y+8	; 0x08
    3416:	89 85       	ldd	r24, Y+9	; 0x09
    3418:	9a 85       	ldd	r25, Y+10	; 0x0a
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	4c f5       	brge	.+82     	; 0x347c <release+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342a:	6b 85       	ldd	r22, Y+11	; 0x0b
    342c:	7c 85       	ldd	r23, Y+12	; 0x0c
    342e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3430:	9e 85       	ldd	r25, Y+14	; 0x0e
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9e 83       	std	Y+6, r25	; 0x06
    3450:	8d 83       	std	Y+5, r24	; 0x05
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <release+0x1b2>
    3454:	84 e1       	ldi	r24, 0x14	; 20
    3456:	91 e0       	ldi	r25, 0x01	; 1
    3458:	9c 83       	std	Y+4, r25	; 0x04
    345a:	8b 83       	std	Y+3, r24	; 0x03
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <release+0x1a0>
    3464:	9c 83       	std	Y+4, r25	; 0x04
    3466:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	69 f7       	brne	.-38     	; 0x3454 <release+0x194>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <release+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	6f 81       	ldd	r22, Y+7	; 0x07
    347e:	78 85       	ldd	r23, Y+8	; 0x08
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	9a 85       	ldd	r25, Y+10	; 0x0a
    3484:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9e 83       	std	Y+6, r25	; 0x06
    348e:	8d 83       	std	Y+5, r24	; 0x05
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	9e 81       	ldd	r25, Y+6	; 0x06
    3494:	9a 83       	std	Y+2, r25	; 0x02
    3496:	89 83       	std	Y+1, r24	; 0x01
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	9a 81       	ldd	r25, Y+2	; 0x02
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <release+0x1dc>
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
        
}
    34a4:	6c 96       	adiw	r28, 0x1c	; 28
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	f8 94       	cli
    34aa:	de bf       	out	0x3e, r29	; 62
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <checkfollow>:
#include "adc.h"
#include "signals.h"
#include "rfid.h"
#include "arm.h"
void checkfollow(void)
{
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	0f 92       	push	r0
    34bc:	0f 92       	push	r0
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
	int temp12=0;
    34c2:	1a 82       	std	Y+2, r1	; 0x02
    34c4:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		init_sensor_values();
    34c6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <init_sensor_values>
		while(checkobstacle()==0) {} 		
    34ca:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <checkobstacle>
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	e1 f3       	breq	.-8      	; 0x34ca <checkfollow+0x14>
		if(checkintersection() == 1 )
    34d2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <checkintersection>
    34d6:	81 30       	cpi	r24, 0x01	; 1
    34d8:	91 05       	cpc	r25, r1
    34da:	91 f4       	brne	.+36     	; 0x3500 <checkfollow+0x4a>
		{	
			temp12++;
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	9a 81       	ldd	r25, Y+2	; 0x02
    34e0:	01 96       	adiw	r24, 0x01	; 1
    34e2:	9a 83       	std	Y+2, r25	; 0x02
    34e4:	89 83       	std	Y+1, r24	; 0x01
			if(temp12==2){ turn_left(); temp12=0; }
    34e6:	89 81       	ldd	r24, Y+1	; 0x01
    34e8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ea:	82 30       	cpi	r24, 0x02	; 2
    34ec:	91 05       	cpc	r25, r1
    34ee:	29 f4       	brne	.+10     	; 0x34fa <checkfollow+0x44>
    34f0:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <turn_left>
    34f4:	1a 82       	std	Y+2, r1	; 0x02
    34f6:	19 82       	std	Y+1, r1	; 0x01
    34f8:	e6 cf       	rjmp	.-52     	; 0x34c6 <checkfollow+0x10>
			else follow();
    34fa:	0e 94 85 11 	call	0x230a	; 0x230a <follow>
    34fe:	e3 cf       	rjmp	.-58     	; 0x34c6 <checkfollow+0x10>
			
		}
		else 
		{
			follow();
    3500:	0e 94 85 11 	call	0x230a	; 0x230a <follow>
    3504:	e0 cf       	rjmp	.-64     	; 0x34c6 <checkfollow+0x10>

00003506 <checkarm>:
		
	}
}

void checkarm(void)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	6c 97       	sbiw	r28, 0x1c	; 28
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		arm_up();
    351a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <arm_up>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	aa ef       	ldi	r26, 0xFA	; 250
    3524:	b4 e4       	ldi	r27, 0x44	; 68
    3526:	89 8f       	std	Y+25, r24	; 0x19
    3528:	9a 8f       	std	Y+26, r25	; 0x1a
    352a:	ab 8f       	std	Y+27, r26	; 0x1b
    352c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352e:	69 8d       	ldd	r22, Y+25	; 0x19
    3530:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3532:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3534:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3536:	2d ec       	ldi	r18, 0xCD	; 205
    3538:	3c ec       	ldi	r19, 0xCC	; 204
    353a:	4c e2       	ldi	r20, 0x2C	; 44
    353c:	55 e4       	ldi	r21, 0x45	; 69
    353e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	8d 8b       	std	Y+21, r24	; 0x15
    3548:	9e 8b       	std	Y+22, r25	; 0x16
    354a:	af 8b       	std	Y+23, r26	; 0x17
    354c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    354e:	6d 89       	ldd	r22, Y+21	; 0x15
    3550:	7e 89       	ldd	r23, Y+22	; 0x16
    3552:	8f 89       	ldd	r24, Y+23	; 0x17
    3554:	98 8d       	ldd	r25, Y+24	; 0x18
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	40 e8       	ldi	r20, 0x80	; 128
    355c:	5f e3       	ldi	r21, 0x3F	; 63
    355e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    3562:	88 23       	and	r24, r24
    3564:	2c f4       	brge	.+10     	; 0x3570 <checkarm+0x6a>
		__ticks = 1;
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	9c 8b       	std	Y+20, r25	; 0x14
    356c:	8b 8b       	std	Y+19, r24	; 0x13
    356e:	3f c0       	rjmp	.+126    	; 0x35ee <checkarm+0xe8>
	else if (__tmp > 65535)
    3570:	6d 89       	ldd	r22, Y+21	; 0x15
    3572:	7e 89       	ldd	r23, Y+22	; 0x16
    3574:	8f 89       	ldd	r24, Y+23	; 0x17
    3576:	98 8d       	ldd	r25, Y+24	; 0x18
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	3f ef       	ldi	r19, 0xFF	; 255
    357c:	4f e7       	ldi	r20, 0x7F	; 127
    357e:	57 e4       	ldi	r21, 0x47	; 71
    3580:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    3584:	18 16       	cp	r1, r24
    3586:	4c f5       	brge	.+82     	; 0x35da <checkarm+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3588:	69 8d       	ldd	r22, Y+25	; 0x19
    358a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    358c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    358e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	40 e2       	ldi	r20, 0x20	; 32
    3596:	51 e4       	ldi	r21, 0x41	; 65
    3598:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	bc 01       	movw	r22, r24
    35a2:	cd 01       	movw	r24, r26
    35a4:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	9c 8b       	std	Y+20, r25	; 0x14
    35ae:	8b 8b       	std	Y+19, r24	; 0x13
    35b0:	0f c0       	rjmp	.+30     	; 0x35d0 <checkarm+0xca>
    35b2:	84 e1       	ldi	r24, 0x14	; 20
    35b4:	91 e0       	ldi	r25, 0x01	; 1
    35b6:	9a 8b       	std	Y+18, r25	; 0x12
    35b8:	89 8b       	std	Y+17, r24	; 0x11
    35ba:	89 89       	ldd	r24, Y+17	; 0x11
    35bc:	9a 89       	ldd	r25, Y+18	; 0x12
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	f1 f7       	brne	.-4      	; 0x35be <checkarm+0xb8>
    35c2:	9a 8b       	std	Y+18, r25	; 0x12
    35c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c6:	8b 89       	ldd	r24, Y+19	; 0x13
    35c8:	9c 89       	ldd	r25, Y+20	; 0x14
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	9c 8b       	std	Y+20, r25	; 0x14
    35ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d0:	8b 89       	ldd	r24, Y+19	; 0x13
    35d2:	9c 89       	ldd	r25, Y+20	; 0x14
    35d4:	00 97       	sbiw	r24, 0x00	; 0
    35d6:	69 f7       	brne	.-38     	; 0x35b2 <checkarm+0xac>
    35d8:	14 c0       	rjmp	.+40     	; 0x3602 <checkarm+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35da:	6d 89       	ldd	r22, Y+21	; 0x15
    35dc:	7e 89       	ldd	r23, Y+22	; 0x16
    35de:	8f 89       	ldd	r24, Y+23	; 0x17
    35e0:	98 8d       	ldd	r25, Y+24	; 0x18
    35e2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	9c 8b       	std	Y+20, r25	; 0x14
    35ec:	8b 8b       	std	Y+19, r24	; 0x13
    35ee:	8b 89       	ldd	r24, Y+19	; 0x13
    35f0:	9c 89       	ldd	r25, Y+20	; 0x14
    35f2:	98 8b       	std	Y+16, r25	; 0x10
    35f4:	8f 87       	std	Y+15, r24	; 0x0f
    35f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f8:	98 89       	ldd	r25, Y+16	; 0x10
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	f1 f7       	brne	.-4      	; 0x35fa <checkarm+0xf4>
    35fe:	98 8b       	std	Y+16, r25	; 0x10
    3600:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		arm_down();
    3602:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <arm_down>
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	aa ef       	ldi	r26, 0xFA	; 250
    360c:	b4 e4       	ldi	r27, 0x44	; 68
    360e:	8b 87       	std	Y+11, r24	; 0x0b
    3610:	9c 87       	std	Y+12, r25	; 0x0c
    3612:	ad 87       	std	Y+13, r26	; 0x0d
    3614:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3616:	6b 85       	ldd	r22, Y+11	; 0x0b
    3618:	7c 85       	ldd	r23, Y+12	; 0x0c
    361a:	8d 85       	ldd	r24, Y+13	; 0x0d
    361c:	9e 85       	ldd	r25, Y+14	; 0x0e
    361e:	2d ec       	ldi	r18, 0xCD	; 205
    3620:	3c ec       	ldi	r19, 0xCC	; 204
    3622:	4c e2       	ldi	r20, 0x2C	; 44
    3624:	55 e4       	ldi	r21, 0x45	; 69
    3626:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	8f 83       	std	Y+7, r24	; 0x07
    3630:	98 87       	std	Y+8, r25	; 0x08
    3632:	a9 87       	std	Y+9, r26	; 0x09
    3634:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3636:	6f 81       	ldd	r22, Y+7	; 0x07
    3638:	78 85       	ldd	r23, Y+8	; 0x08
    363a:	89 85       	ldd	r24, Y+9	; 0x09
    363c:	9a 85       	ldd	r25, Y+10	; 0x0a
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e8       	ldi	r20, 0x80	; 128
    3644:	5f e3       	ldi	r21, 0x3F	; 63
    3646:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    364a:	88 23       	and	r24, r24
    364c:	2c f4       	brge	.+10     	; 0x3658 <checkarm+0x152>
		__ticks = 1;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
    3656:	3f c0       	rjmp	.+126    	; 0x36d6 <checkarm+0x1d0>
	else if (__tmp > 65535)
    3658:	6f 81       	ldd	r22, Y+7	; 0x07
    365a:	78 85       	ldd	r23, Y+8	; 0x08
    365c:	89 85       	ldd	r24, Y+9	; 0x09
    365e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	3f ef       	ldi	r19, 0xFF	; 255
    3664:	4f e7       	ldi	r20, 0x7F	; 127
    3666:	57 e4       	ldi	r21, 0x47	; 71
    3668:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    366c:	18 16       	cp	r1, r24
    366e:	4c f5       	brge	.+82     	; 0x36c2 <checkarm+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3670:	6b 85       	ldd	r22, Y+11	; 0x0b
    3672:	7c 85       	ldd	r23, Y+12	; 0x0c
    3674:	8d 85       	ldd	r24, Y+13	; 0x0d
    3676:	9e 85       	ldd	r25, Y+14	; 0x0e
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e2       	ldi	r20, 0x20	; 32
    367e:	51 e4       	ldi	r21, 0x41	; 65
    3680:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9e 83       	std	Y+6, r25	; 0x06
    3696:	8d 83       	std	Y+5, r24	; 0x05
    3698:	0f c0       	rjmp	.+30     	; 0x36b8 <checkarm+0x1b2>
    369a:	84 e1       	ldi	r24, 0x14	; 20
    369c:	91 e0       	ldi	r25, 0x01	; 1
    369e:	9c 83       	std	Y+4, r25	; 0x04
    36a0:	8b 83       	std	Y+3, r24	; 0x03
    36a2:	8b 81       	ldd	r24, Y+3	; 0x03
    36a4:	9c 81       	ldd	r25, Y+4	; 0x04
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <checkarm+0x1a0>
    36aa:	9c 83       	std	Y+4, r25	; 0x04
    36ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ae:	8d 81       	ldd	r24, Y+5	; 0x05
    36b0:	9e 81       	ldd	r25, Y+6	; 0x06
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	9e 83       	std	Y+6, r25	; 0x06
    36b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ba:	9e 81       	ldd	r25, Y+6	; 0x06
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	69 f7       	brne	.-38     	; 0x369a <checkarm+0x194>
    36c0:	2c cf       	rjmp	.-424    	; 0x351a <checkarm+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c2:	6f 81       	ldd	r22, Y+7	; 0x07
    36c4:	78 85       	ldd	r23, Y+8	; 0x08
    36c6:	89 85       	ldd	r24, Y+9	; 0x09
    36c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ca:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	9e 83       	std	Y+6, r25	; 0x06
    36d4:	8d 83       	std	Y+5, r24	; 0x05
    36d6:	8d 81       	ldd	r24, Y+5	; 0x05
    36d8:	9e 81       	ldd	r25, Y+6	; 0x06
    36da:	9a 83       	std	Y+2, r25	; 0x02
    36dc:	89 83       	std	Y+1, r24	; 0x01
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	f1 f7       	brne	.-4      	; 0x36e2 <checkarm+0x1dc>
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
    36ea:	17 cf       	rjmp	.-466    	; 0x351a <checkarm+0x14>

000036ec <checkstraight>:
		_delay_ms(2000);
	}
}

void checkstraight()
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		follow();
    36f4:	0e 94 85 11 	call	0x230a	; 0x230a <follow>
    36f8:	fd cf       	rjmp	.-6      	; 0x36f4 <checkstraight+0x8>

000036fa <move_bot>:
	}
}


int move_bot()
{
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	60 97       	sbiw	r28, 0x10	; 16
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
	init_sensor_values();
    370e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <init_sensor_values>
	while(checkobstacle()==0) {} 
    3712:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <checkobstacle>
    3716:	00 97       	sbiw	r24, 0x00	; 0
    3718:	e1 f3       	breq	.-8      	; 0x3712 <move_bot+0x18>
	buzzer_off();
    371a:	0e 94 99 01 	call	0x332	; 0x332 <buzzer_off>
	if(checkintersection() == 1)
    371e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <checkintersection>
    3722:	81 30       	cpi	r24, 0x01	; 1
    3724:	91 05       	cpc	r25, r1
    3726:	09 f0       	breq	.+2      	; 0x372a <move_bot+0x30>
    3728:	79 c0       	rjmp	.+242    	; 0x381c <move_bot+0x122>
	{	
		//communicate with coordinator
		comintersection();
    372a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <comintersection>
		stop();
    372e:	0e 94 41 02 	call	0x482	; 0x482 <stop>
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	a8 ec       	ldi	r26, 0xC8	; 200
    3738:	b2 e4       	ldi	r27, 0x42	; 66
    373a:	8b 87       	std	Y+11, r24	; 0x0b
    373c:	9c 87       	std	Y+12, r25	; 0x0c
    373e:	ad 87       	std	Y+13, r26	; 0x0d
    3740:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3742:	6b 85       	ldd	r22, Y+11	; 0x0b
    3744:	7c 85       	ldd	r23, Y+12	; 0x0c
    3746:	8d 85       	ldd	r24, Y+13	; 0x0d
    3748:	9e 85       	ldd	r25, Y+14	; 0x0e
    374a:	2d ec       	ldi	r18, 0xCD	; 205
    374c:	3c ec       	ldi	r19, 0xCC	; 204
    374e:	4c e2       	ldi	r20, 0x2C	; 44
    3750:	55 e4       	ldi	r21, 0x45	; 69
    3752:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	8f 83       	std	Y+7, r24	; 0x07
    375c:	98 87       	std	Y+8, r25	; 0x08
    375e:	a9 87       	std	Y+9, r26	; 0x09
    3760:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3762:	6f 81       	ldd	r22, Y+7	; 0x07
    3764:	78 85       	ldd	r23, Y+8	; 0x08
    3766:	89 85       	ldd	r24, Y+9	; 0x09
    3768:	9a 85       	ldd	r25, Y+10	; 0x0a
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	40 e8       	ldi	r20, 0x80	; 128
    3770:	5f e3       	ldi	r21, 0x3F	; 63
    3772:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    3776:	88 23       	and	r24, r24
    3778:	2c f4       	brge	.+10     	; 0x3784 <move_bot+0x8a>
		__ticks = 1;
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	9e 83       	std	Y+6, r25	; 0x06
    3780:	8d 83       	std	Y+5, r24	; 0x05
    3782:	3f c0       	rjmp	.+126    	; 0x3802 <move_bot+0x108>
	else if (__tmp > 65535)
    3784:	6f 81       	ldd	r22, Y+7	; 0x07
    3786:	78 85       	ldd	r23, Y+8	; 0x08
    3788:	89 85       	ldd	r24, Y+9	; 0x09
    378a:	9a 85       	ldd	r25, Y+10	; 0x0a
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	3f ef       	ldi	r19, 0xFF	; 255
    3790:	4f e7       	ldi	r20, 0x7F	; 127
    3792:	57 e4       	ldi	r21, 0x47	; 71
    3794:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    3798:	18 16       	cp	r1, r24
    379a:	4c f5       	brge	.+82     	; 0x37ee <move_bot+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379c:	6b 85       	ldd	r22, Y+11	; 0x0b
    379e:	7c 85       	ldd	r23, Y+12	; 0x0c
    37a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 e2       	ldi	r20, 0x20	; 32
    37aa:	51 e4       	ldi	r21, 0x41	; 65
    37ac:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	bc 01       	movw	r22, r24
    37b6:	cd 01       	movw	r24, r26
    37b8:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	9e 83       	std	Y+6, r25	; 0x06
    37c2:	8d 83       	std	Y+5, r24	; 0x05
    37c4:	0f c0       	rjmp	.+30     	; 0x37e4 <move_bot+0xea>
    37c6:	84 e1       	ldi	r24, 0x14	; 20
    37c8:	91 e0       	ldi	r25, 0x01	; 1
    37ca:	9c 83       	std	Y+4, r25	; 0x04
    37cc:	8b 83       	std	Y+3, r24	; 0x03
    37ce:	8b 81       	ldd	r24, Y+3	; 0x03
    37d0:	9c 81       	ldd	r25, Y+4	; 0x04
    37d2:	01 97       	sbiw	r24, 0x01	; 1
    37d4:	f1 f7       	brne	.-4      	; 0x37d2 <move_bot+0xd8>
    37d6:	9c 83       	std	Y+4, r25	; 0x04
    37d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37da:	8d 81       	ldd	r24, Y+5	; 0x05
    37dc:	9e 81       	ldd	r25, Y+6	; 0x06
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	9e 83       	std	Y+6, r25	; 0x06
    37e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e4:	8d 81       	ldd	r24, Y+5	; 0x05
    37e6:	9e 81       	ldd	r25, Y+6	; 0x06
    37e8:	00 97       	sbiw	r24, 0x00	; 0
    37ea:	69 f7       	brne	.-38     	; 0x37c6 <move_bot+0xcc>
    37ec:	14 c0       	rjmp	.+40     	; 0x3816 <move_bot+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ee:	6f 81       	ldd	r22, Y+7	; 0x07
    37f0:	78 85       	ldd	r23, Y+8	; 0x08
    37f2:	89 85       	ldd	r24, Y+9	; 0x09
    37f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f6:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	9e 83       	std	Y+6, r25	; 0x06
    3800:	8d 83       	std	Y+5, r24	; 0x05
    3802:	8d 81       	ldd	r24, Y+5	; 0x05
    3804:	9e 81       	ldd	r25, Y+6	; 0x06
    3806:	9a 83       	std	Y+2, r25	; 0x02
    3808:	89 83       	std	Y+1, r24	; 0x01
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	9a 81       	ldd	r25, Y+2	; 0x02
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	f1 f7       	brne	.-4      	; 0x380e <move_bot+0x114>
    3812:	9a 83       	std	Y+2, r25	; 0x02
    3814:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		return 0;
    3816:	18 8a       	std	Y+16, r1	; 0x10
    3818:	1f 86       	std	Y+15, r1	; 0x0f
    381a:	06 c0       	rjmp	.+12     	; 0x3828 <move_bot+0x12e>
	}
	else 
	{
		follow();
    381c:	0e 94 85 11 	call	0x230a	; 0x230a <follow>
		return 1;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	98 8b       	std	Y+16, r25	; 0x10
    3826:	8f 87       	std	Y+15, r24	; 0x0f
    3828:	8f 85       	ldd	r24, Y+15	; 0x0f
    382a:	98 89       	ldd	r25, Y+16	; 0x10
	}
}
    382c:	60 96       	adiw	r28, 0x10	; 16
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <run>:
void run(void)
{
    383e:	0f 93       	push	r16
    3840:	1f 93       	push	r17
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	cc 58       	subi	r28, 0x8C	; 140
    384c:	d0 40       	sbci	r29, 0x00	; 0
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	f8 94       	cli
    3852:	de bf       	out	0x3e, r29	; 62
    3854:	0f be       	out	0x3f, r0	; 63
    3856:	cd bf       	out	0x3d, r28	; 61
	data='w';
    3858:	87 e7       	ldi	r24, 0x77	; 119
    385a:	80 93 a7 03 	sts	0x03A7, r24
	while(1)
	{
		while(data == 'w') //waiting for signal
    385e:	80 91 a7 03 	lds	r24, 0x03A7
    3862:	87 37       	cpi	r24, 0x77	; 119
    3864:	e1 f3       	breq	.-8      	; 0x385e <run+0x20>
    3866:	6b c1       	rjmp	.+726    	; 0x3b3e <run+0x300>
		{	
		}
		while(data == '\0' )
		{
			stop();
    3868:	0e 94 41 02 	call	0x482	; 0x482 <stop>
    386c:	fe 01       	movw	r30, r28
    386e:	e7 57       	subi	r30, 0x77	; 119
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	aa e7       	ldi	r26, 0x7A	; 122
    3878:	b5 e4       	ldi	r27, 0x45	; 69
    387a:	80 83       	st	Z, r24
    387c:	91 83       	std	Z+1, r25	; 0x01
    387e:	a2 83       	std	Z+2, r26	; 0x02
    3880:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3882:	8e 01       	movw	r16, r28
    3884:	0b 57       	subi	r16, 0x7B	; 123
    3886:	1f 4f       	sbci	r17, 0xFF	; 255
    3888:	fe 01       	movw	r30, r28
    388a:	e7 57       	subi	r30, 0x77	; 119
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	60 81       	ld	r22, Z
    3890:	71 81       	ldd	r23, Z+1	; 0x01
    3892:	82 81       	ldd	r24, Z+2	; 0x02
    3894:	93 81       	ldd	r25, Z+3	; 0x03
    3896:	2d ec       	ldi	r18, 0xCD	; 205
    3898:	3c ec       	ldi	r19, 0xCC	; 204
    389a:	4c e2       	ldi	r20, 0x2C	; 44
    389c:	55 e4       	ldi	r21, 0x45	; 69
    389e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	f8 01       	movw	r30, r16
    38a8:	80 83       	st	Z, r24
    38aa:	91 83       	std	Z+1, r25	; 0x01
    38ac:	a2 83       	std	Z+2, r26	; 0x02
    38ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38b0:	fe 01       	movw	r30, r28
    38b2:	eb 57       	subi	r30, 0x7B	; 123
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	60 81       	ld	r22, Z
    38b8:	71 81       	ldd	r23, Z+1	; 0x01
    38ba:	82 81       	ldd	r24, Z+2	; 0x02
    38bc:	93 81       	ldd	r25, Z+3	; 0x03
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	40 e8       	ldi	r20, 0x80	; 128
    38c4:	5f e3       	ldi	r21, 0x3F	; 63
    38c6:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    38ca:	88 23       	and	r24, r24
    38cc:	44 f4       	brge	.+16     	; 0x38de <run+0xa0>
		__ticks = 1;
    38ce:	fe 01       	movw	r30, r28
    38d0:	ed 57       	subi	r30, 0x7D	; 125
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	91 83       	std	Z+1, r25	; 0x01
    38da:	80 83       	st	Z, r24
    38dc:	64 c0       	rjmp	.+200    	; 0x39a6 <run+0x168>
	else if (__tmp > 65535)
    38de:	fe 01       	movw	r30, r28
    38e0:	eb 57       	subi	r30, 0x7B	; 123
    38e2:	ff 4f       	sbci	r31, 0xFF	; 255
    38e4:	60 81       	ld	r22, Z
    38e6:	71 81       	ldd	r23, Z+1	; 0x01
    38e8:	82 81       	ldd	r24, Z+2	; 0x02
    38ea:	93 81       	ldd	r25, Z+3	; 0x03
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	3f ef       	ldi	r19, 0xFF	; 255
    38f0:	4f e7       	ldi	r20, 0x7F	; 127
    38f2:	57 e4       	ldi	r21, 0x47	; 71
    38f4:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    38f8:	18 16       	cp	r1, r24
    38fa:	0c f0       	brlt	.+2      	; 0x38fe <run+0xc0>
    38fc:	43 c0       	rjmp	.+134    	; 0x3984 <run+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fe:	fe 01       	movw	r30, r28
    3900:	e7 57       	subi	r30, 0x77	; 119
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	60 81       	ld	r22, Z
    3906:	71 81       	ldd	r23, Z+1	; 0x01
    3908:	82 81       	ldd	r24, Z+2	; 0x02
    390a:	93 81       	ldd	r25, Z+3	; 0x03
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	40 e2       	ldi	r20, 0x20	; 32
    3912:	51 e4       	ldi	r21, 0x41	; 65
    3914:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3918:	dc 01       	movw	r26, r24
    391a:	cb 01       	movw	r24, r22
    391c:	8e 01       	movw	r16, r28
    391e:	0d 57       	subi	r16, 0x7D	; 125
    3920:	1f 4f       	sbci	r17, 0xFF	; 255
    3922:	bc 01       	movw	r22, r24
    3924:	cd 01       	movw	r24, r26
    3926:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	f8 01       	movw	r30, r16
    3930:	91 83       	std	Z+1, r25	; 0x01
    3932:	80 83       	st	Z, r24
    3934:	1f c0       	rjmp	.+62     	; 0x3974 <run+0x136>
    3936:	fe 01       	movw	r30, r28
    3938:	ef 57       	subi	r30, 0x7F	; 127
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	84 e1       	ldi	r24, 0x14	; 20
    393e:	91 e0       	ldi	r25, 0x01	; 1
    3940:	91 83       	std	Z+1, r25	; 0x01
    3942:	80 83       	st	Z, r24
    3944:	fe 01       	movw	r30, r28
    3946:	ef 57       	subi	r30, 0x7F	; 127
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	80 81       	ld	r24, Z
    394c:	91 81       	ldd	r25, Z+1	; 0x01
    394e:	01 97       	sbiw	r24, 0x01	; 1
    3950:	f1 f7       	brne	.-4      	; 0x394e <run+0x110>
    3952:	fe 01       	movw	r30, r28
    3954:	ef 57       	subi	r30, 0x7F	; 127
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	91 83       	std	Z+1, r25	; 0x01
    395a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    395c:	de 01       	movw	r26, r28
    395e:	ad 57       	subi	r26, 0x7D	; 125
    3960:	bf 4f       	sbci	r27, 0xFF	; 255
    3962:	fe 01       	movw	r30, r28
    3964:	ed 57       	subi	r30, 0x7D	; 125
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	80 81       	ld	r24, Z
    396a:	91 81       	ldd	r25, Z+1	; 0x01
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	11 96       	adiw	r26, 0x01	; 1
    3970:	9c 93       	st	X, r25
    3972:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3974:	fe 01       	movw	r30, r28
    3976:	ed 57       	subi	r30, 0x7D	; 125
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	80 81       	ld	r24, Z
    397c:	91 81       	ldd	r25, Z+1	; 0x01
    397e:	00 97       	sbiw	r24, 0x00	; 0
    3980:	d1 f6       	brne	.-76     	; 0x3936 <run+0xf8>
    3982:	27 c0       	rjmp	.+78     	; 0x39d2 <run+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3984:	8e 01       	movw	r16, r28
    3986:	0d 57       	subi	r16, 0x7D	; 125
    3988:	1f 4f       	sbci	r17, 0xFF	; 255
    398a:	fe 01       	movw	r30, r28
    398c:	eb 57       	subi	r30, 0x7B	; 123
    398e:	ff 4f       	sbci	r31, 0xFF	; 255
    3990:	60 81       	ld	r22, Z
    3992:	71 81       	ldd	r23, Z+1	; 0x01
    3994:	82 81       	ldd	r24, Z+2	; 0x02
    3996:	93 81       	ldd	r25, Z+3	; 0x03
    3998:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	f8 01       	movw	r30, r16
    39a2:	91 83       	std	Z+1, r25	; 0x01
    39a4:	80 83       	st	Z, r24
    39a6:	de 01       	movw	r26, r28
    39a8:	a1 58       	subi	r26, 0x81	; 129
    39aa:	bf 4f       	sbci	r27, 0xFF	; 255
    39ac:	fe 01       	movw	r30, r28
    39ae:	ed 57       	subi	r30, 0x7D	; 125
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	80 81       	ld	r24, Z
    39b4:	91 81       	ldd	r25, Z+1	; 0x01
    39b6:	8d 93       	st	X+, r24
    39b8:	9c 93       	st	X, r25
    39ba:	fe 01       	movw	r30, r28
    39bc:	e1 58       	subi	r30, 0x81	; 129
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	80 81       	ld	r24, Z
    39c2:	91 81       	ldd	r25, Z+1	; 0x01
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	f1 f7       	brne	.-4      	; 0x39c4 <run+0x186>
    39c8:	fe 01       	movw	r30, r28
    39ca:	e1 58       	subi	r30, 0x81	; 129
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	91 83       	std	Z+1, r25	; 0x01
    39d0:	80 83       	st	Z, r24
			_delay_ms(4000);
			comintersection();
    39d2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <comintersection>
    39d6:	fe 01       	movw	r30, r28
    39d8:	e5 58       	subi	r30, 0x85	; 133
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	a8 ec       	ldi	r26, 0xC8	; 200
    39e2:	b2 e4       	ldi	r27, 0x42	; 66
    39e4:	80 83       	st	Z, r24
    39e6:	91 83       	std	Z+1, r25	; 0x01
    39e8:	a2 83       	std	Z+2, r26	; 0x02
    39ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ec:	8e 01       	movw	r16, r28
    39ee:	09 58       	subi	r16, 0x89	; 137
    39f0:	1f 4f       	sbci	r17, 0xFF	; 255
    39f2:	fe 01       	movw	r30, r28
    39f4:	e5 58       	subi	r30, 0x85	; 133
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	60 81       	ld	r22, Z
    39fa:	71 81       	ldd	r23, Z+1	; 0x01
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	2d ec       	ldi	r18, 0xCD	; 205
    3a02:	3c ec       	ldi	r19, 0xCC	; 204
    3a04:	4c e2       	ldi	r20, 0x2C	; 44
    3a06:	55 e4       	ldi	r21, 0x45	; 69
    3a08:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	f8 01       	movw	r30, r16
    3a12:	80 83       	st	Z, r24
    3a14:	91 83       	std	Z+1, r25	; 0x01
    3a16:	a2 83       	std	Z+2, r26	; 0x02
    3a18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e9 58       	subi	r30, 0x89	; 137
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	60 81       	ld	r22, Z
    3a22:	71 81       	ldd	r23, Z+1	; 0x01
    3a24:	82 81       	ldd	r24, Z+2	; 0x02
    3a26:	93 81       	ldd	r25, Z+3	; 0x03
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	40 e8       	ldi	r20, 0x80	; 128
    3a2e:	5f e3       	ldi	r21, 0x3F	; 63
    3a30:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    3a34:	88 23       	and	r24, r24
    3a36:	44 f4       	brge	.+16     	; 0x3a48 <run+0x20a>
		__ticks = 1;
    3a38:	fe 01       	movw	r30, r28
    3a3a:	eb 58       	subi	r30, 0x8B	; 139
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	91 83       	std	Z+1, r25	; 0x01
    3a44:	80 83       	st	Z, r24
    3a46:	64 c0       	rjmp	.+200    	; 0x3b10 <run+0x2d2>
	else if (__tmp > 65535)
    3a48:	fe 01       	movw	r30, r28
    3a4a:	e9 58       	subi	r30, 0x89	; 137
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	60 81       	ld	r22, Z
    3a50:	71 81       	ldd	r23, Z+1	; 0x01
    3a52:	82 81       	ldd	r24, Z+2	; 0x02
    3a54:	93 81       	ldd	r25, Z+3	; 0x03
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	3f ef       	ldi	r19, 0xFF	; 255
    3a5a:	4f e7       	ldi	r20, 0x7F	; 127
    3a5c:	57 e4       	ldi	r21, 0x47	; 71
    3a5e:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    3a62:	18 16       	cp	r1, r24
    3a64:	0c f0       	brlt	.+2      	; 0x3a68 <run+0x22a>
    3a66:	43 c0       	rjmp	.+134    	; 0x3aee <run+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a68:	fe 01       	movw	r30, r28
    3a6a:	e5 58       	subi	r30, 0x85	; 133
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	60 81       	ld	r22, Z
    3a70:	71 81       	ldd	r23, Z+1	; 0x01
    3a72:	82 81       	ldd	r24, Z+2	; 0x02
    3a74:	93 81       	ldd	r25, Z+3	; 0x03
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e2       	ldi	r20, 0x20	; 32
    3a7c:	51 e4       	ldi	r21, 0x41	; 65
    3a7e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	8e 01       	movw	r16, r28
    3a88:	0b 58       	subi	r16, 0x8B	; 139
    3a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	f8 01       	movw	r30, r16
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	80 83       	st	Z, r24
    3a9e:	1f c0       	rjmp	.+62     	; 0x3ade <run+0x2a0>
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	ed 58       	subi	r30, 0x8D	; 141
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	84 e1       	ldi	r24, 0x14	; 20
    3aa8:	91 e0       	ldi	r25, 0x01	; 1
    3aaa:	91 83       	std	Z+1, r25	; 0x01
    3aac:	80 83       	st	Z, r24
    3aae:	fe 01       	movw	r30, r28
    3ab0:	ed 58       	subi	r30, 0x8D	; 141
    3ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab4:	80 81       	ld	r24, Z
    3ab6:	91 81       	ldd	r25, Z+1	; 0x01
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	f1 f7       	brne	.-4      	; 0x3ab8 <run+0x27a>
    3abc:	fe 01       	movw	r30, r28
    3abe:	ed 58       	subi	r30, 0x8D	; 141
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	91 83       	std	Z+1, r25	; 0x01
    3ac4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac6:	de 01       	movw	r26, r28
    3ac8:	ab 58       	subi	r26, 0x8B	; 139
    3aca:	bf 4f       	sbci	r27, 0xFF	; 255
    3acc:	fe 01       	movw	r30, r28
    3ace:	eb 58       	subi	r30, 0x8B	; 139
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	80 81       	ld	r24, Z
    3ad4:	91 81       	ldd	r25, Z+1	; 0x01
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	11 96       	adiw	r26, 0x01	; 1
    3ada:	9c 93       	st	X, r25
    3adc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ade:	fe 01       	movw	r30, r28
    3ae0:	eb 58       	subi	r30, 0x8B	; 139
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	00 97       	sbiw	r24, 0x00	; 0
    3aea:	d1 f6       	brne	.-76     	; 0x3aa0 <run+0x262>
    3aec:	28 c0       	rjmp	.+80     	; 0x3b3e <run+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aee:	8e 01       	movw	r16, r28
    3af0:	0b 58       	subi	r16, 0x8B	; 139
    3af2:	1f 4f       	sbci	r17, 0xFF	; 255
    3af4:	fe 01       	movw	r30, r28
    3af6:	e9 58       	subi	r30, 0x89	; 137
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	60 81       	ld	r22, Z
    3afc:	71 81       	ldd	r23, Z+1	; 0x01
    3afe:	82 81       	ldd	r24, Z+2	; 0x02
    3b00:	93 81       	ldd	r25, Z+3	; 0x03
    3b02:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	f8 01       	movw	r30, r16
    3b0c:	91 83       	std	Z+1, r25	; 0x01
    3b0e:	80 83       	st	Z, r24
    3b10:	de 01       	movw	r26, r28
    3b12:	af 58       	subi	r26, 0x8F	; 143
    3b14:	bf 4f       	sbci	r27, 0xFF	; 255
    3b16:	fe 01       	movw	r30, r28
    3b18:	eb 58       	subi	r30, 0x8B	; 139
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	80 81       	ld	r24, Z
    3b1e:	91 81       	ldd	r25, Z+1	; 0x01
    3b20:	11 96       	adiw	r26, 0x01	; 1
    3b22:	9c 93       	st	X, r25
    3b24:	8e 93       	st	-X, r24
    3b26:	fe 01       	movw	r30, r28
    3b28:	ef 58       	subi	r30, 0x8F	; 143
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	80 81       	ld	r24, Z
    3b2e:	91 81       	ldd	r25, Z+1	; 0x01
    3b30:	01 97       	sbiw	r24, 0x01	; 1
    3b32:	f1 f7       	brne	.-4      	; 0x3b30 <run+0x2f2>
    3b34:	fe 01       	movw	r30, r28
    3b36:	ef 58       	subi	r30, 0x8F	; 143
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
	while(1)
	{
		while(data == 'w') //waiting for signal
		{	
		}
		while(data == '\0' )
    3b3e:	80 91 a7 03 	lds	r24, 0x03A7
    3b42:	88 23       	and	r24, r24
    3b44:	09 f4       	brne	.+2      	; 0x3b48 <run+0x30a>
    3b46:	90 ce       	rjmp	.-736    	; 0x3868 <run+0x2a>
			stop();
			_delay_ms(4000);
			comintersection();
			_delay_ms(100);
		}
		if(data=='f') // forward
    3b48:	80 91 a7 03 	lds	r24, 0x03A7
    3b4c:	86 36       	cpi	r24, 0x66	; 102
    3b4e:	11 f4       	brne	.+4      	; 0x3b54 <run+0x316>
		{
			data='\0';
    3b50:	10 92 a7 03 	sts	0x03A7, r1
		}
		if(data=='r') // right	
    3b54:	80 91 a7 03 	lds	r24, 0x03A7
    3b58:	82 37       	cpi	r24, 0x72	; 114
    3b5a:	21 f4       	brne	.+8      	; 0x3b64 <run+0x326>
		{
			data='\0';
    3b5c:	10 92 a7 03 	sts	0x03A7, r1
			turn_right();
    3b60:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <turn_right>
		}
		if(data=='l') // left
    3b64:	80 91 a7 03 	lds	r24, 0x03A7
    3b68:	8c 36       	cpi	r24, 0x6C	; 108
    3b6a:	21 f4       	brne	.+8      	; 0x3b74 <run+0x336>
		{
			data='\0';
    3b6c:	10 92 a7 03 	sts	0x03A7, r1
			turn_left();
    3b70:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <turn_left>
		} 
		if(data == 'h') // halt
    3b74:	80 91 a7 03 	lds	r24, 0x03A7
    3b78:	88 36       	cpi	r24, 0x68	; 104
    3b7a:	09 f0       	breq	.+2      	; 0x3b7e <run+0x340>
    3b7c:	b9 c0       	rjmp	.+370    	; 0x3cf0 <run+0x4b2>
		{
			data='\0';
    3b7e:	10 92 a7 03 	sts	0x03A7, r1
			stop();
    3b82:	0e 94 41 02 	call	0x482	; 0x482 <stop>
    3b86:	fe 01       	movw	r30, r28
    3b88:	e3 59       	subi	r30, 0x93	; 147
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	a8 ec       	ldi	r26, 0xC8	; 200
    3b92:	b2 e4       	ldi	r27, 0x42	; 66
    3b94:	80 83       	st	Z, r24
    3b96:	91 83       	std	Z+1, r25	; 0x01
    3b98:	a2 83       	std	Z+2, r26	; 0x02
    3b9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9c:	8e 01       	movw	r16, r28
    3b9e:	07 59       	subi	r16, 0x97	; 151
    3ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	e3 59       	subi	r30, 0x93	; 147
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	60 81       	ld	r22, Z
    3baa:	71 81       	ldd	r23, Z+1	; 0x01
    3bac:	82 81       	ldd	r24, Z+2	; 0x02
    3bae:	93 81       	ldd	r25, Z+3	; 0x03
    3bb0:	2d ec       	ldi	r18, 0xCD	; 205
    3bb2:	3c ec       	ldi	r19, 0xCC	; 204
    3bb4:	4c e2       	ldi	r20, 0x2C	; 44
    3bb6:	55 e4       	ldi	r21, 0x45	; 69
    3bb8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	f8 01       	movw	r30, r16
    3bc2:	80 83       	st	Z, r24
    3bc4:	91 83       	std	Z+1, r25	; 0x01
    3bc6:	a2 83       	std	Z+2, r26	; 0x02
    3bc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bca:	fe 01       	movw	r30, r28
    3bcc:	e7 59       	subi	r30, 0x97	; 151
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	60 81       	ld	r22, Z
    3bd2:	71 81       	ldd	r23, Z+1	; 0x01
    3bd4:	82 81       	ldd	r24, Z+2	; 0x02
    3bd6:	93 81       	ldd	r25, Z+3	; 0x03
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	40 e8       	ldi	r20, 0x80	; 128
    3bde:	5f e3       	ldi	r21, 0x3F	; 63
    3be0:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    3be4:	88 23       	and	r24, r24
    3be6:	44 f4       	brge	.+16     	; 0x3bf8 <run+0x3ba>
		__ticks = 1;
    3be8:	fe 01       	movw	r30, r28
    3bea:	e9 59       	subi	r30, 0x99	; 153
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	91 83       	std	Z+1, r25	; 0x01
    3bf4:	80 83       	st	Z, r24
    3bf6:	64 c0       	rjmp	.+200    	; 0x3cc0 <run+0x482>
	else if (__tmp > 65535)
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e7 59       	subi	r30, 0x97	; 151
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	60 81       	ld	r22, Z
    3c00:	71 81       	ldd	r23, Z+1	; 0x01
    3c02:	82 81       	ldd	r24, Z+2	; 0x02
    3c04:	93 81       	ldd	r25, Z+3	; 0x03
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	3f ef       	ldi	r19, 0xFF	; 255
    3c0a:	4f e7       	ldi	r20, 0x7F	; 127
    3c0c:	57 e4       	ldi	r21, 0x47	; 71
    3c0e:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    3c12:	18 16       	cp	r1, r24
    3c14:	0c f0       	brlt	.+2      	; 0x3c18 <run+0x3da>
    3c16:	43 c0       	rjmp	.+134    	; 0x3c9e <run+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c18:	fe 01       	movw	r30, r28
    3c1a:	e3 59       	subi	r30, 0x93	; 147
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	60 81       	ld	r22, Z
    3c20:	71 81       	ldd	r23, Z+1	; 0x01
    3c22:	82 81       	ldd	r24, Z+2	; 0x02
    3c24:	93 81       	ldd	r25, Z+3	; 0x03
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	40 e2       	ldi	r20, 0x20	; 32
    3c2c:	51 e4       	ldi	r21, 0x41	; 65
    3c2e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	8e 01       	movw	r16, r28
    3c38:	09 59       	subi	r16, 0x99	; 153
    3c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c3c:	bc 01       	movw	r22, r24
    3c3e:	cd 01       	movw	r24, r26
    3c40:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	f8 01       	movw	r30, r16
    3c4a:	91 83       	std	Z+1, r25	; 0x01
    3c4c:	80 83       	st	Z, r24
    3c4e:	1f c0       	rjmp	.+62     	; 0x3c8e <run+0x450>
    3c50:	fe 01       	movw	r30, r28
    3c52:	eb 59       	subi	r30, 0x9B	; 155
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	84 e1       	ldi	r24, 0x14	; 20
    3c58:	91 e0       	ldi	r25, 0x01	; 1
    3c5a:	91 83       	std	Z+1, r25	; 0x01
    3c5c:	80 83       	st	Z, r24
    3c5e:	fe 01       	movw	r30, r28
    3c60:	eb 59       	subi	r30, 0x9B	; 155
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	80 81       	ld	r24, Z
    3c66:	91 81       	ldd	r25, Z+1	; 0x01
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	f1 f7       	brne	.-4      	; 0x3c68 <run+0x42a>
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	eb 59       	subi	r30, 0x9B	; 155
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	91 83       	std	Z+1, r25	; 0x01
    3c74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c76:	de 01       	movw	r26, r28
    3c78:	a9 59       	subi	r26, 0x99	; 153
    3c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	e9 59       	subi	r30, 0x99	; 153
    3c80:	ff 4f       	sbci	r31, 0xFF	; 255
    3c82:	80 81       	ld	r24, Z
    3c84:	91 81       	ldd	r25, Z+1	; 0x01
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	11 96       	adiw	r26, 0x01	; 1
    3c8a:	9c 93       	st	X, r25
    3c8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c8e:	fe 01       	movw	r30, r28
    3c90:	e9 59       	subi	r30, 0x99	; 153
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 81       	ld	r24, Z
    3c96:	91 81       	ldd	r25, Z+1	; 0x01
    3c98:	00 97       	sbiw	r24, 0x00	; 0
    3c9a:	d1 f6       	brne	.-76     	; 0x3c50 <run+0x412>
    3c9c:	e0 cd       	rjmp	.-1088   	; 0x385e <run+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c9e:	8e 01       	movw	r16, r28
    3ca0:	09 59       	subi	r16, 0x99	; 153
    3ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	e7 59       	subi	r30, 0x97	; 151
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	60 81       	ld	r22, Z
    3cac:	71 81       	ldd	r23, Z+1	; 0x01
    3cae:	82 81       	ldd	r24, Z+2	; 0x02
    3cb0:	93 81       	ldd	r25, Z+3	; 0x03
    3cb2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	f8 01       	movw	r30, r16
    3cbc:	91 83       	std	Z+1, r25	; 0x01
    3cbe:	80 83       	st	Z, r24
    3cc0:	de 01       	movw	r26, r28
    3cc2:	ad 59       	subi	r26, 0x9D	; 157
    3cc4:	bf 4f       	sbci	r27, 0xFF	; 255
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	e9 59       	subi	r30, 0x99	; 153
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	80 81       	ld	r24, Z
    3cce:	91 81       	ldd	r25, Z+1	; 0x01
    3cd0:	11 96       	adiw	r26, 0x01	; 1
    3cd2:	9c 93       	st	X, r25
    3cd4:	8e 93       	st	-X, r24
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	ed 59       	subi	r30, 0x9D	; 157
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	80 81       	ld	r24, Z
    3cde:	91 81       	ldd	r25, Z+1	; 0x01
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	f1 f7       	brne	.-4      	; 0x3ce0 <run+0x4a2>
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	ed 59       	subi	r30, 0x9D	; 157
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	91 83       	std	Z+1, r25	; 0x01
    3cec:	80 83       	st	Z, r24
    3cee:	b7 cd       	rjmp	.-1170   	; 0x385e <run+0x20>
			_delay_ms(100);
			continue;
		
		}
		if(data == 'o') // origin
    3cf0:	80 91 a7 03 	lds	r24, 0x03A7
    3cf4:	8f 36       	cpi	r24, 0x6F	; 111
    3cf6:	09 f0       	breq	.+2      	; 0x3cfa <run+0x4bc>
    3cf8:	ba c0       	rjmp	.+372    	; 0x3e6e <run+0x630>
		{
			data='w';
    3cfa:	87 e7       	ldi	r24, 0x77	; 119
    3cfc:	80 93 a7 03 	sts	0x03A7, r24
			stop();
    3d00:	0e 94 41 02 	call	0x482	; 0x482 <stop>
    3d04:	fe 01       	movw	r30, r28
    3d06:	e1 5a       	subi	r30, 0xA1	; 161
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	a8 ec       	ldi	r26, 0xC8	; 200
    3d10:	b2 e4       	ldi	r27, 0x42	; 66
    3d12:	80 83       	st	Z, r24
    3d14:	91 83       	std	Z+1, r25	; 0x01
    3d16:	a2 83       	std	Z+2, r26	; 0x02
    3d18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1a:	8e 01       	movw	r16, r28
    3d1c:	05 5a       	subi	r16, 0xA5	; 165
    3d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d20:	fe 01       	movw	r30, r28
    3d22:	e1 5a       	subi	r30, 0xA1	; 161
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	60 81       	ld	r22, Z
    3d28:	71 81       	ldd	r23, Z+1	; 0x01
    3d2a:	82 81       	ldd	r24, Z+2	; 0x02
    3d2c:	93 81       	ldd	r25, Z+3	; 0x03
    3d2e:	2d ec       	ldi	r18, 0xCD	; 205
    3d30:	3c ec       	ldi	r19, 0xCC	; 204
    3d32:	4c e2       	ldi	r20, 0x2C	; 44
    3d34:	55 e4       	ldi	r21, 0x45	; 69
    3d36:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	f8 01       	movw	r30, r16
    3d40:	80 83       	st	Z, r24
    3d42:	91 83       	std	Z+1, r25	; 0x01
    3d44:	a2 83       	std	Z+2, r26	; 0x02
    3d46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e5 5a       	subi	r30, 0xA5	; 165
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	82 81       	ldd	r24, Z+2	; 0x02
    3d54:	93 81       	ldd	r25, Z+3	; 0x03
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	40 e8       	ldi	r20, 0x80	; 128
    3d5c:	5f e3       	ldi	r21, 0x3F	; 63
    3d5e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    3d62:	88 23       	and	r24, r24
    3d64:	44 f4       	brge	.+16     	; 0x3d76 <run+0x538>
		__ticks = 1;
    3d66:	fe 01       	movw	r30, r28
    3d68:	e7 5a       	subi	r30, 0xA7	; 167
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	91 83       	std	Z+1, r25	; 0x01
    3d72:	80 83       	st	Z, r24
    3d74:	64 c0       	rjmp	.+200    	; 0x3e3e <run+0x600>
	else if (__tmp > 65535)
    3d76:	fe 01       	movw	r30, r28
    3d78:	e5 5a       	subi	r30, 0xA5	; 165
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	60 81       	ld	r22, Z
    3d7e:	71 81       	ldd	r23, Z+1	; 0x01
    3d80:	82 81       	ldd	r24, Z+2	; 0x02
    3d82:	93 81       	ldd	r25, Z+3	; 0x03
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	3f ef       	ldi	r19, 0xFF	; 255
    3d88:	4f e7       	ldi	r20, 0x7F	; 127
    3d8a:	57 e4       	ldi	r21, 0x47	; 71
    3d8c:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    3d90:	18 16       	cp	r1, r24
    3d92:	0c f0       	brlt	.+2      	; 0x3d96 <run+0x558>
    3d94:	43 c0       	rjmp	.+134    	; 0x3e1c <run+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d96:	fe 01       	movw	r30, r28
    3d98:	e1 5a       	subi	r30, 0xA1	; 161
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	60 81       	ld	r22, Z
    3d9e:	71 81       	ldd	r23, Z+1	; 0x01
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	40 e2       	ldi	r20, 0x20	; 32
    3daa:	51 e4       	ldi	r21, 0x41	; 65
    3dac:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	8e 01       	movw	r16, r28
    3db6:	07 5a       	subi	r16, 0xA7	; 167
    3db8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dba:	bc 01       	movw	r22, r24
    3dbc:	cd 01       	movw	r24, r26
    3dbe:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	f8 01       	movw	r30, r16
    3dc8:	91 83       	std	Z+1, r25	; 0x01
    3dca:	80 83       	st	Z, r24
    3dcc:	1f c0       	rjmp	.+62     	; 0x3e0c <run+0x5ce>
    3dce:	fe 01       	movw	r30, r28
    3dd0:	e9 5a       	subi	r30, 0xA9	; 169
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	84 e1       	ldi	r24, 0x14	; 20
    3dd6:	91 e0       	ldi	r25, 0x01	; 1
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	80 83       	st	Z, r24
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e9 5a       	subi	r30, 0xA9	; 169
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	80 81       	ld	r24, Z
    3de4:	91 81       	ldd	r25, Z+1	; 0x01
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <run+0x5a8>
    3dea:	fe 01       	movw	r30, r28
    3dec:	e9 5a       	subi	r30, 0xA9	; 169
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	91 83       	std	Z+1, r25	; 0x01
    3df2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df4:	de 01       	movw	r26, r28
    3df6:	a7 5a       	subi	r26, 0xA7	; 167
    3df8:	bf 4f       	sbci	r27, 0xFF	; 255
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e7 5a       	subi	r30, 0xA7	; 167
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	80 81       	ld	r24, Z
    3e02:	91 81       	ldd	r25, Z+1	; 0x01
    3e04:	01 97       	sbiw	r24, 0x01	; 1
    3e06:	11 96       	adiw	r26, 0x01	; 1
    3e08:	9c 93       	st	X, r25
    3e0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e7 5a       	subi	r30, 0xA7	; 167
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	80 81       	ld	r24, Z
    3e14:	91 81       	ldd	r25, Z+1	; 0x01
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	d1 f6       	brne	.-76     	; 0x3dce <run+0x590>
    3e1a:	21 cd       	rjmp	.-1470   	; 0x385e <run+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1c:	8e 01       	movw	r16, r28
    3e1e:	07 5a       	subi	r16, 0xA7	; 167
    3e20:	1f 4f       	sbci	r17, 0xFF	; 255
    3e22:	fe 01       	movw	r30, r28
    3e24:	e5 5a       	subi	r30, 0xA5	; 165
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	60 81       	ld	r22, Z
    3e2a:	71 81       	ldd	r23, Z+1	; 0x01
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
    3e2e:	93 81       	ldd	r25, Z+3	; 0x03
    3e30:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	f8 01       	movw	r30, r16
    3e3a:	91 83       	std	Z+1, r25	; 0x01
    3e3c:	80 83       	st	Z, r24
    3e3e:	de 01       	movw	r26, r28
    3e40:	ab 5a       	subi	r26, 0xAB	; 171
    3e42:	bf 4f       	sbci	r27, 0xFF	; 255
    3e44:	fe 01       	movw	r30, r28
    3e46:	e7 5a       	subi	r30, 0xA7	; 167
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	11 96       	adiw	r26, 0x01	; 1
    3e50:	9c 93       	st	X, r25
    3e52:	8e 93       	st	-X, r24
    3e54:	fe 01       	movw	r30, r28
    3e56:	eb 5a       	subi	r30, 0xAB	; 171
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	80 81       	ld	r24, Z
    3e5c:	91 81       	ldd	r25, Z+1	; 0x01
    3e5e:	01 97       	sbiw	r24, 0x01	; 1
    3e60:	f1 f7       	brne	.-4      	; 0x3e5e <run+0x620>
    3e62:	fe 01       	movw	r30, r28
    3e64:	eb 5a       	subi	r30, 0xAB	; 171
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	91 83       	std	Z+1, r25	; 0x01
    3e6a:	80 83       	st	Z, r24
    3e6c:	f8 cc       	rjmp	.-1552   	; 0x385e <run+0x20>
			_delay_ms(100);
			continue;
		}
		if(data == 'c') //collect item data -> i when the bot is trying to pick up an rfid
    3e6e:	80 91 a7 03 	lds	r24, 0x03A7
    3e72:	83 36       	cpi	r24, 0x63	; 99
    3e74:	09 f0       	breq	.+2      	; 0x3e78 <run+0x63a>
    3e76:	a8 c2       	rjmp	.+1360   	; 0x43c8 <run+0xb8a>
		{
			data='w';
    3e78:	87 e7       	ldi	r24, 0x77	; 119
    3e7a:	80 93 a7 03 	sts	0x03A7, r24
			arm_down();
    3e7e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <arm_down>
    3e82:	fe 01       	movw	r30, r28
    3e84:	ef 5a       	subi	r30, 0xAF	; 175
    3e86:	ff 4f       	sbci	r31, 0xFF	; 255
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 ec       	ldi	r25, 0xC0	; 192
    3e8c:	a8 e2       	ldi	r26, 0x28	; 40
    3e8e:	b5 e4       	ldi	r27, 0x45	; 69
    3e90:	80 83       	st	Z, r24
    3e92:	91 83       	std	Z+1, r25	; 0x01
    3e94:	a2 83       	std	Z+2, r26	; 0x02
    3e96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e98:	8e 01       	movw	r16, r28
    3e9a:	03 5b       	subi	r16, 0xB3	; 179
    3e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	ef 5a       	subi	r30, 0xAF	; 175
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	60 81       	ld	r22, Z
    3ea6:	71 81       	ldd	r23, Z+1	; 0x01
    3ea8:	82 81       	ldd	r24, Z+2	; 0x02
    3eaa:	93 81       	ldd	r25, Z+3	; 0x03
    3eac:	2d ec       	ldi	r18, 0xCD	; 205
    3eae:	3c ec       	ldi	r19, 0xCC	; 204
    3eb0:	4c e2       	ldi	r20, 0x2C	; 44
    3eb2:	55 e4       	ldi	r21, 0x45	; 69
    3eb4:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	f8 01       	movw	r30, r16
    3ebe:	80 83       	st	Z, r24
    3ec0:	91 83       	std	Z+1, r25	; 0x01
    3ec2:	a2 83       	std	Z+2, r26	; 0x02
    3ec4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	e3 5b       	subi	r30, 0xB3	; 179
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	60 81       	ld	r22, Z
    3ece:	71 81       	ldd	r23, Z+1	; 0x01
    3ed0:	82 81       	ldd	r24, Z+2	; 0x02
    3ed2:	93 81       	ldd	r25, Z+3	; 0x03
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	40 e8       	ldi	r20, 0x80	; 128
    3eda:	5f e3       	ldi	r21, 0x3F	; 63
    3edc:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    3ee0:	88 23       	and	r24, r24
    3ee2:	44 f4       	brge	.+16     	; 0x3ef4 <run+0x6b6>
		__ticks = 1;
    3ee4:	fe 01       	movw	r30, r28
    3ee6:	e5 5b       	subi	r30, 0xB5	; 181
    3ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	91 83       	std	Z+1, r25	; 0x01
    3ef0:	80 83       	st	Z, r24
    3ef2:	64 c0       	rjmp	.+200    	; 0x3fbc <run+0x77e>
	else if (__tmp > 65535)
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e3 5b       	subi	r30, 0xB3	; 179
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	60 81       	ld	r22, Z
    3efc:	71 81       	ldd	r23, Z+1	; 0x01
    3efe:	82 81       	ldd	r24, Z+2	; 0x02
    3f00:	93 81       	ldd	r25, Z+3	; 0x03
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	3f ef       	ldi	r19, 0xFF	; 255
    3f06:	4f e7       	ldi	r20, 0x7F	; 127
    3f08:	57 e4       	ldi	r21, 0x47	; 71
    3f0a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    3f0e:	18 16       	cp	r1, r24
    3f10:	0c f0       	brlt	.+2      	; 0x3f14 <run+0x6d6>
    3f12:	43 c0       	rjmp	.+134    	; 0x3f9a <run+0x75c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f14:	fe 01       	movw	r30, r28
    3f16:	ef 5a       	subi	r30, 0xAF	; 175
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	60 81       	ld	r22, Z
    3f1c:	71 81       	ldd	r23, Z+1	; 0x01
    3f1e:	82 81       	ldd	r24, Z+2	; 0x02
    3f20:	93 81       	ldd	r25, Z+3	; 0x03
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	40 e2       	ldi	r20, 0x20	; 32
    3f28:	51 e4       	ldi	r21, 0x41	; 65
    3f2a:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	8e 01       	movw	r16, r28
    3f34:	05 5b       	subi	r16, 0xB5	; 181
    3f36:	1f 4f       	sbci	r17, 0xFF	; 255
    3f38:	bc 01       	movw	r22, r24
    3f3a:	cd 01       	movw	r24, r26
    3f3c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3f40:	dc 01       	movw	r26, r24
    3f42:	cb 01       	movw	r24, r22
    3f44:	f8 01       	movw	r30, r16
    3f46:	91 83       	std	Z+1, r25	; 0x01
    3f48:	80 83       	st	Z, r24
    3f4a:	1f c0       	rjmp	.+62     	; 0x3f8a <run+0x74c>
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	e7 5b       	subi	r30, 0xB7	; 183
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	84 e1       	ldi	r24, 0x14	; 20
    3f54:	91 e0       	ldi	r25, 0x01	; 1
    3f56:	91 83       	std	Z+1, r25	; 0x01
    3f58:	80 83       	st	Z, r24
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	e7 5b       	subi	r30, 0xB7	; 183
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	80 81       	ld	r24, Z
    3f62:	91 81       	ldd	r25, Z+1	; 0x01
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	f1 f7       	brne	.-4      	; 0x3f64 <run+0x726>
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e7 5b       	subi	r30, 0xB7	; 183
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	91 83       	std	Z+1, r25	; 0x01
    3f70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f72:	de 01       	movw	r26, r28
    3f74:	a5 5b       	subi	r26, 0xB5	; 181
    3f76:	bf 4f       	sbci	r27, 0xFF	; 255
    3f78:	fe 01       	movw	r30, r28
    3f7a:	e5 5b       	subi	r30, 0xB5	; 181
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	80 81       	ld	r24, Z
    3f80:	91 81       	ldd	r25, Z+1	; 0x01
    3f82:	01 97       	sbiw	r24, 0x01	; 1
    3f84:	11 96       	adiw	r26, 0x01	; 1
    3f86:	9c 93       	st	X, r25
    3f88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	e5 5b       	subi	r30, 0xB5	; 181
    3f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f90:	80 81       	ld	r24, Z
    3f92:	91 81       	ldd	r25, Z+1	; 0x01
    3f94:	00 97       	sbiw	r24, 0x00	; 0
    3f96:	d1 f6       	brne	.-76     	; 0x3f4c <run+0x70e>
    3f98:	27 c0       	rjmp	.+78     	; 0x3fe8 <run+0x7aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f9a:	8e 01       	movw	r16, r28
    3f9c:	05 5b       	subi	r16, 0xB5	; 181
    3f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa0:	fe 01       	movw	r30, r28
    3fa2:	e3 5b       	subi	r30, 0xB3	; 179
    3fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa6:	60 81       	ld	r22, Z
    3fa8:	71 81       	ldd	r23, Z+1	; 0x01
    3faa:	82 81       	ldd	r24, Z+2	; 0x02
    3fac:	93 81       	ldd	r25, Z+3	; 0x03
    3fae:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	f8 01       	movw	r30, r16
    3fb8:	91 83       	std	Z+1, r25	; 0x01
    3fba:	80 83       	st	Z, r24
    3fbc:	de 01       	movw	r26, r28
    3fbe:	a9 5b       	subi	r26, 0xB9	; 185
    3fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e5 5b       	subi	r30, 0xB5	; 181
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	80 81       	ld	r24, Z
    3fca:	91 81       	ldd	r25, Z+1	; 0x01
    3fcc:	8d 93       	st	X+, r24
    3fce:	9c 93       	st	X, r25
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e9 5b       	subi	r30, 0xB9	; 185
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	80 81       	ld	r24, Z
    3fd8:	91 81       	ldd	r25, Z+1	; 0x01
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	f1 f7       	brne	.-4      	; 0x3fda <run+0x79c>
    3fde:	fe 01       	movw	r30, r28
    3fe0:	e9 5b       	subi	r30, 0xB9	; 185
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	91 83       	std	Z+1, r25	; 0x01
    3fe6:	80 83       	st	Z, r24
			_delay_ms(2700);
			stop_arm();
    3fe8:	0e 94 65 16 	call	0x2cca	; 0x2cca <stop_arm>
    3fec:	fe 01       	movw	r30, r28
    3fee:	ed 5b       	subi	r30, 0xBD	; 189
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	aa ef       	ldi	r26, 0xFA	; 250
    3ff8:	b4 e4       	ldi	r27, 0x44	; 68
    3ffa:	80 83       	st	Z, r24
    3ffc:	91 83       	std	Z+1, r25	; 0x01
    3ffe:	a2 83       	std	Z+2, r26	; 0x02
    4000:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4002:	8e 01       	movw	r16, r28
    4004:	01 5c       	subi	r16, 0xC1	; 193
    4006:	1f 4f       	sbci	r17, 0xFF	; 255
    4008:	fe 01       	movw	r30, r28
    400a:	ed 5b       	subi	r30, 0xBD	; 189
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	60 81       	ld	r22, Z
    4010:	71 81       	ldd	r23, Z+1	; 0x01
    4012:	82 81       	ldd	r24, Z+2	; 0x02
    4014:	93 81       	ldd	r25, Z+3	; 0x03
    4016:	2d ec       	ldi	r18, 0xCD	; 205
    4018:	3c ec       	ldi	r19, 0xCC	; 204
    401a:	4c e2       	ldi	r20, 0x2C	; 44
    401c:	55 e4       	ldi	r21, 0x45	; 69
    401e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	f8 01       	movw	r30, r16
    4028:	80 83       	st	Z, r24
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	a2 83       	std	Z+2, r26	; 0x02
    402e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4030:	fe 01       	movw	r30, r28
    4032:	ff 96       	adiw	r30, 0x3f	; 63
    4034:	60 81       	ld	r22, Z
    4036:	71 81       	ldd	r23, Z+1	; 0x01
    4038:	82 81       	ldd	r24, Z+2	; 0x02
    403a:	93 81       	ldd	r25, Z+3	; 0x03
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	40 e8       	ldi	r20, 0x80	; 128
    4042:	5f e3       	ldi	r21, 0x3F	; 63
    4044:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    4048:	88 23       	and	r24, r24
    404a:	2c f4       	brge	.+10     	; 0x4056 <run+0x818>
		__ticks = 1;
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	9e af       	std	Y+62, r25	; 0x3e
    4052:	8d af       	std	Y+61, r24	; 0x3d
    4054:	46 c0       	rjmp	.+140    	; 0x40e2 <run+0x8a4>
	else if (__tmp > 65535)
    4056:	fe 01       	movw	r30, r28
    4058:	ff 96       	adiw	r30, 0x3f	; 63
    405a:	60 81       	ld	r22, Z
    405c:	71 81       	ldd	r23, Z+1	; 0x01
    405e:	82 81       	ldd	r24, Z+2	; 0x02
    4060:	93 81       	ldd	r25, Z+3	; 0x03
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	3f ef       	ldi	r19, 0xFF	; 255
    4066:	4f e7       	ldi	r20, 0x7F	; 127
    4068:	57 e4       	ldi	r21, 0x47	; 71
    406a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    406e:	18 16       	cp	r1, r24
    4070:	64 f5       	brge	.+88     	; 0x40ca <run+0x88c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4072:	fe 01       	movw	r30, r28
    4074:	ed 5b       	subi	r30, 0xBD	; 189
    4076:	ff 4f       	sbci	r31, 0xFF	; 255
    4078:	60 81       	ld	r22, Z
    407a:	71 81       	ldd	r23, Z+1	; 0x01
    407c:	82 81       	ldd	r24, Z+2	; 0x02
    407e:	93 81       	ldd	r25, Z+3	; 0x03
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	40 e2       	ldi	r20, 0x20	; 32
    4086:	51 e4       	ldi	r21, 0x41	; 65
    4088:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	bc 01       	movw	r22, r24
    4092:	cd 01       	movw	r24, r26
    4094:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	9e af       	std	Y+62, r25	; 0x3e
    409e:	8d af       	std	Y+61, r24	; 0x3d
    40a0:	0f c0       	rjmp	.+30     	; 0x40c0 <run+0x882>
    40a2:	84 e1       	ldi	r24, 0x14	; 20
    40a4:	91 e0       	ldi	r25, 0x01	; 1
    40a6:	9c af       	std	Y+60, r25	; 0x3c
    40a8:	8b af       	std	Y+59, r24	; 0x3b
    40aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    40ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    40ae:	01 97       	sbiw	r24, 0x01	; 1
    40b0:	f1 f7       	brne	.-4      	; 0x40ae <run+0x870>
    40b2:	9c af       	std	Y+60, r25	; 0x3c
    40b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    40b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    40ba:	01 97       	sbiw	r24, 0x01	; 1
    40bc:	9e af       	std	Y+62, r25	; 0x3e
    40be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    40c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    40c4:	00 97       	sbiw	r24, 0x00	; 0
    40c6:	69 f7       	brne	.-38     	; 0x40a2 <run+0x864>
    40c8:	16 c0       	rjmp	.+44     	; 0x40f6 <run+0x8b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ca:	fe 01       	movw	r30, r28
    40cc:	ff 96       	adiw	r30, 0x3f	; 63
    40ce:	60 81       	ld	r22, Z
    40d0:	71 81       	ldd	r23, Z+1	; 0x01
    40d2:	82 81       	ldd	r24, Z+2	; 0x02
    40d4:	93 81       	ldd	r25, Z+3	; 0x03
    40d6:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    40da:	dc 01       	movw	r26, r24
    40dc:	cb 01       	movw	r24, r22
    40de:	9e af       	std	Y+62, r25	; 0x3e
    40e0:	8d af       	std	Y+61, r24	; 0x3d
    40e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    40e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    40e6:	9a af       	std	Y+58, r25	; 0x3a
    40e8:	89 af       	std	Y+57, r24	; 0x39
    40ea:	89 ad       	ldd	r24, Y+57	; 0x39
    40ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    40ee:	01 97       	sbiw	r24, 0x01	; 1
    40f0:	f1 f7       	brne	.-4      	; 0x40ee <run+0x8b0>
    40f2:	9a af       	std	Y+58, r25	; 0x3a
    40f4:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2000);
	       	grab();
    40f6:	0e 94 65 18 	call	0x30ca	; 0x30ca <grab>
			arm_up();
    40fa:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <arm_up>
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	90 ec       	ldi	r25, 0xC0	; 192
    4102:	a1 e4       	ldi	r26, 0x41	; 65
    4104:	b5 e4       	ldi	r27, 0x45	; 69
    4106:	8d ab       	std	Y+53, r24	; 0x35
    4108:	9e ab       	std	Y+54, r25	; 0x36
    410a:	af ab       	std	Y+55, r26	; 0x37
    410c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    410e:	6d a9       	ldd	r22, Y+53	; 0x35
    4110:	7e a9       	ldd	r23, Y+54	; 0x36
    4112:	8f a9       	ldd	r24, Y+55	; 0x37
    4114:	98 ad       	ldd	r25, Y+56	; 0x38
    4116:	2d ec       	ldi	r18, 0xCD	; 205
    4118:	3c ec       	ldi	r19, 0xCC	; 204
    411a:	4c e2       	ldi	r20, 0x2C	; 44
    411c:	55 e4       	ldi	r21, 0x45	; 69
    411e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	89 ab       	std	Y+49, r24	; 0x31
    4128:	9a ab       	std	Y+50, r25	; 0x32
    412a:	ab ab       	std	Y+51, r26	; 0x33
    412c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    412e:	69 a9       	ldd	r22, Y+49	; 0x31
    4130:	7a a9       	ldd	r23, Y+50	; 0x32
    4132:	8b a9       	ldd	r24, Y+51	; 0x33
    4134:	9c a9       	ldd	r25, Y+52	; 0x34
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	40 e8       	ldi	r20, 0x80	; 128
    413c:	5f e3       	ldi	r21, 0x3F	; 63
    413e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    4142:	88 23       	and	r24, r24
    4144:	2c f4       	brge	.+10     	; 0x4150 <run+0x912>
		__ticks = 1;
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	98 ab       	std	Y+48, r25	; 0x30
    414c:	8f a7       	std	Y+47, r24	; 0x2f
    414e:	3f c0       	rjmp	.+126    	; 0x41ce <run+0x990>
	else if (__tmp > 65535)
    4150:	69 a9       	ldd	r22, Y+49	; 0x31
    4152:	7a a9       	ldd	r23, Y+50	; 0x32
    4154:	8b a9       	ldd	r24, Y+51	; 0x33
    4156:	9c a9       	ldd	r25, Y+52	; 0x34
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	3f ef       	ldi	r19, 0xFF	; 255
    415c:	4f e7       	ldi	r20, 0x7F	; 127
    415e:	57 e4       	ldi	r21, 0x47	; 71
    4160:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    4164:	18 16       	cp	r1, r24
    4166:	4c f5       	brge	.+82     	; 0x41ba <run+0x97c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4168:	6d a9       	ldd	r22, Y+53	; 0x35
    416a:	7e a9       	ldd	r23, Y+54	; 0x36
    416c:	8f a9       	ldd	r24, Y+55	; 0x37
    416e:	98 ad       	ldd	r25, Y+56	; 0x38
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	40 e2       	ldi	r20, 0x20	; 32
    4176:	51 e4       	ldi	r21, 0x41	; 65
    4178:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	bc 01       	movw	r22, r24
    4182:	cd 01       	movw	r24, r26
    4184:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	98 ab       	std	Y+48, r25	; 0x30
    418e:	8f a7       	std	Y+47, r24	; 0x2f
    4190:	0f c0       	rjmp	.+30     	; 0x41b0 <run+0x972>
    4192:	84 e1       	ldi	r24, 0x14	; 20
    4194:	91 e0       	ldi	r25, 0x01	; 1
    4196:	9e a7       	std	Y+46, r25	; 0x2e
    4198:	8d a7       	std	Y+45, r24	; 0x2d
    419a:	8d a5       	ldd	r24, Y+45	; 0x2d
    419c:	9e a5       	ldd	r25, Y+46	; 0x2e
    419e:	01 97       	sbiw	r24, 0x01	; 1
    41a0:	f1 f7       	brne	.-4      	; 0x419e <run+0x960>
    41a2:	9e a7       	std	Y+46, r25	; 0x2e
    41a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    41a8:	98 a9       	ldd	r25, Y+48	; 0x30
    41aa:	01 97       	sbiw	r24, 0x01	; 1
    41ac:	98 ab       	std	Y+48, r25	; 0x30
    41ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    41b2:	98 a9       	ldd	r25, Y+48	; 0x30
    41b4:	00 97       	sbiw	r24, 0x00	; 0
    41b6:	69 f7       	brne	.-38     	; 0x4192 <run+0x954>
    41b8:	14 c0       	rjmp	.+40     	; 0x41e2 <run+0x9a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ba:	69 a9       	ldd	r22, Y+49	; 0x31
    41bc:	7a a9       	ldd	r23, Y+50	; 0x32
    41be:	8b a9       	ldd	r24, Y+51	; 0x33
    41c0:	9c a9       	ldd	r25, Y+52	; 0x34
    41c2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	98 ab       	std	Y+48, r25	; 0x30
    41cc:	8f a7       	std	Y+47, r24	; 0x2f
    41ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    41d0:	98 a9       	ldd	r25, Y+48	; 0x30
    41d2:	9c a7       	std	Y+44, r25	; 0x2c
    41d4:	8b a7       	std	Y+43, r24	; 0x2b
    41d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    41d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    41da:	01 97       	sbiw	r24, 0x01	; 1
    41dc:	f1 f7       	brne	.-4      	; 0x41da <run+0x99c>
    41de:	9c a7       	std	Y+44, r25	; 0x2c
    41e0:	8b a7       	std	Y+43, r24	; 0x2b
		    _delay_ms(3100);
		    stop_arm();
    41e2:	0e 94 65 16 	call	0x2cca	; 0x2cca <stop_arm>
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	aa ef       	ldi	r26, 0xFA	; 250
    41ec:	b4 e4       	ldi	r27, 0x44	; 68
    41ee:	8f a3       	std	Y+39, r24	; 0x27
    41f0:	98 a7       	std	Y+40, r25	; 0x28
    41f2:	a9 a7       	std	Y+41, r26	; 0x29
    41f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f6:	6f a1       	ldd	r22, Y+39	; 0x27
    41f8:	78 a5       	ldd	r23, Y+40	; 0x28
    41fa:	89 a5       	ldd	r24, Y+41	; 0x29
    41fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    41fe:	2d ec       	ldi	r18, 0xCD	; 205
    4200:	3c ec       	ldi	r19, 0xCC	; 204
    4202:	4c e2       	ldi	r20, 0x2C	; 44
    4204:	55 e4       	ldi	r21, 0x45	; 69
    4206:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	8b a3       	std	Y+35, r24	; 0x23
    4210:	9c a3       	std	Y+36, r25	; 0x24
    4212:	ad a3       	std	Y+37, r26	; 0x25
    4214:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4216:	6b a1       	ldd	r22, Y+35	; 0x23
    4218:	7c a1       	ldd	r23, Y+36	; 0x24
    421a:	8d a1       	ldd	r24, Y+37	; 0x25
    421c:	9e a1       	ldd	r25, Y+38	; 0x26
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	40 e8       	ldi	r20, 0x80	; 128
    4224:	5f e3       	ldi	r21, 0x3F	; 63
    4226:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    422a:	88 23       	and	r24, r24
    422c:	2c f4       	brge	.+10     	; 0x4238 <run+0x9fa>
		__ticks = 1;
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	9a a3       	std	Y+34, r25	; 0x22
    4234:	89 a3       	std	Y+33, r24	; 0x21
    4236:	3f c0       	rjmp	.+126    	; 0x42b6 <run+0xa78>
	else if (__tmp > 65535)
    4238:	6b a1       	ldd	r22, Y+35	; 0x23
    423a:	7c a1       	ldd	r23, Y+36	; 0x24
    423c:	8d a1       	ldd	r24, Y+37	; 0x25
    423e:	9e a1       	ldd	r25, Y+38	; 0x26
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	3f ef       	ldi	r19, 0xFF	; 255
    4244:	4f e7       	ldi	r20, 0x7F	; 127
    4246:	57 e4       	ldi	r21, 0x47	; 71
    4248:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    424c:	18 16       	cp	r1, r24
    424e:	4c f5       	brge	.+82     	; 0x42a2 <run+0xa64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4250:	6f a1       	ldd	r22, Y+39	; 0x27
    4252:	78 a5       	ldd	r23, Y+40	; 0x28
    4254:	89 a5       	ldd	r24, Y+41	; 0x29
    4256:	9a a5       	ldd	r25, Y+42	; 0x2a
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	40 e2       	ldi	r20, 0x20	; 32
    425e:	51 e4       	ldi	r21, 0x41	; 65
    4260:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	bc 01       	movw	r22, r24
    426a:	cd 01       	movw	r24, r26
    426c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	9a a3       	std	Y+34, r25	; 0x22
    4276:	89 a3       	std	Y+33, r24	; 0x21
    4278:	0f c0       	rjmp	.+30     	; 0x4298 <run+0xa5a>
    427a:	84 e1       	ldi	r24, 0x14	; 20
    427c:	91 e0       	ldi	r25, 0x01	; 1
    427e:	98 a3       	std	Y+32, r25	; 0x20
    4280:	8f 8f       	std	Y+31, r24	; 0x1f
    4282:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4284:	98 a1       	ldd	r25, Y+32	; 0x20
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	f1 f7       	brne	.-4      	; 0x4286 <run+0xa48>
    428a:	98 a3       	std	Y+32, r25	; 0x20
    428c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    428e:	89 a1       	ldd	r24, Y+33	; 0x21
    4290:	9a a1       	ldd	r25, Y+34	; 0x22
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	9a a3       	std	Y+34, r25	; 0x22
    4296:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4298:	89 a1       	ldd	r24, Y+33	; 0x21
    429a:	9a a1       	ldd	r25, Y+34	; 0x22
    429c:	00 97       	sbiw	r24, 0x00	; 0
    429e:	69 f7       	brne	.-38     	; 0x427a <run+0xa3c>
    42a0:	14 c0       	rjmp	.+40     	; 0x42ca <run+0xa8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a2:	6b a1       	ldd	r22, Y+35	; 0x23
    42a4:	7c a1       	ldd	r23, Y+36	; 0x24
    42a6:	8d a1       	ldd	r24, Y+37	; 0x25
    42a8:	9e a1       	ldd	r25, Y+38	; 0x26
    42aa:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	9a a3       	std	Y+34, r25	; 0x22
    42b4:	89 a3       	std	Y+33, r24	; 0x21
    42b6:	89 a1       	ldd	r24, Y+33	; 0x21
    42b8:	9a a1       	ldd	r25, Y+34	; 0x22
    42ba:	9e 8f       	std	Y+30, r25	; 0x1e
    42bc:	8d 8f       	std	Y+29, r24	; 0x1d
    42be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42c2:	01 97       	sbiw	r24, 0x01	; 1
    42c4:	f1 f7       	brne	.-4      	; 0x42c2 <run+0xa84>
    42c6:	9e 8f       	std	Y+30, r25	; 0x1e
    42c8:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(2000);
			lcd_cursor(2,1);
    42ca:	82 e0       	ldi	r24, 0x02	; 2
    42cc:	61 e0       	ldi	r22, 0x01	; 1
    42ce:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
			lcd_string("Collecting");
    42d2:	85 e5       	ldi	r24, 0x55	; 85
    42d4:	92 e0       	ldi	r25, 0x02	; 2
    42d6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
    42da:	80 e0       	ldi	r24, 0x00	; 0
    42dc:	90 ec       	ldi	r25, 0xC0	; 192
    42de:	aa e5       	ldi	r26, 0x5A	; 90
    42e0:	b5 e4       	ldi	r27, 0x45	; 69
    42e2:	89 8f       	std	Y+25, r24	; 0x19
    42e4:	9a 8f       	std	Y+26, r25	; 0x1a
    42e6:	ab 8f       	std	Y+27, r26	; 0x1b
    42e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ea:	69 8d       	ldd	r22, Y+25	; 0x19
    42ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42f2:	2d ec       	ldi	r18, 0xCD	; 205
    42f4:	3c ec       	ldi	r19, 0xCC	; 204
    42f6:	4c e2       	ldi	r20, 0x2C	; 44
    42f8:	55 e4       	ldi	r21, 0x45	; 69
    42fa:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    42fe:	dc 01       	movw	r26, r24
    4300:	cb 01       	movw	r24, r22
    4302:	8d 8b       	std	Y+21, r24	; 0x15
    4304:	9e 8b       	std	Y+22, r25	; 0x16
    4306:	af 8b       	std	Y+23, r26	; 0x17
    4308:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    430a:	6d 89       	ldd	r22, Y+21	; 0x15
    430c:	7e 89       	ldd	r23, Y+22	; 0x16
    430e:	8f 89       	ldd	r24, Y+23	; 0x17
    4310:	98 8d       	ldd	r25, Y+24	; 0x18
    4312:	20 e0       	ldi	r18, 0x00	; 0
    4314:	30 e0       	ldi	r19, 0x00	; 0
    4316:	40 e8       	ldi	r20, 0x80	; 128
    4318:	5f e3       	ldi	r21, 0x3F	; 63
    431a:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    431e:	88 23       	and	r24, r24
    4320:	2c f4       	brge	.+10     	; 0x432c <run+0xaee>
		__ticks = 1;
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	9c 8b       	std	Y+20, r25	; 0x14
    4328:	8b 8b       	std	Y+19, r24	; 0x13
    432a:	3f c0       	rjmp	.+126    	; 0x43aa <run+0xb6c>
	else if (__tmp > 65535)
    432c:	6d 89       	ldd	r22, Y+21	; 0x15
    432e:	7e 89       	ldd	r23, Y+22	; 0x16
    4330:	8f 89       	ldd	r24, Y+23	; 0x17
    4332:	98 8d       	ldd	r25, Y+24	; 0x18
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	3f ef       	ldi	r19, 0xFF	; 255
    4338:	4f e7       	ldi	r20, 0x7F	; 127
    433a:	57 e4       	ldi	r21, 0x47	; 71
    433c:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    4340:	18 16       	cp	r1, r24
    4342:	4c f5       	brge	.+82     	; 0x4396 <run+0xb58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4344:	69 8d       	ldd	r22, Y+25	; 0x19
    4346:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4348:	8b 8d       	ldd	r24, Y+27	; 0x1b
    434a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	40 e2       	ldi	r20, 0x20	; 32
    4352:	51 e4       	ldi	r21, 0x41	; 65
    4354:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    4358:	dc 01       	movw	r26, r24
    435a:	cb 01       	movw	r24, r22
    435c:	bc 01       	movw	r22, r24
    435e:	cd 01       	movw	r24, r26
    4360:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    4364:	dc 01       	movw	r26, r24
    4366:	cb 01       	movw	r24, r22
    4368:	9c 8b       	std	Y+20, r25	; 0x14
    436a:	8b 8b       	std	Y+19, r24	; 0x13
    436c:	0f c0       	rjmp	.+30     	; 0x438c <run+0xb4e>
    436e:	84 e1       	ldi	r24, 0x14	; 20
    4370:	91 e0       	ldi	r25, 0x01	; 1
    4372:	9a 8b       	std	Y+18, r25	; 0x12
    4374:	89 8b       	std	Y+17, r24	; 0x11
    4376:	89 89       	ldd	r24, Y+17	; 0x11
    4378:	9a 89       	ldd	r25, Y+18	; 0x12
    437a:	01 97       	sbiw	r24, 0x01	; 1
    437c:	f1 f7       	brne	.-4      	; 0x437a <run+0xb3c>
    437e:	9a 8b       	std	Y+18, r25	; 0x12
    4380:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4382:	8b 89       	ldd	r24, Y+19	; 0x13
    4384:	9c 89       	ldd	r25, Y+20	; 0x14
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	9c 8b       	std	Y+20, r25	; 0x14
    438a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    438c:	8b 89       	ldd	r24, Y+19	; 0x13
    438e:	9c 89       	ldd	r25, Y+20	; 0x14
    4390:	00 97       	sbiw	r24, 0x00	; 0
    4392:	69 f7       	brne	.-38     	; 0x436e <run+0xb30>
    4394:	14 c0       	rjmp	.+40     	; 0x43be <run+0xb80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4396:	6d 89       	ldd	r22, Y+21	; 0x15
    4398:	7e 89       	ldd	r23, Y+22	; 0x16
    439a:	8f 89       	ldd	r24, Y+23	; 0x17
    439c:	98 8d       	ldd	r25, Y+24	; 0x18
    439e:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	9c 8b       	std	Y+20, r25	; 0x14
    43a8:	8b 8b       	std	Y+19, r24	; 0x13
    43aa:	8b 89       	ldd	r24, Y+19	; 0x13
    43ac:	9c 89       	ldd	r25, Y+20	; 0x14
    43ae:	98 8b       	std	Y+16, r25	; 0x10
    43b0:	8f 87       	std	Y+15, r24	; 0x0f
    43b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    43b4:	98 89       	ldd	r25, Y+16	; 0x10
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	f1 f7       	brne	.-4      	; 0x43b6 <run+0xb78>
    43ba:	98 8b       	std	Y+16, r25	; 0x10
    43bc:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3500);
			readrfidtag();	
    43be:	0e 94 f6 15 	call	0x2bec	; 0x2bec <readrfidtag>
			clearrfid();     
    43c2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <clearrfid>
    43c6:	4b ca       	rjmp	.-2922   	; 0x385e <run+0x20>
			continue;   
			
		}
		if(data == 'd') //drop_item
    43c8:	80 91 a7 03 	lds	r24, 0x03A7
    43cc:	84 36       	cpi	r24, 0x64	; 100
    43ce:	09 f0       	breq	.+2      	; 0x43d2 <run+0xb94>
    43d0:	86 c0       	rjmp	.+268    	; 0x44de <run+0xca0>
		{
			data='w';
    43d2:	87 e7       	ldi	r24, 0x77	; 119
    43d4:	80 93 a7 03 	sts	0x03A7, r24
			go_down();
    43d8:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <go_down>
			release();
    43dc:	0e 94 60 19 	call	0x32c0	; 0x32c0 <release>
	        go_up();
    43e0:	0e 94 6f 16 	call	0x2cde	; 0x2cde <go_up>
			lcd_cursor(2,1);
    43e4:	82 e0       	ldi	r24, 0x02	; 2
    43e6:	61 e0       	ldi	r22, 0x01	; 1
    43e8:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
			lcd_string("Dropping");
    43ec:	80 e6       	ldi	r24, 0x60	; 96
    43ee:	92 e0       	ldi	r25, 0x02	; 2
    43f0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
    43f4:	80 e0       	ldi	r24, 0x00	; 0
    43f6:	90 ec       	ldi	r25, 0xC0	; 192
    43f8:	aa e5       	ldi	r26, 0x5A	; 90
    43fa:	b5 e4       	ldi	r27, 0x45	; 69
    43fc:	8b 87       	std	Y+11, r24	; 0x0b
    43fe:	9c 87       	std	Y+12, r25	; 0x0c
    4400:	ad 87       	std	Y+13, r26	; 0x0d
    4402:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4404:	6b 85       	ldd	r22, Y+11	; 0x0b
    4406:	7c 85       	ldd	r23, Y+12	; 0x0c
    4408:	8d 85       	ldd	r24, Y+13	; 0x0d
    440a:	9e 85       	ldd	r25, Y+14	; 0x0e
    440c:	2d ec       	ldi	r18, 0xCD	; 205
    440e:	3c ec       	ldi	r19, 0xCC	; 204
    4410:	4c e2       	ldi	r20, 0x2C	; 44
    4412:	55 e4       	ldi	r21, 0x45	; 69
    4414:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    4418:	dc 01       	movw	r26, r24
    441a:	cb 01       	movw	r24, r22
    441c:	8f 83       	std	Y+7, r24	; 0x07
    441e:	98 87       	std	Y+8, r25	; 0x08
    4420:	a9 87       	std	Y+9, r26	; 0x09
    4422:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4424:	6f 81       	ldd	r22, Y+7	; 0x07
    4426:	78 85       	ldd	r23, Y+8	; 0x08
    4428:	89 85       	ldd	r24, Y+9	; 0x09
    442a:	9a 85       	ldd	r25, Y+10	; 0x0a
    442c:	20 e0       	ldi	r18, 0x00	; 0
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	40 e8       	ldi	r20, 0x80	; 128
    4432:	5f e3       	ldi	r21, 0x3F	; 63
    4434:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ltsf2>
    4438:	88 23       	and	r24, r24
    443a:	2c f4       	brge	.+10     	; 0x4446 <run+0xc08>
		__ticks = 1;
    443c:	81 e0       	ldi	r24, 0x01	; 1
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	9e 83       	std	Y+6, r25	; 0x06
    4442:	8d 83       	std	Y+5, r24	; 0x05
    4444:	3f c0       	rjmp	.+126    	; 0x44c4 <run+0xc86>
	else if (__tmp > 65535)
    4446:	6f 81       	ldd	r22, Y+7	; 0x07
    4448:	78 85       	ldd	r23, Y+8	; 0x08
    444a:	89 85       	ldd	r24, Y+9	; 0x09
    444c:	9a 85       	ldd	r25, Y+10	; 0x0a
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	3f ef       	ldi	r19, 0xFF	; 255
    4452:	4f e7       	ldi	r20, 0x7F	; 127
    4454:	57 e4       	ldi	r21, 0x47	; 71
    4456:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__gtsf2>
    445a:	18 16       	cp	r1, r24
    445c:	4c f5       	brge	.+82     	; 0x44b0 <run+0xc72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    445e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4460:	7c 85       	ldd	r23, Y+12	; 0x0c
    4462:	8d 85       	ldd	r24, Y+13	; 0x0d
    4464:	9e 85       	ldd	r25, Y+14	; 0x0e
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	40 e2       	ldi	r20, 0x20	; 32
    446c:	51 e4       	ldi	r21, 0x41	; 65
    446e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__mulsf3>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	bc 01       	movw	r22, r24
    4478:	cd 01       	movw	r24, r26
    447a:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    447e:	dc 01       	movw	r26, r24
    4480:	cb 01       	movw	r24, r22
    4482:	9e 83       	std	Y+6, r25	; 0x06
    4484:	8d 83       	std	Y+5, r24	; 0x05
    4486:	0f c0       	rjmp	.+30     	; 0x44a6 <run+0xc68>
    4488:	84 e1       	ldi	r24, 0x14	; 20
    448a:	91 e0       	ldi	r25, 0x01	; 1
    448c:	9c 83       	std	Y+4, r25	; 0x04
    448e:	8b 83       	std	Y+3, r24	; 0x03
    4490:	8b 81       	ldd	r24, Y+3	; 0x03
    4492:	9c 81       	ldd	r25, Y+4	; 0x04
    4494:	01 97       	sbiw	r24, 0x01	; 1
    4496:	f1 f7       	brne	.-4      	; 0x4494 <run+0xc56>
    4498:	9c 83       	std	Y+4, r25	; 0x04
    449a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    449c:	8d 81       	ldd	r24, Y+5	; 0x05
    449e:	9e 81       	ldd	r25, Y+6	; 0x06
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	9e 83       	std	Y+6, r25	; 0x06
    44a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a6:	8d 81       	ldd	r24, Y+5	; 0x05
    44a8:	9e 81       	ldd	r25, Y+6	; 0x06
    44aa:	00 97       	sbiw	r24, 0x00	; 0
    44ac:	69 f7       	brne	.-38     	; 0x4488 <run+0xc4a>
    44ae:	14 c0       	rjmp	.+40     	; 0x44d8 <run+0xc9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b0:	6f 81       	ldd	r22, Y+7	; 0x07
    44b2:	78 85       	ldd	r23, Y+8	; 0x08
    44b4:	89 85       	ldd	r24, Y+9	; 0x09
    44b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b8:	0e 94 8b 22 	call	0x4516	; 0x4516 <__fixunssfsi>
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22
    44c0:	9e 83       	std	Y+6, r25	; 0x06
    44c2:	8d 83       	std	Y+5, r24	; 0x05
    44c4:	8d 81       	ldd	r24, Y+5	; 0x05
    44c6:	9e 81       	ldd	r25, Y+6	; 0x06
    44c8:	9a 83       	std	Y+2, r25	; 0x02
    44ca:	89 83       	std	Y+1, r24	; 0x01
    44cc:	89 81       	ldd	r24, Y+1	; 0x01
    44ce:	9a 81       	ldd	r25, Y+2	; 0x02
    44d0:	01 97       	sbiw	r24, 0x01	; 1
    44d2:	f1 f7       	brne	.-4      	; 0x44d0 <run+0xc92>
    44d4:	9a 83       	std	Y+2, r25	; 0x02
    44d6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3500);
			senddroppedsig();
    44d8:	0e 94 12 15 	call	0x2a24	; 0x2a24 <senddroppedsig>
    44dc:	c0 c9       	rjmp	.-3200   	; 0x385e <run+0x20>
			continue;
		}
		
		while(1) 
		{
			if(move_bot() == 1)
    44de:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <move_bot>
    44e2:	81 30       	cpi	r24, 0x01	; 1
    44e4:	91 05       	cpc	r25, r1
    44e6:	09 f0       	breq	.+2      	; 0x44ea <run+0xcac>
    44e8:	ba c9       	rjmp	.-3212   	; 0x385e <run+0x20>
    44ea:	f9 cf       	rjmp	.-14     	; 0x44de <run+0xca0>

000044ec <main>:
}



int main(void)
{
    44ec:	df 93       	push	r29
    44ee:	cf 93       	push	r28
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    44f4:	0e 94 82 01 	call	0x304	; 0x304 <init_devices>
	lcd_cursor(1,1);		
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	61 e0       	ldi	r22, 0x01	; 1
    44fc:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_cursor>
	lcd_string("Welcome");
    4500:	89 e6       	ldi	r24, 0x69	; 105
    4502:	92 e0       	ldi	r25, 0x02	; 2
    4504:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_string>
	//UDR0 = 'a';
	//checkstraight();

	//checkfollow();
	//checkarm();
	run();
    4508:	0e 94 1f 1c 	call	0x383e	; 0x383e <run>
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	90 e0       	ldi	r25, 0x00	; 0
	
	
}
    4510:	cf 91       	pop	r28
    4512:	df 91       	pop	r29
    4514:	08 95       	ret

00004516 <__fixunssfsi>:
    4516:	ef 92       	push	r14
    4518:	ff 92       	push	r15
    451a:	0f 93       	push	r16
    451c:	1f 93       	push	r17
    451e:	7b 01       	movw	r14, r22
    4520:	8c 01       	movw	r16, r24
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	40 e0       	ldi	r20, 0x00	; 0
    4528:	5f e4       	ldi	r21, 0x4F	; 79
    452a:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <__gesf2>
    452e:	88 23       	and	r24, r24
    4530:	8c f0       	brlt	.+34     	; 0x4554 <__fixunssfsi+0x3e>
    4532:	c8 01       	movw	r24, r16
    4534:	b7 01       	movw	r22, r14
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	40 e0       	ldi	r20, 0x00	; 0
    453c:	5f e4       	ldi	r21, 0x4F	; 79
    453e:	0e 94 03 24 	call	0x4806	; 0x4806 <__subsf3>
    4542:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__fixsfsi>
    4546:	9b 01       	movw	r18, r22
    4548:	ac 01       	movw	r20, r24
    454a:	20 50       	subi	r18, 0x00	; 0
    454c:	30 40       	sbci	r19, 0x00	; 0
    454e:	40 40       	sbci	r20, 0x00	; 0
    4550:	50 48       	sbci	r21, 0x80	; 128
    4552:	06 c0       	rjmp	.+12     	; 0x4560 <__fixunssfsi+0x4a>
    4554:	c8 01       	movw	r24, r16
    4556:	b7 01       	movw	r22, r14
    4558:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__fixsfsi>
    455c:	9b 01       	movw	r18, r22
    455e:	ac 01       	movw	r20, r24
    4560:	b9 01       	movw	r22, r18
    4562:	ca 01       	movw	r24, r20
    4564:	1f 91       	pop	r17
    4566:	0f 91       	pop	r16
    4568:	ff 90       	pop	r15
    456a:	ef 90       	pop	r14
    456c:	08 95       	ret

0000456e <_fpadd_parts>:
    456e:	a0 e0       	ldi	r26, 0x00	; 0
    4570:	b0 e0       	ldi	r27, 0x00	; 0
    4572:	ed eb       	ldi	r30, 0xBD	; 189
    4574:	f2 e2       	ldi	r31, 0x22	; 34
    4576:	0c 94 a6 28 	jmp	0x514c	; 0x514c <__prologue_saves__>
    457a:	dc 01       	movw	r26, r24
    457c:	2b 01       	movw	r4, r22
    457e:	fa 01       	movw	r30, r20
    4580:	9c 91       	ld	r25, X
    4582:	92 30       	cpi	r25, 0x02	; 2
    4584:	08 f4       	brcc	.+2      	; 0x4588 <_fpadd_parts+0x1a>
    4586:	39 c1       	rjmp	.+626    	; 0x47fa <_fpadd_parts+0x28c>
    4588:	eb 01       	movw	r28, r22
    458a:	88 81       	ld	r24, Y
    458c:	82 30       	cpi	r24, 0x02	; 2
    458e:	08 f4       	brcc	.+2      	; 0x4592 <_fpadd_parts+0x24>
    4590:	33 c1       	rjmp	.+614    	; 0x47f8 <_fpadd_parts+0x28a>
    4592:	94 30       	cpi	r25, 0x04	; 4
    4594:	69 f4       	brne	.+26     	; 0x45b0 <_fpadd_parts+0x42>
    4596:	84 30       	cpi	r24, 0x04	; 4
    4598:	09 f0       	breq	.+2      	; 0x459c <_fpadd_parts+0x2e>
    459a:	2f c1       	rjmp	.+606    	; 0x47fa <_fpadd_parts+0x28c>
    459c:	11 96       	adiw	r26, 0x01	; 1
    459e:	9c 91       	ld	r25, X
    45a0:	11 97       	sbiw	r26, 0x01	; 1
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	98 17       	cp	r25, r24
    45a6:	09 f4       	brne	.+2      	; 0x45aa <_fpadd_parts+0x3c>
    45a8:	28 c1       	rjmp	.+592    	; 0x47fa <_fpadd_parts+0x28c>
    45aa:	a1 e7       	ldi	r26, 0x71	; 113
    45ac:	b2 e0       	ldi	r27, 0x02	; 2
    45ae:	25 c1       	rjmp	.+586    	; 0x47fa <_fpadd_parts+0x28c>
    45b0:	84 30       	cpi	r24, 0x04	; 4
    45b2:	09 f4       	brne	.+2      	; 0x45b6 <_fpadd_parts+0x48>
    45b4:	21 c1       	rjmp	.+578    	; 0x47f8 <_fpadd_parts+0x28a>
    45b6:	82 30       	cpi	r24, 0x02	; 2
    45b8:	a9 f4       	brne	.+42     	; 0x45e4 <_fpadd_parts+0x76>
    45ba:	92 30       	cpi	r25, 0x02	; 2
    45bc:	09 f0       	breq	.+2      	; 0x45c0 <_fpadd_parts+0x52>
    45be:	1d c1       	rjmp	.+570    	; 0x47fa <_fpadd_parts+0x28c>
    45c0:	9a 01       	movw	r18, r20
    45c2:	ad 01       	movw	r20, r26
    45c4:	88 e0       	ldi	r24, 0x08	; 8
    45c6:	ea 01       	movw	r28, r20
    45c8:	09 90       	ld	r0, Y+
    45ca:	ae 01       	movw	r20, r28
    45cc:	e9 01       	movw	r28, r18
    45ce:	09 92       	st	Y+, r0
    45d0:	9e 01       	movw	r18, r28
    45d2:	81 50       	subi	r24, 0x01	; 1
    45d4:	c1 f7       	brne	.-16     	; 0x45c6 <_fpadd_parts+0x58>
    45d6:	e2 01       	movw	r28, r4
    45d8:	89 81       	ldd	r24, Y+1	; 0x01
    45da:	11 96       	adiw	r26, 0x01	; 1
    45dc:	9c 91       	ld	r25, X
    45de:	89 23       	and	r24, r25
    45e0:	81 83       	std	Z+1, r24	; 0x01
    45e2:	08 c1       	rjmp	.+528    	; 0x47f4 <_fpadd_parts+0x286>
    45e4:	92 30       	cpi	r25, 0x02	; 2
    45e6:	09 f4       	brne	.+2      	; 0x45ea <_fpadd_parts+0x7c>
    45e8:	07 c1       	rjmp	.+526    	; 0x47f8 <_fpadd_parts+0x28a>
    45ea:	12 96       	adiw	r26, 0x02	; 2
    45ec:	2d 90       	ld	r2, X+
    45ee:	3c 90       	ld	r3, X
    45f0:	13 97       	sbiw	r26, 0x03	; 3
    45f2:	eb 01       	movw	r28, r22
    45f4:	8a 81       	ldd	r24, Y+2	; 0x02
    45f6:	9b 81       	ldd	r25, Y+3	; 0x03
    45f8:	14 96       	adiw	r26, 0x04	; 4
    45fa:	ad 90       	ld	r10, X+
    45fc:	bd 90       	ld	r11, X+
    45fe:	cd 90       	ld	r12, X+
    4600:	dc 90       	ld	r13, X
    4602:	17 97       	sbiw	r26, 0x07	; 7
    4604:	ec 80       	ldd	r14, Y+4	; 0x04
    4606:	fd 80       	ldd	r15, Y+5	; 0x05
    4608:	0e 81       	ldd	r16, Y+6	; 0x06
    460a:	1f 81       	ldd	r17, Y+7	; 0x07
    460c:	91 01       	movw	r18, r2
    460e:	28 1b       	sub	r18, r24
    4610:	39 0b       	sbc	r19, r25
    4612:	b9 01       	movw	r22, r18
    4614:	37 ff       	sbrs	r19, 7
    4616:	04 c0       	rjmp	.+8      	; 0x4620 <_fpadd_parts+0xb2>
    4618:	66 27       	eor	r22, r22
    461a:	77 27       	eor	r23, r23
    461c:	62 1b       	sub	r22, r18
    461e:	73 0b       	sbc	r23, r19
    4620:	60 32       	cpi	r22, 0x20	; 32
    4622:	71 05       	cpc	r23, r1
    4624:	0c f0       	brlt	.+2      	; 0x4628 <_fpadd_parts+0xba>
    4626:	61 c0       	rjmp	.+194    	; 0x46ea <_fpadd_parts+0x17c>
    4628:	12 16       	cp	r1, r18
    462a:	13 06       	cpc	r1, r19
    462c:	6c f5       	brge	.+90     	; 0x4688 <_fpadd_parts+0x11a>
    462e:	37 01       	movw	r6, r14
    4630:	48 01       	movw	r8, r16
    4632:	06 2e       	mov	r0, r22
    4634:	04 c0       	rjmp	.+8      	; 0x463e <_fpadd_parts+0xd0>
    4636:	96 94       	lsr	r9
    4638:	87 94       	ror	r8
    463a:	77 94       	ror	r7
    463c:	67 94       	ror	r6
    463e:	0a 94       	dec	r0
    4640:	d2 f7       	brpl	.-12     	; 0x4636 <_fpadd_parts+0xc8>
    4642:	21 e0       	ldi	r18, 0x01	; 1
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	40 e0       	ldi	r20, 0x00	; 0
    4648:	50 e0       	ldi	r21, 0x00	; 0
    464a:	04 c0       	rjmp	.+8      	; 0x4654 <_fpadd_parts+0xe6>
    464c:	22 0f       	add	r18, r18
    464e:	33 1f       	adc	r19, r19
    4650:	44 1f       	adc	r20, r20
    4652:	55 1f       	adc	r21, r21
    4654:	6a 95       	dec	r22
    4656:	d2 f7       	brpl	.-12     	; 0x464c <_fpadd_parts+0xde>
    4658:	21 50       	subi	r18, 0x01	; 1
    465a:	30 40       	sbci	r19, 0x00	; 0
    465c:	40 40       	sbci	r20, 0x00	; 0
    465e:	50 40       	sbci	r21, 0x00	; 0
    4660:	2e 21       	and	r18, r14
    4662:	3f 21       	and	r19, r15
    4664:	40 23       	and	r20, r16
    4666:	51 23       	and	r21, r17
    4668:	21 15       	cp	r18, r1
    466a:	31 05       	cpc	r19, r1
    466c:	41 05       	cpc	r20, r1
    466e:	51 05       	cpc	r21, r1
    4670:	21 f0       	breq	.+8      	; 0x467a <_fpadd_parts+0x10c>
    4672:	21 e0       	ldi	r18, 0x01	; 1
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	40 e0       	ldi	r20, 0x00	; 0
    4678:	50 e0       	ldi	r21, 0x00	; 0
    467a:	79 01       	movw	r14, r18
    467c:	8a 01       	movw	r16, r20
    467e:	e6 28       	or	r14, r6
    4680:	f7 28       	or	r15, r7
    4682:	08 29       	or	r16, r8
    4684:	19 29       	or	r17, r9
    4686:	3c c0       	rjmp	.+120    	; 0x4700 <_fpadd_parts+0x192>
    4688:	23 2b       	or	r18, r19
    468a:	d1 f1       	breq	.+116    	; 0x4700 <_fpadd_parts+0x192>
    468c:	26 0e       	add	r2, r22
    468e:	37 1e       	adc	r3, r23
    4690:	35 01       	movw	r6, r10
    4692:	46 01       	movw	r8, r12
    4694:	06 2e       	mov	r0, r22
    4696:	04 c0       	rjmp	.+8      	; 0x46a0 <_fpadd_parts+0x132>
    4698:	96 94       	lsr	r9
    469a:	87 94       	ror	r8
    469c:	77 94       	ror	r7
    469e:	67 94       	ror	r6
    46a0:	0a 94       	dec	r0
    46a2:	d2 f7       	brpl	.-12     	; 0x4698 <_fpadd_parts+0x12a>
    46a4:	21 e0       	ldi	r18, 0x01	; 1
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	40 e0       	ldi	r20, 0x00	; 0
    46aa:	50 e0       	ldi	r21, 0x00	; 0
    46ac:	04 c0       	rjmp	.+8      	; 0x46b6 <_fpadd_parts+0x148>
    46ae:	22 0f       	add	r18, r18
    46b0:	33 1f       	adc	r19, r19
    46b2:	44 1f       	adc	r20, r20
    46b4:	55 1f       	adc	r21, r21
    46b6:	6a 95       	dec	r22
    46b8:	d2 f7       	brpl	.-12     	; 0x46ae <_fpadd_parts+0x140>
    46ba:	21 50       	subi	r18, 0x01	; 1
    46bc:	30 40       	sbci	r19, 0x00	; 0
    46be:	40 40       	sbci	r20, 0x00	; 0
    46c0:	50 40       	sbci	r21, 0x00	; 0
    46c2:	2a 21       	and	r18, r10
    46c4:	3b 21       	and	r19, r11
    46c6:	4c 21       	and	r20, r12
    46c8:	5d 21       	and	r21, r13
    46ca:	21 15       	cp	r18, r1
    46cc:	31 05       	cpc	r19, r1
    46ce:	41 05       	cpc	r20, r1
    46d0:	51 05       	cpc	r21, r1
    46d2:	21 f0       	breq	.+8      	; 0x46dc <_fpadd_parts+0x16e>
    46d4:	21 e0       	ldi	r18, 0x01	; 1
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	40 e0       	ldi	r20, 0x00	; 0
    46da:	50 e0       	ldi	r21, 0x00	; 0
    46dc:	59 01       	movw	r10, r18
    46de:	6a 01       	movw	r12, r20
    46e0:	a6 28       	or	r10, r6
    46e2:	b7 28       	or	r11, r7
    46e4:	c8 28       	or	r12, r8
    46e6:	d9 28       	or	r13, r9
    46e8:	0b c0       	rjmp	.+22     	; 0x4700 <_fpadd_parts+0x192>
    46ea:	82 15       	cp	r24, r2
    46ec:	93 05       	cpc	r25, r3
    46ee:	2c f0       	brlt	.+10     	; 0x46fa <_fpadd_parts+0x18c>
    46f0:	1c 01       	movw	r2, r24
    46f2:	aa 24       	eor	r10, r10
    46f4:	bb 24       	eor	r11, r11
    46f6:	65 01       	movw	r12, r10
    46f8:	03 c0       	rjmp	.+6      	; 0x4700 <_fpadd_parts+0x192>
    46fa:	ee 24       	eor	r14, r14
    46fc:	ff 24       	eor	r15, r15
    46fe:	87 01       	movw	r16, r14
    4700:	11 96       	adiw	r26, 0x01	; 1
    4702:	9c 91       	ld	r25, X
    4704:	d2 01       	movw	r26, r4
    4706:	11 96       	adiw	r26, 0x01	; 1
    4708:	8c 91       	ld	r24, X
    470a:	98 17       	cp	r25, r24
    470c:	09 f4       	brne	.+2      	; 0x4710 <_fpadd_parts+0x1a2>
    470e:	45 c0       	rjmp	.+138    	; 0x479a <_fpadd_parts+0x22c>
    4710:	99 23       	and	r25, r25
    4712:	39 f0       	breq	.+14     	; 0x4722 <_fpadd_parts+0x1b4>
    4714:	a8 01       	movw	r20, r16
    4716:	97 01       	movw	r18, r14
    4718:	2a 19       	sub	r18, r10
    471a:	3b 09       	sbc	r19, r11
    471c:	4c 09       	sbc	r20, r12
    471e:	5d 09       	sbc	r21, r13
    4720:	06 c0       	rjmp	.+12     	; 0x472e <_fpadd_parts+0x1c0>
    4722:	a6 01       	movw	r20, r12
    4724:	95 01       	movw	r18, r10
    4726:	2e 19       	sub	r18, r14
    4728:	3f 09       	sbc	r19, r15
    472a:	40 0b       	sbc	r20, r16
    472c:	51 0b       	sbc	r21, r17
    472e:	57 fd       	sbrc	r21, 7
    4730:	08 c0       	rjmp	.+16     	; 0x4742 <_fpadd_parts+0x1d4>
    4732:	11 82       	std	Z+1, r1	; 0x01
    4734:	33 82       	std	Z+3, r3	; 0x03
    4736:	22 82       	std	Z+2, r2	; 0x02
    4738:	24 83       	std	Z+4, r18	; 0x04
    473a:	35 83       	std	Z+5, r19	; 0x05
    473c:	46 83       	std	Z+6, r20	; 0x06
    473e:	57 83       	std	Z+7, r21	; 0x07
    4740:	1d c0       	rjmp	.+58     	; 0x477c <_fpadd_parts+0x20e>
    4742:	81 e0       	ldi	r24, 0x01	; 1
    4744:	81 83       	std	Z+1, r24	; 0x01
    4746:	33 82       	std	Z+3, r3	; 0x03
    4748:	22 82       	std	Z+2, r2	; 0x02
    474a:	88 27       	eor	r24, r24
    474c:	99 27       	eor	r25, r25
    474e:	dc 01       	movw	r26, r24
    4750:	82 1b       	sub	r24, r18
    4752:	93 0b       	sbc	r25, r19
    4754:	a4 0b       	sbc	r26, r20
    4756:	b5 0b       	sbc	r27, r21
    4758:	84 83       	std	Z+4, r24	; 0x04
    475a:	95 83       	std	Z+5, r25	; 0x05
    475c:	a6 83       	std	Z+6, r26	; 0x06
    475e:	b7 83       	std	Z+7, r27	; 0x07
    4760:	0d c0       	rjmp	.+26     	; 0x477c <_fpadd_parts+0x20e>
    4762:	22 0f       	add	r18, r18
    4764:	33 1f       	adc	r19, r19
    4766:	44 1f       	adc	r20, r20
    4768:	55 1f       	adc	r21, r21
    476a:	24 83       	std	Z+4, r18	; 0x04
    476c:	35 83       	std	Z+5, r19	; 0x05
    476e:	46 83       	std	Z+6, r20	; 0x06
    4770:	57 83       	std	Z+7, r21	; 0x07
    4772:	82 81       	ldd	r24, Z+2	; 0x02
    4774:	93 81       	ldd	r25, Z+3	; 0x03
    4776:	01 97       	sbiw	r24, 0x01	; 1
    4778:	93 83       	std	Z+3, r25	; 0x03
    477a:	82 83       	std	Z+2, r24	; 0x02
    477c:	24 81       	ldd	r18, Z+4	; 0x04
    477e:	35 81       	ldd	r19, Z+5	; 0x05
    4780:	46 81       	ldd	r20, Z+6	; 0x06
    4782:	57 81       	ldd	r21, Z+7	; 0x07
    4784:	da 01       	movw	r26, r20
    4786:	c9 01       	movw	r24, r18
    4788:	01 97       	sbiw	r24, 0x01	; 1
    478a:	a1 09       	sbc	r26, r1
    478c:	b1 09       	sbc	r27, r1
    478e:	8f 5f       	subi	r24, 0xFF	; 255
    4790:	9f 4f       	sbci	r25, 0xFF	; 255
    4792:	af 4f       	sbci	r26, 0xFF	; 255
    4794:	bf 43       	sbci	r27, 0x3F	; 63
    4796:	28 f3       	brcs	.-54     	; 0x4762 <_fpadd_parts+0x1f4>
    4798:	0b c0       	rjmp	.+22     	; 0x47b0 <_fpadd_parts+0x242>
    479a:	91 83       	std	Z+1, r25	; 0x01
    479c:	33 82       	std	Z+3, r3	; 0x03
    479e:	22 82       	std	Z+2, r2	; 0x02
    47a0:	ea 0c       	add	r14, r10
    47a2:	fb 1c       	adc	r15, r11
    47a4:	0c 1d       	adc	r16, r12
    47a6:	1d 1d       	adc	r17, r13
    47a8:	e4 82       	std	Z+4, r14	; 0x04
    47aa:	f5 82       	std	Z+5, r15	; 0x05
    47ac:	06 83       	std	Z+6, r16	; 0x06
    47ae:	17 83       	std	Z+7, r17	; 0x07
    47b0:	83 e0       	ldi	r24, 0x03	; 3
    47b2:	80 83       	st	Z, r24
    47b4:	24 81       	ldd	r18, Z+4	; 0x04
    47b6:	35 81       	ldd	r19, Z+5	; 0x05
    47b8:	46 81       	ldd	r20, Z+6	; 0x06
    47ba:	57 81       	ldd	r21, Z+7	; 0x07
    47bc:	57 ff       	sbrs	r21, 7
    47be:	1a c0       	rjmp	.+52     	; 0x47f4 <_fpadd_parts+0x286>
    47c0:	c9 01       	movw	r24, r18
    47c2:	aa 27       	eor	r26, r26
    47c4:	97 fd       	sbrc	r25, 7
    47c6:	a0 95       	com	r26
    47c8:	ba 2f       	mov	r27, r26
    47ca:	81 70       	andi	r24, 0x01	; 1
    47cc:	90 70       	andi	r25, 0x00	; 0
    47ce:	a0 70       	andi	r26, 0x00	; 0
    47d0:	b0 70       	andi	r27, 0x00	; 0
    47d2:	56 95       	lsr	r21
    47d4:	47 95       	ror	r20
    47d6:	37 95       	ror	r19
    47d8:	27 95       	ror	r18
    47da:	82 2b       	or	r24, r18
    47dc:	93 2b       	or	r25, r19
    47de:	a4 2b       	or	r26, r20
    47e0:	b5 2b       	or	r27, r21
    47e2:	84 83       	std	Z+4, r24	; 0x04
    47e4:	95 83       	std	Z+5, r25	; 0x05
    47e6:	a6 83       	std	Z+6, r26	; 0x06
    47e8:	b7 83       	std	Z+7, r27	; 0x07
    47ea:	82 81       	ldd	r24, Z+2	; 0x02
    47ec:	93 81       	ldd	r25, Z+3	; 0x03
    47ee:	01 96       	adiw	r24, 0x01	; 1
    47f0:	93 83       	std	Z+3, r25	; 0x03
    47f2:	82 83       	std	Z+2, r24	; 0x02
    47f4:	df 01       	movw	r26, r30
    47f6:	01 c0       	rjmp	.+2      	; 0x47fa <_fpadd_parts+0x28c>
    47f8:	d2 01       	movw	r26, r4
    47fa:	cd 01       	movw	r24, r26
    47fc:	cd b7       	in	r28, 0x3d	; 61
    47fe:	de b7       	in	r29, 0x3e	; 62
    4800:	e2 e1       	ldi	r30, 0x12	; 18
    4802:	0c 94 c2 28 	jmp	0x5184	; 0x5184 <__epilogue_restores__>

00004806 <__subsf3>:
    4806:	a0 e2       	ldi	r26, 0x20	; 32
    4808:	b0 e0       	ldi	r27, 0x00	; 0
    480a:	e9 e0       	ldi	r30, 0x09	; 9
    480c:	f4 e2       	ldi	r31, 0x24	; 36
    480e:	0c 94 b2 28 	jmp	0x5164	; 0x5164 <__prologue_saves__+0x18>
    4812:	69 83       	std	Y+1, r22	; 0x01
    4814:	7a 83       	std	Y+2, r23	; 0x02
    4816:	8b 83       	std	Y+3, r24	; 0x03
    4818:	9c 83       	std	Y+4, r25	; 0x04
    481a:	2d 83       	std	Y+5, r18	; 0x05
    481c:	3e 83       	std	Y+6, r19	; 0x06
    481e:	4f 83       	std	Y+7, r20	; 0x07
    4820:	58 87       	std	Y+8, r21	; 0x08
    4822:	e9 e0       	ldi	r30, 0x09	; 9
    4824:	ee 2e       	mov	r14, r30
    4826:	f1 2c       	mov	r15, r1
    4828:	ec 0e       	add	r14, r28
    482a:	fd 1e       	adc	r15, r29
    482c:	ce 01       	movw	r24, r28
    482e:	01 96       	adiw	r24, 0x01	; 1
    4830:	b7 01       	movw	r22, r14
    4832:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    4836:	8e 01       	movw	r16, r28
    4838:	0f 5e       	subi	r16, 0xEF	; 239
    483a:	1f 4f       	sbci	r17, 0xFF	; 255
    483c:	ce 01       	movw	r24, r28
    483e:	05 96       	adiw	r24, 0x05	; 5
    4840:	b8 01       	movw	r22, r16
    4842:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    4846:	8a 89       	ldd	r24, Y+18	; 0x12
    4848:	91 e0       	ldi	r25, 0x01	; 1
    484a:	89 27       	eor	r24, r25
    484c:	8a 8b       	std	Y+18, r24	; 0x12
    484e:	c7 01       	movw	r24, r14
    4850:	b8 01       	movw	r22, r16
    4852:	ae 01       	movw	r20, r28
    4854:	47 5e       	subi	r20, 0xE7	; 231
    4856:	5f 4f       	sbci	r21, 0xFF	; 255
    4858:	0e 94 b7 22 	call	0x456e	; 0x456e <_fpadd_parts>
    485c:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__pack_f>
    4860:	a0 96       	adiw	r28, 0x20	; 32
    4862:	e6 e0       	ldi	r30, 0x06	; 6
    4864:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__epilogue_restores__+0x18>

00004868 <__addsf3>:
    4868:	a0 e2       	ldi	r26, 0x20	; 32
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	ea e3       	ldi	r30, 0x3A	; 58
    486e:	f4 e2       	ldi	r31, 0x24	; 36
    4870:	0c 94 b2 28 	jmp	0x5164	; 0x5164 <__prologue_saves__+0x18>
    4874:	69 83       	std	Y+1, r22	; 0x01
    4876:	7a 83       	std	Y+2, r23	; 0x02
    4878:	8b 83       	std	Y+3, r24	; 0x03
    487a:	9c 83       	std	Y+4, r25	; 0x04
    487c:	2d 83       	std	Y+5, r18	; 0x05
    487e:	3e 83       	std	Y+6, r19	; 0x06
    4880:	4f 83       	std	Y+7, r20	; 0x07
    4882:	58 87       	std	Y+8, r21	; 0x08
    4884:	f9 e0       	ldi	r31, 0x09	; 9
    4886:	ef 2e       	mov	r14, r31
    4888:	f1 2c       	mov	r15, r1
    488a:	ec 0e       	add	r14, r28
    488c:	fd 1e       	adc	r15, r29
    488e:	ce 01       	movw	r24, r28
    4890:	01 96       	adiw	r24, 0x01	; 1
    4892:	b7 01       	movw	r22, r14
    4894:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    4898:	8e 01       	movw	r16, r28
    489a:	0f 5e       	subi	r16, 0xEF	; 239
    489c:	1f 4f       	sbci	r17, 0xFF	; 255
    489e:	ce 01       	movw	r24, r28
    48a0:	05 96       	adiw	r24, 0x05	; 5
    48a2:	b8 01       	movw	r22, r16
    48a4:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    48a8:	c7 01       	movw	r24, r14
    48aa:	b8 01       	movw	r22, r16
    48ac:	ae 01       	movw	r20, r28
    48ae:	47 5e       	subi	r20, 0xE7	; 231
    48b0:	5f 4f       	sbci	r21, 0xFF	; 255
    48b2:	0e 94 b7 22 	call	0x456e	; 0x456e <_fpadd_parts>
    48b6:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__pack_f>
    48ba:	a0 96       	adiw	r28, 0x20	; 32
    48bc:	e6 e0       	ldi	r30, 0x06	; 6
    48be:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__epilogue_restores__+0x18>

000048c2 <__mulsf3>:
    48c2:	a0 e2       	ldi	r26, 0x20	; 32
    48c4:	b0 e0       	ldi	r27, 0x00	; 0
    48c6:	e7 e6       	ldi	r30, 0x67	; 103
    48c8:	f4 e2       	ldi	r31, 0x24	; 36
    48ca:	0c 94 a6 28 	jmp	0x514c	; 0x514c <__prologue_saves__>
    48ce:	69 83       	std	Y+1, r22	; 0x01
    48d0:	7a 83       	std	Y+2, r23	; 0x02
    48d2:	8b 83       	std	Y+3, r24	; 0x03
    48d4:	9c 83       	std	Y+4, r25	; 0x04
    48d6:	2d 83       	std	Y+5, r18	; 0x05
    48d8:	3e 83       	std	Y+6, r19	; 0x06
    48da:	4f 83       	std	Y+7, r20	; 0x07
    48dc:	58 87       	std	Y+8, r21	; 0x08
    48de:	ce 01       	movw	r24, r28
    48e0:	01 96       	adiw	r24, 0x01	; 1
    48e2:	be 01       	movw	r22, r28
    48e4:	67 5f       	subi	r22, 0xF7	; 247
    48e6:	7f 4f       	sbci	r23, 0xFF	; 255
    48e8:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    48ec:	ce 01       	movw	r24, r28
    48ee:	05 96       	adiw	r24, 0x05	; 5
    48f0:	be 01       	movw	r22, r28
    48f2:	6f 5e       	subi	r22, 0xEF	; 239
    48f4:	7f 4f       	sbci	r23, 0xFF	; 255
    48f6:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    48fa:	99 85       	ldd	r25, Y+9	; 0x09
    48fc:	92 30       	cpi	r25, 0x02	; 2
    48fe:	88 f0       	brcs	.+34     	; 0x4922 <__mulsf3+0x60>
    4900:	89 89       	ldd	r24, Y+17	; 0x11
    4902:	82 30       	cpi	r24, 0x02	; 2
    4904:	c8 f0       	brcs	.+50     	; 0x4938 <__mulsf3+0x76>
    4906:	94 30       	cpi	r25, 0x04	; 4
    4908:	19 f4       	brne	.+6      	; 0x4910 <__mulsf3+0x4e>
    490a:	82 30       	cpi	r24, 0x02	; 2
    490c:	51 f4       	brne	.+20     	; 0x4922 <__mulsf3+0x60>
    490e:	04 c0       	rjmp	.+8      	; 0x4918 <__mulsf3+0x56>
    4910:	84 30       	cpi	r24, 0x04	; 4
    4912:	29 f4       	brne	.+10     	; 0x491e <__mulsf3+0x5c>
    4914:	92 30       	cpi	r25, 0x02	; 2
    4916:	81 f4       	brne	.+32     	; 0x4938 <__mulsf3+0x76>
    4918:	81 e7       	ldi	r24, 0x71	; 113
    491a:	92 e0       	ldi	r25, 0x02	; 2
    491c:	c6 c0       	rjmp	.+396    	; 0x4aaa <__mulsf3+0x1e8>
    491e:	92 30       	cpi	r25, 0x02	; 2
    4920:	49 f4       	brne	.+18     	; 0x4934 <__mulsf3+0x72>
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	9a 85       	ldd	r25, Y+10	; 0x0a
    4926:	8a 89       	ldd	r24, Y+18	; 0x12
    4928:	98 13       	cpse	r25, r24
    492a:	21 e0       	ldi	r18, 0x01	; 1
    492c:	2a 87       	std	Y+10, r18	; 0x0a
    492e:	ce 01       	movw	r24, r28
    4930:	09 96       	adiw	r24, 0x09	; 9
    4932:	bb c0       	rjmp	.+374    	; 0x4aaa <__mulsf3+0x1e8>
    4934:	82 30       	cpi	r24, 0x02	; 2
    4936:	49 f4       	brne	.+18     	; 0x494a <__mulsf3+0x88>
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	9a 85       	ldd	r25, Y+10	; 0x0a
    493c:	8a 89       	ldd	r24, Y+18	; 0x12
    493e:	98 13       	cpse	r25, r24
    4940:	21 e0       	ldi	r18, 0x01	; 1
    4942:	2a 8b       	std	Y+18, r18	; 0x12
    4944:	ce 01       	movw	r24, r28
    4946:	41 96       	adiw	r24, 0x11	; 17
    4948:	b0 c0       	rjmp	.+352    	; 0x4aaa <__mulsf3+0x1e8>
    494a:	2d 84       	ldd	r2, Y+13	; 0x0d
    494c:	3e 84       	ldd	r3, Y+14	; 0x0e
    494e:	4f 84       	ldd	r4, Y+15	; 0x0f
    4950:	58 88       	ldd	r5, Y+16	; 0x10
    4952:	6d 88       	ldd	r6, Y+21	; 0x15
    4954:	7e 88       	ldd	r7, Y+22	; 0x16
    4956:	8f 88       	ldd	r8, Y+23	; 0x17
    4958:	98 8c       	ldd	r9, Y+24	; 0x18
    495a:	ee 24       	eor	r14, r14
    495c:	ff 24       	eor	r15, r15
    495e:	87 01       	movw	r16, r14
    4960:	aa 24       	eor	r10, r10
    4962:	bb 24       	eor	r11, r11
    4964:	65 01       	movw	r12, r10
    4966:	40 e0       	ldi	r20, 0x00	; 0
    4968:	50 e0       	ldi	r21, 0x00	; 0
    496a:	60 e0       	ldi	r22, 0x00	; 0
    496c:	70 e0       	ldi	r23, 0x00	; 0
    496e:	e0 e0       	ldi	r30, 0x00	; 0
    4970:	f0 e0       	ldi	r31, 0x00	; 0
    4972:	c1 01       	movw	r24, r2
    4974:	81 70       	andi	r24, 0x01	; 1
    4976:	90 70       	andi	r25, 0x00	; 0
    4978:	89 2b       	or	r24, r25
    497a:	e9 f0       	breq	.+58     	; 0x49b6 <__mulsf3+0xf4>
    497c:	e6 0c       	add	r14, r6
    497e:	f7 1c       	adc	r15, r7
    4980:	08 1d       	adc	r16, r8
    4982:	19 1d       	adc	r17, r9
    4984:	9a 01       	movw	r18, r20
    4986:	ab 01       	movw	r20, r22
    4988:	2a 0d       	add	r18, r10
    498a:	3b 1d       	adc	r19, r11
    498c:	4c 1d       	adc	r20, r12
    498e:	5d 1d       	adc	r21, r13
    4990:	80 e0       	ldi	r24, 0x00	; 0
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	a0 e0       	ldi	r26, 0x00	; 0
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	e6 14       	cp	r14, r6
    499a:	f7 04       	cpc	r15, r7
    499c:	08 05       	cpc	r16, r8
    499e:	19 05       	cpc	r17, r9
    49a0:	20 f4       	brcc	.+8      	; 0x49aa <__mulsf3+0xe8>
    49a2:	81 e0       	ldi	r24, 0x01	; 1
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	a0 e0       	ldi	r26, 0x00	; 0
    49a8:	b0 e0       	ldi	r27, 0x00	; 0
    49aa:	ba 01       	movw	r22, r20
    49ac:	a9 01       	movw	r20, r18
    49ae:	48 0f       	add	r20, r24
    49b0:	59 1f       	adc	r21, r25
    49b2:	6a 1f       	adc	r22, r26
    49b4:	7b 1f       	adc	r23, r27
    49b6:	aa 0c       	add	r10, r10
    49b8:	bb 1c       	adc	r11, r11
    49ba:	cc 1c       	adc	r12, r12
    49bc:	dd 1c       	adc	r13, r13
    49be:	97 fe       	sbrs	r9, 7
    49c0:	08 c0       	rjmp	.+16     	; 0x49d2 <__mulsf3+0x110>
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	a0 e0       	ldi	r26, 0x00	; 0
    49c8:	b0 e0       	ldi	r27, 0x00	; 0
    49ca:	a8 2a       	or	r10, r24
    49cc:	b9 2a       	or	r11, r25
    49ce:	ca 2a       	or	r12, r26
    49d0:	db 2a       	or	r13, r27
    49d2:	31 96       	adiw	r30, 0x01	; 1
    49d4:	e0 32       	cpi	r30, 0x20	; 32
    49d6:	f1 05       	cpc	r31, r1
    49d8:	49 f0       	breq	.+18     	; 0x49ec <__mulsf3+0x12a>
    49da:	66 0c       	add	r6, r6
    49dc:	77 1c       	adc	r7, r7
    49de:	88 1c       	adc	r8, r8
    49e0:	99 1c       	adc	r9, r9
    49e2:	56 94       	lsr	r5
    49e4:	47 94       	ror	r4
    49e6:	37 94       	ror	r3
    49e8:	27 94       	ror	r2
    49ea:	c3 cf       	rjmp	.-122    	; 0x4972 <__mulsf3+0xb0>
    49ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    49ee:	ea 89       	ldd	r30, Y+18	; 0x12
    49f0:	2b 89       	ldd	r18, Y+19	; 0x13
    49f2:	3c 89       	ldd	r19, Y+20	; 0x14
    49f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    49f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    49f8:	28 0f       	add	r18, r24
    49fa:	39 1f       	adc	r19, r25
    49fc:	2e 5f       	subi	r18, 0xFE	; 254
    49fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4a00:	17 c0       	rjmp	.+46     	; 0x4a30 <__mulsf3+0x16e>
    4a02:	ca 01       	movw	r24, r20
    4a04:	81 70       	andi	r24, 0x01	; 1
    4a06:	90 70       	andi	r25, 0x00	; 0
    4a08:	89 2b       	or	r24, r25
    4a0a:	61 f0       	breq	.+24     	; 0x4a24 <__mulsf3+0x162>
    4a0c:	16 95       	lsr	r17
    4a0e:	07 95       	ror	r16
    4a10:	f7 94       	ror	r15
    4a12:	e7 94       	ror	r14
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	a0 e0       	ldi	r26, 0x00	; 0
    4a1a:	b0 e8       	ldi	r27, 0x80	; 128
    4a1c:	e8 2a       	or	r14, r24
    4a1e:	f9 2a       	or	r15, r25
    4a20:	0a 2b       	or	r16, r26
    4a22:	1b 2b       	or	r17, r27
    4a24:	76 95       	lsr	r23
    4a26:	67 95       	ror	r22
    4a28:	57 95       	ror	r21
    4a2a:	47 95       	ror	r20
    4a2c:	2f 5f       	subi	r18, 0xFF	; 255
    4a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a30:	77 fd       	sbrc	r23, 7
    4a32:	e7 cf       	rjmp	.-50     	; 0x4a02 <__mulsf3+0x140>
    4a34:	0c c0       	rjmp	.+24     	; 0x4a4e <__mulsf3+0x18c>
    4a36:	44 0f       	add	r20, r20
    4a38:	55 1f       	adc	r21, r21
    4a3a:	66 1f       	adc	r22, r22
    4a3c:	77 1f       	adc	r23, r23
    4a3e:	17 fd       	sbrc	r17, 7
    4a40:	41 60       	ori	r20, 0x01	; 1
    4a42:	ee 0c       	add	r14, r14
    4a44:	ff 1c       	adc	r15, r15
    4a46:	00 1f       	adc	r16, r16
    4a48:	11 1f       	adc	r17, r17
    4a4a:	21 50       	subi	r18, 0x01	; 1
    4a4c:	30 40       	sbci	r19, 0x00	; 0
    4a4e:	40 30       	cpi	r20, 0x00	; 0
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	59 07       	cpc	r21, r25
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	69 07       	cpc	r22, r25
    4a58:	90 e4       	ldi	r25, 0x40	; 64
    4a5a:	79 07       	cpc	r23, r25
    4a5c:	60 f3       	brcs	.-40     	; 0x4a36 <__mulsf3+0x174>
    4a5e:	2b 8f       	std	Y+27, r18	; 0x1b
    4a60:	3c 8f       	std	Y+28, r19	; 0x1c
    4a62:	db 01       	movw	r26, r22
    4a64:	ca 01       	movw	r24, r20
    4a66:	8f 77       	andi	r24, 0x7F	; 127
    4a68:	90 70       	andi	r25, 0x00	; 0
    4a6a:	a0 70       	andi	r26, 0x00	; 0
    4a6c:	b0 70       	andi	r27, 0x00	; 0
    4a6e:	80 34       	cpi	r24, 0x40	; 64
    4a70:	91 05       	cpc	r25, r1
    4a72:	a1 05       	cpc	r26, r1
    4a74:	b1 05       	cpc	r27, r1
    4a76:	61 f4       	brne	.+24     	; 0x4a90 <__mulsf3+0x1ce>
    4a78:	47 fd       	sbrc	r20, 7
    4a7a:	0a c0       	rjmp	.+20     	; 0x4a90 <__mulsf3+0x1ce>
    4a7c:	e1 14       	cp	r14, r1
    4a7e:	f1 04       	cpc	r15, r1
    4a80:	01 05       	cpc	r16, r1
    4a82:	11 05       	cpc	r17, r1
    4a84:	29 f0       	breq	.+10     	; 0x4a90 <__mulsf3+0x1ce>
    4a86:	40 5c       	subi	r20, 0xC0	; 192
    4a88:	5f 4f       	sbci	r21, 0xFF	; 255
    4a8a:	6f 4f       	sbci	r22, 0xFF	; 255
    4a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a8e:	40 78       	andi	r20, 0x80	; 128
    4a90:	1a 8e       	std	Y+26, r1	; 0x1a
    4a92:	fe 17       	cp	r31, r30
    4a94:	11 f0       	breq	.+4      	; 0x4a9a <__mulsf3+0x1d8>
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	8a 8f       	std	Y+26, r24	; 0x1a
    4a9a:	4d 8f       	std	Y+29, r20	; 0x1d
    4a9c:	5e 8f       	std	Y+30, r21	; 0x1e
    4a9e:	6f 8f       	std	Y+31, r22	; 0x1f
    4aa0:	78 a3       	std	Y+32, r23	; 0x20
    4aa2:	83 e0       	ldi	r24, 0x03	; 3
    4aa4:	89 8f       	std	Y+25, r24	; 0x19
    4aa6:	ce 01       	movw	r24, r28
    4aa8:	49 96       	adiw	r24, 0x19	; 25
    4aaa:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__pack_f>
    4aae:	a0 96       	adiw	r28, 0x20	; 32
    4ab0:	e2 e1       	ldi	r30, 0x12	; 18
    4ab2:	0c 94 c2 28 	jmp	0x5184	; 0x5184 <__epilogue_restores__>

00004ab6 <__gtsf2>:
    4ab6:	a8 e1       	ldi	r26, 0x18	; 24
    4ab8:	b0 e0       	ldi	r27, 0x00	; 0
    4aba:	e1 e6       	ldi	r30, 0x61	; 97
    4abc:	f5 e2       	ldi	r31, 0x25	; 37
    4abe:	0c 94 b2 28 	jmp	0x5164	; 0x5164 <__prologue_saves__+0x18>
    4ac2:	69 83       	std	Y+1, r22	; 0x01
    4ac4:	7a 83       	std	Y+2, r23	; 0x02
    4ac6:	8b 83       	std	Y+3, r24	; 0x03
    4ac8:	9c 83       	std	Y+4, r25	; 0x04
    4aca:	2d 83       	std	Y+5, r18	; 0x05
    4acc:	3e 83       	std	Y+6, r19	; 0x06
    4ace:	4f 83       	std	Y+7, r20	; 0x07
    4ad0:	58 87       	std	Y+8, r21	; 0x08
    4ad2:	89 e0       	ldi	r24, 0x09	; 9
    4ad4:	e8 2e       	mov	r14, r24
    4ad6:	f1 2c       	mov	r15, r1
    4ad8:	ec 0e       	add	r14, r28
    4ada:	fd 1e       	adc	r15, r29
    4adc:	ce 01       	movw	r24, r28
    4ade:	01 96       	adiw	r24, 0x01	; 1
    4ae0:	b7 01       	movw	r22, r14
    4ae2:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    4ae6:	8e 01       	movw	r16, r28
    4ae8:	0f 5e       	subi	r16, 0xEF	; 239
    4aea:	1f 4f       	sbci	r17, 0xFF	; 255
    4aec:	ce 01       	movw	r24, r28
    4aee:	05 96       	adiw	r24, 0x05	; 5
    4af0:	b8 01       	movw	r22, r16
    4af2:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    4af6:	89 85       	ldd	r24, Y+9	; 0x09
    4af8:	82 30       	cpi	r24, 0x02	; 2
    4afa:	40 f0       	brcs	.+16     	; 0x4b0c <__gtsf2+0x56>
    4afc:	89 89       	ldd	r24, Y+17	; 0x11
    4afe:	82 30       	cpi	r24, 0x02	; 2
    4b00:	28 f0       	brcs	.+10     	; 0x4b0c <__gtsf2+0x56>
    4b02:	c7 01       	movw	r24, r14
    4b04:	b8 01       	movw	r22, r16
    4b06:	0e 94 39 28 	call	0x5072	; 0x5072 <__fpcmp_parts_f>
    4b0a:	01 c0       	rjmp	.+2      	; 0x4b0e <__gtsf2+0x58>
    4b0c:	8f ef       	ldi	r24, 0xFF	; 255
    4b0e:	68 96       	adiw	r28, 0x18	; 24
    4b10:	e6 e0       	ldi	r30, 0x06	; 6
    4b12:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__epilogue_restores__+0x18>

00004b16 <__gesf2>:
    4b16:	a8 e1       	ldi	r26, 0x18	; 24
    4b18:	b0 e0       	ldi	r27, 0x00	; 0
    4b1a:	e1 e9       	ldi	r30, 0x91	; 145
    4b1c:	f5 e2       	ldi	r31, 0x25	; 37
    4b1e:	0c 94 b2 28 	jmp	0x5164	; 0x5164 <__prologue_saves__+0x18>
    4b22:	69 83       	std	Y+1, r22	; 0x01
    4b24:	7a 83       	std	Y+2, r23	; 0x02
    4b26:	8b 83       	std	Y+3, r24	; 0x03
    4b28:	9c 83       	std	Y+4, r25	; 0x04
    4b2a:	2d 83       	std	Y+5, r18	; 0x05
    4b2c:	3e 83       	std	Y+6, r19	; 0x06
    4b2e:	4f 83       	std	Y+7, r20	; 0x07
    4b30:	58 87       	std	Y+8, r21	; 0x08
    4b32:	89 e0       	ldi	r24, 0x09	; 9
    4b34:	e8 2e       	mov	r14, r24
    4b36:	f1 2c       	mov	r15, r1
    4b38:	ec 0e       	add	r14, r28
    4b3a:	fd 1e       	adc	r15, r29
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	01 96       	adiw	r24, 0x01	; 1
    4b40:	b7 01       	movw	r22, r14
    4b42:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    4b46:	8e 01       	movw	r16, r28
    4b48:	0f 5e       	subi	r16, 0xEF	; 239
    4b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b4c:	ce 01       	movw	r24, r28
    4b4e:	05 96       	adiw	r24, 0x05	; 5
    4b50:	b8 01       	movw	r22, r16
    4b52:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    4b56:	89 85       	ldd	r24, Y+9	; 0x09
    4b58:	82 30       	cpi	r24, 0x02	; 2
    4b5a:	40 f0       	brcs	.+16     	; 0x4b6c <__gesf2+0x56>
    4b5c:	89 89       	ldd	r24, Y+17	; 0x11
    4b5e:	82 30       	cpi	r24, 0x02	; 2
    4b60:	28 f0       	brcs	.+10     	; 0x4b6c <__gesf2+0x56>
    4b62:	c7 01       	movw	r24, r14
    4b64:	b8 01       	movw	r22, r16
    4b66:	0e 94 39 28 	call	0x5072	; 0x5072 <__fpcmp_parts_f>
    4b6a:	01 c0       	rjmp	.+2      	; 0x4b6e <__gesf2+0x58>
    4b6c:	8f ef       	ldi	r24, 0xFF	; 255
    4b6e:	68 96       	adiw	r28, 0x18	; 24
    4b70:	e6 e0       	ldi	r30, 0x06	; 6
    4b72:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__epilogue_restores__+0x18>

00004b76 <__ltsf2>:
    4b76:	a8 e1       	ldi	r26, 0x18	; 24
    4b78:	b0 e0       	ldi	r27, 0x00	; 0
    4b7a:	e1 ec       	ldi	r30, 0xC1	; 193
    4b7c:	f5 e2       	ldi	r31, 0x25	; 37
    4b7e:	0c 94 b2 28 	jmp	0x5164	; 0x5164 <__prologue_saves__+0x18>
    4b82:	69 83       	std	Y+1, r22	; 0x01
    4b84:	7a 83       	std	Y+2, r23	; 0x02
    4b86:	8b 83       	std	Y+3, r24	; 0x03
    4b88:	9c 83       	std	Y+4, r25	; 0x04
    4b8a:	2d 83       	std	Y+5, r18	; 0x05
    4b8c:	3e 83       	std	Y+6, r19	; 0x06
    4b8e:	4f 83       	std	Y+7, r20	; 0x07
    4b90:	58 87       	std	Y+8, r21	; 0x08
    4b92:	89 e0       	ldi	r24, 0x09	; 9
    4b94:	e8 2e       	mov	r14, r24
    4b96:	f1 2c       	mov	r15, r1
    4b98:	ec 0e       	add	r14, r28
    4b9a:	fd 1e       	adc	r15, r29
    4b9c:	ce 01       	movw	r24, r28
    4b9e:	01 96       	adiw	r24, 0x01	; 1
    4ba0:	b7 01       	movw	r22, r14
    4ba2:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    4ba6:	8e 01       	movw	r16, r28
    4ba8:	0f 5e       	subi	r16, 0xEF	; 239
    4baa:	1f 4f       	sbci	r17, 0xFF	; 255
    4bac:	ce 01       	movw	r24, r28
    4bae:	05 96       	adiw	r24, 0x05	; 5
    4bb0:	b8 01       	movw	r22, r16
    4bb2:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    4bb6:	89 85       	ldd	r24, Y+9	; 0x09
    4bb8:	82 30       	cpi	r24, 0x02	; 2
    4bba:	40 f0       	brcs	.+16     	; 0x4bcc <__ltsf2+0x56>
    4bbc:	89 89       	ldd	r24, Y+17	; 0x11
    4bbe:	82 30       	cpi	r24, 0x02	; 2
    4bc0:	28 f0       	brcs	.+10     	; 0x4bcc <__ltsf2+0x56>
    4bc2:	c7 01       	movw	r24, r14
    4bc4:	b8 01       	movw	r22, r16
    4bc6:	0e 94 39 28 	call	0x5072	; 0x5072 <__fpcmp_parts_f>
    4bca:	01 c0       	rjmp	.+2      	; 0x4bce <__ltsf2+0x58>
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	68 96       	adiw	r28, 0x18	; 24
    4bd0:	e6 e0       	ldi	r30, 0x06	; 6
    4bd2:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__epilogue_restores__+0x18>

00004bd6 <__floatsisf>:
    4bd6:	a8 e0       	ldi	r26, 0x08	; 8
    4bd8:	b0 e0       	ldi	r27, 0x00	; 0
    4bda:	e1 ef       	ldi	r30, 0xF1	; 241
    4bdc:	f5 e2       	ldi	r31, 0x25	; 37
    4bde:	0c 94 af 28 	jmp	0x515e	; 0x515e <__prologue_saves__+0x12>
    4be2:	9b 01       	movw	r18, r22
    4be4:	ac 01       	movw	r20, r24
    4be6:	83 e0       	ldi	r24, 0x03	; 3
    4be8:	89 83       	std	Y+1, r24	; 0x01
    4bea:	da 01       	movw	r26, r20
    4bec:	c9 01       	movw	r24, r18
    4bee:	88 27       	eor	r24, r24
    4bf0:	b7 fd       	sbrc	r27, 7
    4bf2:	83 95       	inc	r24
    4bf4:	99 27       	eor	r25, r25
    4bf6:	aa 27       	eor	r26, r26
    4bf8:	bb 27       	eor	r27, r27
    4bfa:	b8 2e       	mov	r11, r24
    4bfc:	21 15       	cp	r18, r1
    4bfe:	31 05       	cpc	r19, r1
    4c00:	41 05       	cpc	r20, r1
    4c02:	51 05       	cpc	r21, r1
    4c04:	19 f4       	brne	.+6      	; 0x4c0c <__floatsisf+0x36>
    4c06:	82 e0       	ldi	r24, 0x02	; 2
    4c08:	89 83       	std	Y+1, r24	; 0x01
    4c0a:	3a c0       	rjmp	.+116    	; 0x4c80 <__floatsisf+0xaa>
    4c0c:	88 23       	and	r24, r24
    4c0e:	a9 f0       	breq	.+42     	; 0x4c3a <__floatsisf+0x64>
    4c10:	20 30       	cpi	r18, 0x00	; 0
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	38 07       	cpc	r19, r24
    4c16:	80 e0       	ldi	r24, 0x00	; 0
    4c18:	48 07       	cpc	r20, r24
    4c1a:	80 e8       	ldi	r24, 0x80	; 128
    4c1c:	58 07       	cpc	r21, r24
    4c1e:	29 f4       	brne	.+10     	; 0x4c2a <__floatsisf+0x54>
    4c20:	60 e0       	ldi	r22, 0x00	; 0
    4c22:	70 e0       	ldi	r23, 0x00	; 0
    4c24:	80 e0       	ldi	r24, 0x00	; 0
    4c26:	9f ec       	ldi	r25, 0xCF	; 207
    4c28:	30 c0       	rjmp	.+96     	; 0x4c8a <__floatsisf+0xb4>
    4c2a:	ee 24       	eor	r14, r14
    4c2c:	ff 24       	eor	r15, r15
    4c2e:	87 01       	movw	r16, r14
    4c30:	e2 1a       	sub	r14, r18
    4c32:	f3 0a       	sbc	r15, r19
    4c34:	04 0b       	sbc	r16, r20
    4c36:	15 0b       	sbc	r17, r21
    4c38:	02 c0       	rjmp	.+4      	; 0x4c3e <__floatsisf+0x68>
    4c3a:	79 01       	movw	r14, r18
    4c3c:	8a 01       	movw	r16, r20
    4c3e:	8e e1       	ldi	r24, 0x1E	; 30
    4c40:	c8 2e       	mov	r12, r24
    4c42:	d1 2c       	mov	r13, r1
    4c44:	dc 82       	std	Y+4, r13	; 0x04
    4c46:	cb 82       	std	Y+3, r12	; 0x03
    4c48:	ed 82       	std	Y+5, r14	; 0x05
    4c4a:	fe 82       	std	Y+6, r15	; 0x06
    4c4c:	0f 83       	std	Y+7, r16	; 0x07
    4c4e:	18 87       	std	Y+8, r17	; 0x08
    4c50:	c8 01       	movw	r24, r16
    4c52:	b7 01       	movw	r22, r14
    4c54:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__clzsi2>
    4c58:	01 97       	sbiw	r24, 0x01	; 1
    4c5a:	18 16       	cp	r1, r24
    4c5c:	19 06       	cpc	r1, r25
    4c5e:	84 f4       	brge	.+32     	; 0x4c80 <__floatsisf+0xaa>
    4c60:	08 2e       	mov	r0, r24
    4c62:	04 c0       	rjmp	.+8      	; 0x4c6c <__floatsisf+0x96>
    4c64:	ee 0c       	add	r14, r14
    4c66:	ff 1c       	adc	r15, r15
    4c68:	00 1f       	adc	r16, r16
    4c6a:	11 1f       	adc	r17, r17
    4c6c:	0a 94       	dec	r0
    4c6e:	d2 f7       	brpl	.-12     	; 0x4c64 <__floatsisf+0x8e>
    4c70:	ed 82       	std	Y+5, r14	; 0x05
    4c72:	fe 82       	std	Y+6, r15	; 0x06
    4c74:	0f 83       	std	Y+7, r16	; 0x07
    4c76:	18 87       	std	Y+8, r17	; 0x08
    4c78:	c8 1a       	sub	r12, r24
    4c7a:	d9 0a       	sbc	r13, r25
    4c7c:	dc 82       	std	Y+4, r13	; 0x04
    4c7e:	cb 82       	std	Y+3, r12	; 0x03
    4c80:	ba 82       	std	Y+2, r11	; 0x02
    4c82:	ce 01       	movw	r24, r28
    4c84:	01 96       	adiw	r24, 0x01	; 1
    4c86:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__pack_f>
    4c8a:	28 96       	adiw	r28, 0x08	; 8
    4c8c:	e9 e0       	ldi	r30, 0x09	; 9
    4c8e:	0c 94 cb 28 	jmp	0x5196	; 0x5196 <__epilogue_restores__+0x12>

00004c92 <__fixsfsi>:
    4c92:	ac e0       	ldi	r26, 0x0C	; 12
    4c94:	b0 e0       	ldi	r27, 0x00	; 0
    4c96:	ef e4       	ldi	r30, 0x4F	; 79
    4c98:	f6 e2       	ldi	r31, 0x26	; 38
    4c9a:	0c 94 b6 28 	jmp	0x516c	; 0x516c <__prologue_saves__+0x20>
    4c9e:	69 83       	std	Y+1, r22	; 0x01
    4ca0:	7a 83       	std	Y+2, r23	; 0x02
    4ca2:	8b 83       	std	Y+3, r24	; 0x03
    4ca4:	9c 83       	std	Y+4, r25	; 0x04
    4ca6:	ce 01       	movw	r24, r28
    4ca8:	01 96       	adiw	r24, 0x01	; 1
    4caa:	be 01       	movw	r22, r28
    4cac:	6b 5f       	subi	r22, 0xFB	; 251
    4cae:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb0:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__unpack_f>
    4cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb6:	82 30       	cpi	r24, 0x02	; 2
    4cb8:	61 f1       	breq	.+88     	; 0x4d12 <__fixsfsi+0x80>
    4cba:	82 30       	cpi	r24, 0x02	; 2
    4cbc:	50 f1       	brcs	.+84     	; 0x4d12 <__fixsfsi+0x80>
    4cbe:	84 30       	cpi	r24, 0x04	; 4
    4cc0:	21 f4       	brne	.+8      	; 0x4cca <__fixsfsi+0x38>
    4cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    4cc4:	88 23       	and	r24, r24
    4cc6:	51 f1       	breq	.+84     	; 0x4d1c <__fixsfsi+0x8a>
    4cc8:	2e c0       	rjmp	.+92     	; 0x4d26 <__fixsfsi+0x94>
    4cca:	2f 81       	ldd	r18, Y+7	; 0x07
    4ccc:	38 85       	ldd	r19, Y+8	; 0x08
    4cce:	37 fd       	sbrc	r19, 7
    4cd0:	20 c0       	rjmp	.+64     	; 0x4d12 <__fixsfsi+0x80>
    4cd2:	6e 81       	ldd	r22, Y+6	; 0x06
    4cd4:	2f 31       	cpi	r18, 0x1F	; 31
    4cd6:	31 05       	cpc	r19, r1
    4cd8:	1c f0       	brlt	.+6      	; 0x4ce0 <__fixsfsi+0x4e>
    4cda:	66 23       	and	r22, r22
    4cdc:	f9 f0       	breq	.+62     	; 0x4d1c <__fixsfsi+0x8a>
    4cde:	23 c0       	rjmp	.+70     	; 0x4d26 <__fixsfsi+0x94>
    4ce0:	8e e1       	ldi	r24, 0x1E	; 30
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	82 1b       	sub	r24, r18
    4ce6:	93 0b       	sbc	r25, r19
    4ce8:	29 85       	ldd	r18, Y+9	; 0x09
    4cea:	3a 85       	ldd	r19, Y+10	; 0x0a
    4cec:	4b 85       	ldd	r20, Y+11	; 0x0b
    4cee:	5c 85       	ldd	r21, Y+12	; 0x0c
    4cf0:	04 c0       	rjmp	.+8      	; 0x4cfa <__fixsfsi+0x68>
    4cf2:	56 95       	lsr	r21
    4cf4:	47 95       	ror	r20
    4cf6:	37 95       	ror	r19
    4cf8:	27 95       	ror	r18
    4cfa:	8a 95       	dec	r24
    4cfc:	d2 f7       	brpl	.-12     	; 0x4cf2 <__fixsfsi+0x60>
    4cfe:	66 23       	and	r22, r22
    4d00:	b1 f0       	breq	.+44     	; 0x4d2e <__fixsfsi+0x9c>
    4d02:	50 95       	com	r21
    4d04:	40 95       	com	r20
    4d06:	30 95       	com	r19
    4d08:	21 95       	neg	r18
    4d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d0c:	4f 4f       	sbci	r20, 0xFF	; 255
    4d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    4d10:	0e c0       	rjmp	.+28     	; 0x4d2e <__fixsfsi+0x9c>
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	40 e0       	ldi	r20, 0x00	; 0
    4d18:	50 e0       	ldi	r21, 0x00	; 0
    4d1a:	09 c0       	rjmp	.+18     	; 0x4d2e <__fixsfsi+0x9c>
    4d1c:	2f ef       	ldi	r18, 0xFF	; 255
    4d1e:	3f ef       	ldi	r19, 0xFF	; 255
    4d20:	4f ef       	ldi	r20, 0xFF	; 255
    4d22:	5f e7       	ldi	r21, 0x7F	; 127
    4d24:	04 c0       	rjmp	.+8      	; 0x4d2e <__fixsfsi+0x9c>
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	40 e0       	ldi	r20, 0x00	; 0
    4d2c:	50 e8       	ldi	r21, 0x80	; 128
    4d2e:	b9 01       	movw	r22, r18
    4d30:	ca 01       	movw	r24, r20
    4d32:	2c 96       	adiw	r28, 0x0c	; 12
    4d34:	e2 e0       	ldi	r30, 0x02	; 2
    4d36:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <__epilogue_restores__+0x20>

00004d3a <__clzsi2>:
    4d3a:	ef 92       	push	r14
    4d3c:	ff 92       	push	r15
    4d3e:	0f 93       	push	r16
    4d40:	1f 93       	push	r17
    4d42:	7b 01       	movw	r14, r22
    4d44:	8c 01       	movw	r16, r24
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	e8 16       	cp	r14, r24
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	f8 06       	cpc	r15, r24
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	08 07       	cpc	r16, r24
    4d52:	80 e0       	ldi	r24, 0x00	; 0
    4d54:	18 07       	cpc	r17, r24
    4d56:	88 f4       	brcc	.+34     	; 0x4d7a <__clzsi2+0x40>
    4d58:	8f ef       	ldi	r24, 0xFF	; 255
    4d5a:	e8 16       	cp	r14, r24
    4d5c:	f1 04       	cpc	r15, r1
    4d5e:	01 05       	cpc	r16, r1
    4d60:	11 05       	cpc	r17, r1
    4d62:	31 f0       	breq	.+12     	; 0x4d70 <__clzsi2+0x36>
    4d64:	28 f0       	brcs	.+10     	; 0x4d70 <__clzsi2+0x36>
    4d66:	88 e0       	ldi	r24, 0x08	; 8
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	a0 e0       	ldi	r26, 0x00	; 0
    4d6c:	b0 e0       	ldi	r27, 0x00	; 0
    4d6e:	17 c0       	rjmp	.+46     	; 0x4d9e <__clzsi2+0x64>
    4d70:	80 e0       	ldi	r24, 0x00	; 0
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	a0 e0       	ldi	r26, 0x00	; 0
    4d76:	b0 e0       	ldi	r27, 0x00	; 0
    4d78:	12 c0       	rjmp	.+36     	; 0x4d9e <__clzsi2+0x64>
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	e8 16       	cp	r14, r24
    4d7e:	80 e0       	ldi	r24, 0x00	; 0
    4d80:	f8 06       	cpc	r15, r24
    4d82:	80 e0       	ldi	r24, 0x00	; 0
    4d84:	08 07       	cpc	r16, r24
    4d86:	81 e0       	ldi	r24, 0x01	; 1
    4d88:	18 07       	cpc	r17, r24
    4d8a:	28 f0       	brcs	.+10     	; 0x4d96 <__clzsi2+0x5c>
    4d8c:	88 e1       	ldi	r24, 0x18	; 24
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	a0 e0       	ldi	r26, 0x00	; 0
    4d92:	b0 e0       	ldi	r27, 0x00	; 0
    4d94:	04 c0       	rjmp	.+8      	; 0x4d9e <__clzsi2+0x64>
    4d96:	80 e1       	ldi	r24, 0x10	; 16
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	a0 e0       	ldi	r26, 0x00	; 0
    4d9c:	b0 e0       	ldi	r27, 0x00	; 0
    4d9e:	20 e2       	ldi	r18, 0x20	; 32
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	40 e0       	ldi	r20, 0x00	; 0
    4da4:	50 e0       	ldi	r21, 0x00	; 0
    4da6:	28 1b       	sub	r18, r24
    4da8:	39 0b       	sbc	r19, r25
    4daa:	4a 0b       	sbc	r20, r26
    4dac:	5b 0b       	sbc	r21, r27
    4dae:	04 c0       	rjmp	.+8      	; 0x4db8 <__clzsi2+0x7e>
    4db0:	16 95       	lsr	r17
    4db2:	07 95       	ror	r16
    4db4:	f7 94       	ror	r15
    4db6:	e7 94       	ror	r14
    4db8:	8a 95       	dec	r24
    4dba:	d2 f7       	brpl	.-12     	; 0x4db0 <__clzsi2+0x76>
    4dbc:	f7 01       	movw	r30, r14
    4dbe:	e7 58       	subi	r30, 0x87	; 135
    4dc0:	fd 4f       	sbci	r31, 0xFD	; 253
    4dc2:	80 81       	ld	r24, Z
    4dc4:	28 1b       	sub	r18, r24
    4dc6:	31 09       	sbc	r19, r1
    4dc8:	41 09       	sbc	r20, r1
    4dca:	51 09       	sbc	r21, r1
    4dcc:	c9 01       	movw	r24, r18
    4dce:	1f 91       	pop	r17
    4dd0:	0f 91       	pop	r16
    4dd2:	ff 90       	pop	r15
    4dd4:	ef 90       	pop	r14
    4dd6:	08 95       	ret

00004dd8 <__pack_f>:
    4dd8:	df 92       	push	r13
    4dda:	ef 92       	push	r14
    4ddc:	ff 92       	push	r15
    4dde:	0f 93       	push	r16
    4de0:	1f 93       	push	r17
    4de2:	fc 01       	movw	r30, r24
    4de4:	e4 80       	ldd	r14, Z+4	; 0x04
    4de6:	f5 80       	ldd	r15, Z+5	; 0x05
    4de8:	06 81       	ldd	r16, Z+6	; 0x06
    4dea:	17 81       	ldd	r17, Z+7	; 0x07
    4dec:	d1 80       	ldd	r13, Z+1	; 0x01
    4dee:	80 81       	ld	r24, Z
    4df0:	82 30       	cpi	r24, 0x02	; 2
    4df2:	48 f4       	brcc	.+18     	; 0x4e06 <__pack_f+0x2e>
    4df4:	80 e0       	ldi	r24, 0x00	; 0
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	a0 e1       	ldi	r26, 0x10	; 16
    4dfa:	b0 e0       	ldi	r27, 0x00	; 0
    4dfc:	e8 2a       	or	r14, r24
    4dfe:	f9 2a       	or	r15, r25
    4e00:	0a 2b       	or	r16, r26
    4e02:	1b 2b       	or	r17, r27
    4e04:	a5 c0       	rjmp	.+330    	; 0x4f50 <__pack_f+0x178>
    4e06:	84 30       	cpi	r24, 0x04	; 4
    4e08:	09 f4       	brne	.+2      	; 0x4e0c <__pack_f+0x34>
    4e0a:	9f c0       	rjmp	.+318    	; 0x4f4a <__pack_f+0x172>
    4e0c:	82 30       	cpi	r24, 0x02	; 2
    4e0e:	21 f4       	brne	.+8      	; 0x4e18 <__pack_f+0x40>
    4e10:	ee 24       	eor	r14, r14
    4e12:	ff 24       	eor	r15, r15
    4e14:	87 01       	movw	r16, r14
    4e16:	05 c0       	rjmp	.+10     	; 0x4e22 <__pack_f+0x4a>
    4e18:	e1 14       	cp	r14, r1
    4e1a:	f1 04       	cpc	r15, r1
    4e1c:	01 05       	cpc	r16, r1
    4e1e:	11 05       	cpc	r17, r1
    4e20:	19 f4       	brne	.+6      	; 0x4e28 <__pack_f+0x50>
    4e22:	e0 e0       	ldi	r30, 0x00	; 0
    4e24:	f0 e0       	ldi	r31, 0x00	; 0
    4e26:	96 c0       	rjmp	.+300    	; 0x4f54 <__pack_f+0x17c>
    4e28:	62 81       	ldd	r22, Z+2	; 0x02
    4e2a:	73 81       	ldd	r23, Z+3	; 0x03
    4e2c:	9f ef       	ldi	r25, 0xFF	; 255
    4e2e:	62 38       	cpi	r22, 0x82	; 130
    4e30:	79 07       	cpc	r23, r25
    4e32:	0c f0       	brlt	.+2      	; 0x4e36 <__pack_f+0x5e>
    4e34:	5b c0       	rjmp	.+182    	; 0x4eec <__pack_f+0x114>
    4e36:	22 e8       	ldi	r18, 0x82	; 130
    4e38:	3f ef       	ldi	r19, 0xFF	; 255
    4e3a:	26 1b       	sub	r18, r22
    4e3c:	37 0b       	sbc	r19, r23
    4e3e:	2a 31       	cpi	r18, 0x1A	; 26
    4e40:	31 05       	cpc	r19, r1
    4e42:	2c f0       	brlt	.+10     	; 0x4e4e <__pack_f+0x76>
    4e44:	20 e0       	ldi	r18, 0x00	; 0
    4e46:	30 e0       	ldi	r19, 0x00	; 0
    4e48:	40 e0       	ldi	r20, 0x00	; 0
    4e4a:	50 e0       	ldi	r21, 0x00	; 0
    4e4c:	2a c0       	rjmp	.+84     	; 0x4ea2 <__pack_f+0xca>
    4e4e:	b8 01       	movw	r22, r16
    4e50:	a7 01       	movw	r20, r14
    4e52:	02 2e       	mov	r0, r18
    4e54:	04 c0       	rjmp	.+8      	; 0x4e5e <__pack_f+0x86>
    4e56:	76 95       	lsr	r23
    4e58:	67 95       	ror	r22
    4e5a:	57 95       	ror	r21
    4e5c:	47 95       	ror	r20
    4e5e:	0a 94       	dec	r0
    4e60:	d2 f7       	brpl	.-12     	; 0x4e56 <__pack_f+0x7e>
    4e62:	81 e0       	ldi	r24, 0x01	; 1
    4e64:	90 e0       	ldi	r25, 0x00	; 0
    4e66:	a0 e0       	ldi	r26, 0x00	; 0
    4e68:	b0 e0       	ldi	r27, 0x00	; 0
    4e6a:	04 c0       	rjmp	.+8      	; 0x4e74 <__pack_f+0x9c>
    4e6c:	88 0f       	add	r24, r24
    4e6e:	99 1f       	adc	r25, r25
    4e70:	aa 1f       	adc	r26, r26
    4e72:	bb 1f       	adc	r27, r27
    4e74:	2a 95       	dec	r18
    4e76:	d2 f7       	brpl	.-12     	; 0x4e6c <__pack_f+0x94>
    4e78:	01 97       	sbiw	r24, 0x01	; 1
    4e7a:	a1 09       	sbc	r26, r1
    4e7c:	b1 09       	sbc	r27, r1
    4e7e:	8e 21       	and	r24, r14
    4e80:	9f 21       	and	r25, r15
    4e82:	a0 23       	and	r26, r16
    4e84:	b1 23       	and	r27, r17
    4e86:	00 97       	sbiw	r24, 0x00	; 0
    4e88:	a1 05       	cpc	r26, r1
    4e8a:	b1 05       	cpc	r27, r1
    4e8c:	21 f0       	breq	.+8      	; 0x4e96 <__pack_f+0xbe>
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	a0 e0       	ldi	r26, 0x00	; 0
    4e94:	b0 e0       	ldi	r27, 0x00	; 0
    4e96:	9a 01       	movw	r18, r20
    4e98:	ab 01       	movw	r20, r22
    4e9a:	28 2b       	or	r18, r24
    4e9c:	39 2b       	or	r19, r25
    4e9e:	4a 2b       	or	r20, r26
    4ea0:	5b 2b       	or	r21, r27
    4ea2:	da 01       	movw	r26, r20
    4ea4:	c9 01       	movw	r24, r18
    4ea6:	8f 77       	andi	r24, 0x7F	; 127
    4ea8:	90 70       	andi	r25, 0x00	; 0
    4eaa:	a0 70       	andi	r26, 0x00	; 0
    4eac:	b0 70       	andi	r27, 0x00	; 0
    4eae:	80 34       	cpi	r24, 0x40	; 64
    4eb0:	91 05       	cpc	r25, r1
    4eb2:	a1 05       	cpc	r26, r1
    4eb4:	b1 05       	cpc	r27, r1
    4eb6:	39 f4       	brne	.+14     	; 0x4ec6 <__pack_f+0xee>
    4eb8:	27 ff       	sbrs	r18, 7
    4eba:	09 c0       	rjmp	.+18     	; 0x4ece <__pack_f+0xf6>
    4ebc:	20 5c       	subi	r18, 0xC0	; 192
    4ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec0:	4f 4f       	sbci	r20, 0xFF	; 255
    4ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ec4:	04 c0       	rjmp	.+8      	; 0x4ece <__pack_f+0xf6>
    4ec6:	21 5c       	subi	r18, 0xC1	; 193
    4ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    4eca:	4f 4f       	sbci	r20, 0xFF	; 255
    4ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    4ece:	e0 e0       	ldi	r30, 0x00	; 0
    4ed0:	f0 e0       	ldi	r31, 0x00	; 0
    4ed2:	20 30       	cpi	r18, 0x00	; 0
    4ed4:	a0 e0       	ldi	r26, 0x00	; 0
    4ed6:	3a 07       	cpc	r19, r26
    4ed8:	a0 e0       	ldi	r26, 0x00	; 0
    4eda:	4a 07       	cpc	r20, r26
    4edc:	a0 e4       	ldi	r26, 0x40	; 64
    4ede:	5a 07       	cpc	r21, r26
    4ee0:	10 f0       	brcs	.+4      	; 0x4ee6 <__pack_f+0x10e>
    4ee2:	e1 e0       	ldi	r30, 0x01	; 1
    4ee4:	f0 e0       	ldi	r31, 0x00	; 0
    4ee6:	79 01       	movw	r14, r18
    4ee8:	8a 01       	movw	r16, r20
    4eea:	27 c0       	rjmp	.+78     	; 0x4f3a <__pack_f+0x162>
    4eec:	60 38       	cpi	r22, 0x80	; 128
    4eee:	71 05       	cpc	r23, r1
    4ef0:	64 f5       	brge	.+88     	; 0x4f4a <__pack_f+0x172>
    4ef2:	fb 01       	movw	r30, r22
    4ef4:	e1 58       	subi	r30, 0x81	; 129
    4ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef8:	d8 01       	movw	r26, r16
    4efa:	c7 01       	movw	r24, r14
    4efc:	8f 77       	andi	r24, 0x7F	; 127
    4efe:	90 70       	andi	r25, 0x00	; 0
    4f00:	a0 70       	andi	r26, 0x00	; 0
    4f02:	b0 70       	andi	r27, 0x00	; 0
    4f04:	80 34       	cpi	r24, 0x40	; 64
    4f06:	91 05       	cpc	r25, r1
    4f08:	a1 05       	cpc	r26, r1
    4f0a:	b1 05       	cpc	r27, r1
    4f0c:	39 f4       	brne	.+14     	; 0x4f1c <__pack_f+0x144>
    4f0e:	e7 fe       	sbrs	r14, 7
    4f10:	0d c0       	rjmp	.+26     	; 0x4f2c <__pack_f+0x154>
    4f12:	80 e4       	ldi	r24, 0x40	; 64
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	a0 e0       	ldi	r26, 0x00	; 0
    4f18:	b0 e0       	ldi	r27, 0x00	; 0
    4f1a:	04 c0       	rjmp	.+8      	; 0x4f24 <__pack_f+0x14c>
    4f1c:	8f e3       	ldi	r24, 0x3F	; 63
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	a0 e0       	ldi	r26, 0x00	; 0
    4f22:	b0 e0       	ldi	r27, 0x00	; 0
    4f24:	e8 0e       	add	r14, r24
    4f26:	f9 1e       	adc	r15, r25
    4f28:	0a 1f       	adc	r16, r26
    4f2a:	1b 1f       	adc	r17, r27
    4f2c:	17 ff       	sbrs	r17, 7
    4f2e:	05 c0       	rjmp	.+10     	; 0x4f3a <__pack_f+0x162>
    4f30:	16 95       	lsr	r17
    4f32:	07 95       	ror	r16
    4f34:	f7 94       	ror	r15
    4f36:	e7 94       	ror	r14
    4f38:	31 96       	adiw	r30, 0x01	; 1
    4f3a:	87 e0       	ldi	r24, 0x07	; 7
    4f3c:	16 95       	lsr	r17
    4f3e:	07 95       	ror	r16
    4f40:	f7 94       	ror	r15
    4f42:	e7 94       	ror	r14
    4f44:	8a 95       	dec	r24
    4f46:	d1 f7       	brne	.-12     	; 0x4f3c <__pack_f+0x164>
    4f48:	05 c0       	rjmp	.+10     	; 0x4f54 <__pack_f+0x17c>
    4f4a:	ee 24       	eor	r14, r14
    4f4c:	ff 24       	eor	r15, r15
    4f4e:	87 01       	movw	r16, r14
    4f50:	ef ef       	ldi	r30, 0xFF	; 255
    4f52:	f0 e0       	ldi	r31, 0x00	; 0
    4f54:	6e 2f       	mov	r22, r30
    4f56:	67 95       	ror	r22
    4f58:	66 27       	eor	r22, r22
    4f5a:	67 95       	ror	r22
    4f5c:	90 2f       	mov	r25, r16
    4f5e:	9f 77       	andi	r25, 0x7F	; 127
    4f60:	d7 94       	ror	r13
    4f62:	dd 24       	eor	r13, r13
    4f64:	d7 94       	ror	r13
    4f66:	8e 2f       	mov	r24, r30
    4f68:	86 95       	lsr	r24
    4f6a:	49 2f       	mov	r20, r25
    4f6c:	46 2b       	or	r20, r22
    4f6e:	58 2f       	mov	r21, r24
    4f70:	5d 29       	or	r21, r13
    4f72:	b7 01       	movw	r22, r14
    4f74:	ca 01       	movw	r24, r20
    4f76:	1f 91       	pop	r17
    4f78:	0f 91       	pop	r16
    4f7a:	ff 90       	pop	r15
    4f7c:	ef 90       	pop	r14
    4f7e:	df 90       	pop	r13
    4f80:	08 95       	ret

00004f82 <__unpack_f>:
    4f82:	fc 01       	movw	r30, r24
    4f84:	db 01       	movw	r26, r22
    4f86:	40 81       	ld	r20, Z
    4f88:	51 81       	ldd	r21, Z+1	; 0x01
    4f8a:	22 81       	ldd	r18, Z+2	; 0x02
    4f8c:	62 2f       	mov	r22, r18
    4f8e:	6f 77       	andi	r22, 0x7F	; 127
    4f90:	70 e0       	ldi	r23, 0x00	; 0
    4f92:	22 1f       	adc	r18, r18
    4f94:	22 27       	eor	r18, r18
    4f96:	22 1f       	adc	r18, r18
    4f98:	93 81       	ldd	r25, Z+3	; 0x03
    4f9a:	89 2f       	mov	r24, r25
    4f9c:	88 0f       	add	r24, r24
    4f9e:	82 2b       	or	r24, r18
    4fa0:	28 2f       	mov	r18, r24
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	99 1f       	adc	r25, r25
    4fa6:	99 27       	eor	r25, r25
    4fa8:	99 1f       	adc	r25, r25
    4faa:	11 96       	adiw	r26, 0x01	; 1
    4fac:	9c 93       	st	X, r25
    4fae:	11 97       	sbiw	r26, 0x01	; 1
    4fb0:	21 15       	cp	r18, r1
    4fb2:	31 05       	cpc	r19, r1
    4fb4:	a9 f5       	brne	.+106    	; 0x5020 <__unpack_f+0x9e>
    4fb6:	41 15       	cp	r20, r1
    4fb8:	51 05       	cpc	r21, r1
    4fba:	61 05       	cpc	r22, r1
    4fbc:	71 05       	cpc	r23, r1
    4fbe:	11 f4       	brne	.+4      	; 0x4fc4 <__unpack_f+0x42>
    4fc0:	82 e0       	ldi	r24, 0x02	; 2
    4fc2:	37 c0       	rjmp	.+110    	; 0x5032 <__unpack_f+0xb0>
    4fc4:	82 e8       	ldi	r24, 0x82	; 130
    4fc6:	9f ef       	ldi	r25, 0xFF	; 255
    4fc8:	13 96       	adiw	r26, 0x03	; 3
    4fca:	9c 93       	st	X, r25
    4fcc:	8e 93       	st	-X, r24
    4fce:	12 97       	sbiw	r26, 0x02	; 2
    4fd0:	9a 01       	movw	r18, r20
    4fd2:	ab 01       	movw	r20, r22
    4fd4:	67 e0       	ldi	r22, 0x07	; 7
    4fd6:	22 0f       	add	r18, r18
    4fd8:	33 1f       	adc	r19, r19
    4fda:	44 1f       	adc	r20, r20
    4fdc:	55 1f       	adc	r21, r21
    4fde:	6a 95       	dec	r22
    4fe0:	d1 f7       	brne	.-12     	; 0x4fd6 <__unpack_f+0x54>
    4fe2:	83 e0       	ldi	r24, 0x03	; 3
    4fe4:	8c 93       	st	X, r24
    4fe6:	0d c0       	rjmp	.+26     	; 0x5002 <__unpack_f+0x80>
    4fe8:	22 0f       	add	r18, r18
    4fea:	33 1f       	adc	r19, r19
    4fec:	44 1f       	adc	r20, r20
    4fee:	55 1f       	adc	r21, r21
    4ff0:	12 96       	adiw	r26, 0x02	; 2
    4ff2:	8d 91       	ld	r24, X+
    4ff4:	9c 91       	ld	r25, X
    4ff6:	13 97       	sbiw	r26, 0x03	; 3
    4ff8:	01 97       	sbiw	r24, 0x01	; 1
    4ffa:	13 96       	adiw	r26, 0x03	; 3
    4ffc:	9c 93       	st	X, r25
    4ffe:	8e 93       	st	-X, r24
    5000:	12 97       	sbiw	r26, 0x02	; 2
    5002:	20 30       	cpi	r18, 0x00	; 0
    5004:	80 e0       	ldi	r24, 0x00	; 0
    5006:	38 07       	cpc	r19, r24
    5008:	80 e0       	ldi	r24, 0x00	; 0
    500a:	48 07       	cpc	r20, r24
    500c:	80 e4       	ldi	r24, 0x40	; 64
    500e:	58 07       	cpc	r21, r24
    5010:	58 f3       	brcs	.-42     	; 0x4fe8 <__unpack_f+0x66>
    5012:	14 96       	adiw	r26, 0x04	; 4
    5014:	2d 93       	st	X+, r18
    5016:	3d 93       	st	X+, r19
    5018:	4d 93       	st	X+, r20
    501a:	5c 93       	st	X, r21
    501c:	17 97       	sbiw	r26, 0x07	; 7
    501e:	08 95       	ret
    5020:	2f 3f       	cpi	r18, 0xFF	; 255
    5022:	31 05       	cpc	r19, r1
    5024:	79 f4       	brne	.+30     	; 0x5044 <__unpack_f+0xc2>
    5026:	41 15       	cp	r20, r1
    5028:	51 05       	cpc	r21, r1
    502a:	61 05       	cpc	r22, r1
    502c:	71 05       	cpc	r23, r1
    502e:	19 f4       	brne	.+6      	; 0x5036 <__unpack_f+0xb4>
    5030:	84 e0       	ldi	r24, 0x04	; 4
    5032:	8c 93       	st	X, r24
    5034:	08 95       	ret
    5036:	64 ff       	sbrs	r22, 4
    5038:	03 c0       	rjmp	.+6      	; 0x5040 <__unpack_f+0xbe>
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	8c 93       	st	X, r24
    503e:	12 c0       	rjmp	.+36     	; 0x5064 <__unpack_f+0xe2>
    5040:	1c 92       	st	X, r1
    5042:	10 c0       	rjmp	.+32     	; 0x5064 <__unpack_f+0xe2>
    5044:	2f 57       	subi	r18, 0x7F	; 127
    5046:	30 40       	sbci	r19, 0x00	; 0
    5048:	13 96       	adiw	r26, 0x03	; 3
    504a:	3c 93       	st	X, r19
    504c:	2e 93       	st	-X, r18
    504e:	12 97       	sbiw	r26, 0x02	; 2
    5050:	83 e0       	ldi	r24, 0x03	; 3
    5052:	8c 93       	st	X, r24
    5054:	87 e0       	ldi	r24, 0x07	; 7
    5056:	44 0f       	add	r20, r20
    5058:	55 1f       	adc	r21, r21
    505a:	66 1f       	adc	r22, r22
    505c:	77 1f       	adc	r23, r23
    505e:	8a 95       	dec	r24
    5060:	d1 f7       	brne	.-12     	; 0x5056 <__unpack_f+0xd4>
    5062:	70 64       	ori	r23, 0x40	; 64
    5064:	14 96       	adiw	r26, 0x04	; 4
    5066:	4d 93       	st	X+, r20
    5068:	5d 93       	st	X+, r21
    506a:	6d 93       	st	X+, r22
    506c:	7c 93       	st	X, r23
    506e:	17 97       	sbiw	r26, 0x07	; 7
    5070:	08 95       	ret

00005072 <__fpcmp_parts_f>:
    5072:	1f 93       	push	r17
    5074:	dc 01       	movw	r26, r24
    5076:	fb 01       	movw	r30, r22
    5078:	9c 91       	ld	r25, X
    507a:	92 30       	cpi	r25, 0x02	; 2
    507c:	08 f4       	brcc	.+2      	; 0x5080 <__fpcmp_parts_f+0xe>
    507e:	47 c0       	rjmp	.+142    	; 0x510e <__fpcmp_parts_f+0x9c>
    5080:	80 81       	ld	r24, Z
    5082:	82 30       	cpi	r24, 0x02	; 2
    5084:	08 f4       	brcc	.+2      	; 0x5088 <__fpcmp_parts_f+0x16>
    5086:	43 c0       	rjmp	.+134    	; 0x510e <__fpcmp_parts_f+0x9c>
    5088:	94 30       	cpi	r25, 0x04	; 4
    508a:	51 f4       	brne	.+20     	; 0x50a0 <__fpcmp_parts_f+0x2e>
    508c:	11 96       	adiw	r26, 0x01	; 1
    508e:	1c 91       	ld	r17, X
    5090:	84 30       	cpi	r24, 0x04	; 4
    5092:	99 f5       	brne	.+102    	; 0x50fa <__fpcmp_parts_f+0x88>
    5094:	81 81       	ldd	r24, Z+1	; 0x01
    5096:	68 2f       	mov	r22, r24
    5098:	70 e0       	ldi	r23, 0x00	; 0
    509a:	61 1b       	sub	r22, r17
    509c:	71 09       	sbc	r23, r1
    509e:	3f c0       	rjmp	.+126    	; 0x511e <__fpcmp_parts_f+0xac>
    50a0:	84 30       	cpi	r24, 0x04	; 4
    50a2:	21 f0       	breq	.+8      	; 0x50ac <__fpcmp_parts_f+0x3a>
    50a4:	92 30       	cpi	r25, 0x02	; 2
    50a6:	31 f4       	brne	.+12     	; 0x50b4 <__fpcmp_parts_f+0x42>
    50a8:	82 30       	cpi	r24, 0x02	; 2
    50aa:	b9 f1       	breq	.+110    	; 0x511a <__fpcmp_parts_f+0xa8>
    50ac:	81 81       	ldd	r24, Z+1	; 0x01
    50ae:	88 23       	and	r24, r24
    50b0:	89 f1       	breq	.+98     	; 0x5114 <__fpcmp_parts_f+0xa2>
    50b2:	2d c0       	rjmp	.+90     	; 0x510e <__fpcmp_parts_f+0x9c>
    50b4:	11 96       	adiw	r26, 0x01	; 1
    50b6:	1c 91       	ld	r17, X
    50b8:	11 97       	sbiw	r26, 0x01	; 1
    50ba:	82 30       	cpi	r24, 0x02	; 2
    50bc:	f1 f0       	breq	.+60     	; 0x50fa <__fpcmp_parts_f+0x88>
    50be:	81 81       	ldd	r24, Z+1	; 0x01
    50c0:	18 17       	cp	r17, r24
    50c2:	d9 f4       	brne	.+54     	; 0x50fa <__fpcmp_parts_f+0x88>
    50c4:	12 96       	adiw	r26, 0x02	; 2
    50c6:	2d 91       	ld	r18, X+
    50c8:	3c 91       	ld	r19, X
    50ca:	13 97       	sbiw	r26, 0x03	; 3
    50cc:	82 81       	ldd	r24, Z+2	; 0x02
    50ce:	93 81       	ldd	r25, Z+3	; 0x03
    50d0:	82 17       	cp	r24, r18
    50d2:	93 07       	cpc	r25, r19
    50d4:	94 f0       	brlt	.+36     	; 0x50fa <__fpcmp_parts_f+0x88>
    50d6:	28 17       	cp	r18, r24
    50d8:	39 07       	cpc	r19, r25
    50da:	bc f0       	brlt	.+46     	; 0x510a <__fpcmp_parts_f+0x98>
    50dc:	14 96       	adiw	r26, 0x04	; 4
    50de:	8d 91       	ld	r24, X+
    50e0:	9d 91       	ld	r25, X+
    50e2:	0d 90       	ld	r0, X+
    50e4:	bc 91       	ld	r27, X
    50e6:	a0 2d       	mov	r26, r0
    50e8:	24 81       	ldd	r18, Z+4	; 0x04
    50ea:	35 81       	ldd	r19, Z+5	; 0x05
    50ec:	46 81       	ldd	r20, Z+6	; 0x06
    50ee:	57 81       	ldd	r21, Z+7	; 0x07
    50f0:	28 17       	cp	r18, r24
    50f2:	39 07       	cpc	r19, r25
    50f4:	4a 07       	cpc	r20, r26
    50f6:	5b 07       	cpc	r21, r27
    50f8:	18 f4       	brcc	.+6      	; 0x5100 <__fpcmp_parts_f+0x8e>
    50fa:	11 23       	and	r17, r17
    50fc:	41 f0       	breq	.+16     	; 0x510e <__fpcmp_parts_f+0x9c>
    50fe:	0a c0       	rjmp	.+20     	; 0x5114 <__fpcmp_parts_f+0xa2>
    5100:	82 17       	cp	r24, r18
    5102:	93 07       	cpc	r25, r19
    5104:	a4 07       	cpc	r26, r20
    5106:	b5 07       	cpc	r27, r21
    5108:	40 f4       	brcc	.+16     	; 0x511a <__fpcmp_parts_f+0xa8>
    510a:	11 23       	and	r17, r17
    510c:	19 f0       	breq	.+6      	; 0x5114 <__fpcmp_parts_f+0xa2>
    510e:	61 e0       	ldi	r22, 0x01	; 1
    5110:	70 e0       	ldi	r23, 0x00	; 0
    5112:	05 c0       	rjmp	.+10     	; 0x511e <__fpcmp_parts_f+0xac>
    5114:	6f ef       	ldi	r22, 0xFF	; 255
    5116:	7f ef       	ldi	r23, 0xFF	; 255
    5118:	02 c0       	rjmp	.+4      	; 0x511e <__fpcmp_parts_f+0xac>
    511a:	60 e0       	ldi	r22, 0x00	; 0
    511c:	70 e0       	ldi	r23, 0x00	; 0
    511e:	cb 01       	movw	r24, r22
    5120:	1f 91       	pop	r17
    5122:	08 95       	ret

00005124 <__udivmodhi4>:
    5124:	aa 1b       	sub	r26, r26
    5126:	bb 1b       	sub	r27, r27
    5128:	51 e1       	ldi	r21, 0x11	; 17
    512a:	07 c0       	rjmp	.+14     	; 0x513a <__udivmodhi4_ep>

0000512c <__udivmodhi4_loop>:
    512c:	aa 1f       	adc	r26, r26
    512e:	bb 1f       	adc	r27, r27
    5130:	a6 17       	cp	r26, r22
    5132:	b7 07       	cpc	r27, r23
    5134:	10 f0       	brcs	.+4      	; 0x513a <__udivmodhi4_ep>
    5136:	a6 1b       	sub	r26, r22
    5138:	b7 0b       	sbc	r27, r23

0000513a <__udivmodhi4_ep>:
    513a:	88 1f       	adc	r24, r24
    513c:	99 1f       	adc	r25, r25
    513e:	5a 95       	dec	r21
    5140:	a9 f7       	brne	.-22     	; 0x512c <__udivmodhi4_loop>
    5142:	80 95       	com	r24
    5144:	90 95       	com	r25
    5146:	bc 01       	movw	r22, r24
    5148:	cd 01       	movw	r24, r26
    514a:	08 95       	ret

0000514c <__prologue_saves__>:
    514c:	2f 92       	push	r2
    514e:	3f 92       	push	r3
    5150:	4f 92       	push	r4
    5152:	5f 92       	push	r5
    5154:	6f 92       	push	r6
    5156:	7f 92       	push	r7
    5158:	8f 92       	push	r8
    515a:	9f 92       	push	r9
    515c:	af 92       	push	r10
    515e:	bf 92       	push	r11
    5160:	cf 92       	push	r12
    5162:	df 92       	push	r13
    5164:	ef 92       	push	r14
    5166:	ff 92       	push	r15
    5168:	0f 93       	push	r16
    516a:	1f 93       	push	r17
    516c:	cf 93       	push	r28
    516e:	df 93       	push	r29
    5170:	cd b7       	in	r28, 0x3d	; 61
    5172:	de b7       	in	r29, 0x3e	; 62
    5174:	ca 1b       	sub	r28, r26
    5176:	db 0b       	sbc	r29, r27
    5178:	0f b6       	in	r0, 0x3f	; 63
    517a:	f8 94       	cli
    517c:	de bf       	out	0x3e, r29	; 62
    517e:	0f be       	out	0x3f, r0	; 63
    5180:	cd bf       	out	0x3d, r28	; 61
    5182:	19 94       	eijmp

00005184 <__epilogue_restores__>:
    5184:	2a 88       	ldd	r2, Y+18	; 0x12
    5186:	39 88       	ldd	r3, Y+17	; 0x11
    5188:	48 88       	ldd	r4, Y+16	; 0x10
    518a:	5f 84       	ldd	r5, Y+15	; 0x0f
    518c:	6e 84       	ldd	r6, Y+14	; 0x0e
    518e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5190:	8c 84       	ldd	r8, Y+12	; 0x0c
    5192:	9b 84       	ldd	r9, Y+11	; 0x0b
    5194:	aa 84       	ldd	r10, Y+10	; 0x0a
    5196:	b9 84       	ldd	r11, Y+9	; 0x09
    5198:	c8 84       	ldd	r12, Y+8	; 0x08
    519a:	df 80       	ldd	r13, Y+7	; 0x07
    519c:	ee 80       	ldd	r14, Y+6	; 0x06
    519e:	fd 80       	ldd	r15, Y+5	; 0x05
    51a0:	0c 81       	ldd	r16, Y+4	; 0x04
    51a2:	1b 81       	ldd	r17, Y+3	; 0x03
    51a4:	aa 81       	ldd	r26, Y+2	; 0x02
    51a6:	b9 81       	ldd	r27, Y+1	; 0x01
    51a8:	ce 0f       	add	r28, r30
    51aa:	d1 1d       	adc	r29, r1
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	f8 94       	cli
    51b0:	de bf       	out	0x3e, r29	; 62
    51b2:	0f be       	out	0x3f, r0	; 63
    51b4:	cd bf       	out	0x3d, r28	; 61
    51b6:	ed 01       	movw	r28, r26
    51b8:	08 95       	ret

000051ba <_exit>:
    51ba:	f8 94       	cli

000051bc <__stop_program>:
    51bc:	ff cf       	rjmp	.-2      	; 0x51bc <__stop_program>
