
10B_Serial_Communication_ZigBee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001876  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  00001876  0000190a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  008001b0  008001b0  00001a5a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000414  00000000  00000000  00001a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000169f  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002cd  00000000  00000000  0000352d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001352  00000000  00000000  000037fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00004b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  00004e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000832  00000000  00000000  00005265  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00005a97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3d       	cpi	r26, 0xD7	; 215
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <main>
      8a:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      92:	8a ef       	ldi	r24, 0xFA	; 250
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	fc 01       	movw	r30, r24
      98:	31 97       	sbiw	r30, 0x01	; 1
      9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      9c:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      9e:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
      a0:	40 e3       	ldi	r20, 0x30	; 48
      a2:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      a4:	aa 9a       	sbi	0x15, 2	; 21
      a6:	22 ee       	ldi	r18, 0xE2	; 226
      a8:	34 e0       	ldi	r19, 0x04	; 4
      aa:	f9 01       	movw	r30, r18
      ac:	31 97       	sbiw	r30, 0x01	; 1
      ae:	f1 f7       	brne	.-4      	; 0xac <lcd_set_4bit+0x1a>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      b0:	aa 98       	cbi	0x15, 2	; 21
      b2:	fc 01       	movw	r30, r24
      b4:	31 97       	sbiw	r30, 0x01	; 1
      b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      b8:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      ba:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
      bc:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      be:	aa 9a       	sbi	0x15, 2	; 21
      c0:	f9 01       	movw	r30, r18
      c2:	31 97       	sbiw	r30, 0x01	; 1
      c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_set_4bit+0x30>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      c6:	aa 98       	cbi	0x15, 2	; 21
      c8:	fc 01       	movw	r30, r24
      ca:	31 97       	sbiw	r30, 0x01	; 1
      cc:	f1 f7       	brne	.-4      	; 0xca <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      ce:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      d0:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
      d2:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      d4:	aa 9a       	sbi	0x15, 2	; 21
      d6:	f9 01       	movw	r30, r18
      d8:	31 97       	sbiw	r30, 0x01	; 1
      da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_set_4bit+0x46>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      dc:	aa 98       	cbi	0x15, 2	; 21
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      e2:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      e4:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
      e6:	80 e2       	ldi	r24, 0x20	; 32
      e8:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      ea:	aa 9a       	sbi	0x15, 2	; 21
      ec:	c9 01       	movw	r24, r18
      ee:	01 97       	sbiw	r24, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <lcd_set_4bit+0x5c>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      f2:	aa 98       	cbi	0x15, 2	; 21
}
      f4:	08 95       	ret

000000f6 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
      f6:	95 b3       	in	r25, 0x15	; 21
      f8:	9f 70       	andi	r25, 0x0F	; 15
      fa:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
      fc:	25 b3       	in	r18, 0x15	; 21
      fe:	98 2f       	mov	r25, r24
     100:	90 7f       	andi	r25, 0xF0	; 240
     102:	92 2b       	or	r25, r18
     104:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
     106:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     108:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     10a:	aa 9a       	sbi	0x15, 2	; 21
     10c:	22 ee       	ldi	r18, 0xE2	; 226
     10e:	34 e0       	ldi	r19, 0x04	; 4
     110:	f9 01       	movw	r30, r18
     112:	31 97       	sbiw	r30, 0x01	; 1
     114:	f1 f7       	brne	.-4      	; 0x112 <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     116:	aa 98       	cbi	0x15, 2	; 21
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     118:	95 b3       	in	r25, 0x15	; 21
     11a:	9f 70       	andi	r25, 0x0F	; 15
     11c:	95 bb       	out	0x15, r25	; 21
	lcd_port |= cmd;
     11e:	95 b3       	in	r25, 0x15	; 21
     120:	82 95       	swap	r24
     122:	80 7f       	andi	r24, 0xF0	; 240
     124:	98 2b       	or	r25, r24
     126:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
     128:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     12a:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     12c:	aa 9a       	sbi	0x15, 2	; 21
     12e:	c9 01       	movw	r24, r18
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     134:	aa 98       	cbi	0x15, 2	; 21
}
     136:	08 95       	ret

00000138 <lcd_init>:
     138:	8a ef       	ldi	r24, 0xFA	; 250
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_init+0x4>
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     140:	88 e2       	ldi	r24, 0x28	; 40
     142:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     14c:	86 e0       	ldi	r24, 0x06	; 6
     14e:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     152:	8e e0       	ldi	r24, 0x0E	; 14
     154:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     158:	80 e8       	ldi	r24, 0x80	; 128
     15a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
}
     15e:	08 95       	ret

00000160 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     160:	95 b3       	in	r25, 0x15	; 21
     162:	9f 70       	andi	r25, 0x0F	; 15
     164:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
     166:	25 b3       	in	r18, 0x15	; 21
     168:	98 2f       	mov	r25, r24
     16a:	90 7f       	andi	r25, 0xF0	; 240
     16c:	92 2b       	or	r25, r18
     16e:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
     170:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     172:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     174:	aa 9a       	sbi	0x15, 2	; 21
     176:	22 ee       	ldi	r18, 0xE2	; 226
     178:	34 e0       	ldi	r19, 0x04	; 4
     17a:	f9 01       	movw	r30, r18
     17c:	31 97       	sbiw	r30, 0x01	; 1
     17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     180:	aa 98       	cbi	0x15, 2	; 21

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     182:	95 b3       	in	r25, 0x15	; 21
     184:	9f 70       	andi	r25, 0x0F	; 15
     186:	95 bb       	out	0x15, r25	; 21
	lcd_port |= letter;
     188:	95 b3       	in	r25, 0x15	; 21
     18a:	82 95       	swap	r24
     18c:	80 7f       	andi	r24, 0xF0	; 240
     18e:	98 2b       	or	r25, r24
     190:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
     192:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     194:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     196:	aa 9a       	sbi	0x15, 2	; 21
     198:	c9 01       	movw	r24, r18
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     19e:	aa 98       	cbi	0x15, 2	; 21
}
     1a0:	08 95       	ret

000001a2 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     1a2:	80 e8       	ldi	r24, 0x80	; 128
     1a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
}
     1a8:	08 95       	ret

000001aa <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	ec 01       	movw	r28, r24
     1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     1b2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
		str++;
     1b6:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     1b8:	88 81       	ld	r24, Y
     1ba:	88 23       	and	r24, r24
     1bc:	d1 f7       	brne	.-12     	; 0x1b2 <lcd_string+0x8>
     1be:	c0 e0       	ldi	r28, 0x00	; 0
     1c0:	d0 e0       	ldi	r29, 0x00	; 0
		str++;
	}
	int i;
	for(i=0;i<10;i++)
	{
		lcd_wr_char(' ');
     1c2:	80 e2       	ldi	r24, 0x20	; 32
     1c4:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
	{
		lcd_wr_char(*str);
		str++;
	}
	int i;
	for(i=0;i<10;i++)
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ca 30       	cpi	r28, 0x0A	; 10
     1cc:	d1 05       	cpc	r29, r1
     1ce:	c9 f7       	brne	.-14     	; 0x1c2 <lcd_string+0x18>
	{
		lcd_wr_char(' ');
	}
}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     1d6:	82 30       	cpi	r24, 0x02	; 2
     1d8:	69 f0       	breq	.+26     	; 0x1f4 <lcd_cursor+0x1e>
     1da:	83 30       	cpi	r24, 0x03	; 3
     1dc:	18 f4       	brcc	.+6      	; 0x1e4 <lcd_cursor+0xe>
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	a9 f4       	brne	.+42     	; 0x20c <lcd_cursor+0x36>
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <lcd_cursor+0x18>
     1e4:	83 30       	cpi	r24, 0x03	; 3
     1e6:	49 f0       	breq	.+18     	; 0x1fa <lcd_cursor+0x24>
     1e8:	84 30       	cpi	r24, 0x04	; 4
     1ea:	81 f4       	brne	.+32     	; 0x20c <lcd_cursor+0x36>
     1ec:	0b c0       	rjmp	.+22     	; 0x204 <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     1ee:	86 2f       	mov	r24, r22
     1f0:	81 58       	subi	r24, 0x81	; 129
     1f2:	05 c0       	rjmp	.+10     	; 0x1fe <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     1f4:	86 2f       	mov	r24, r22
     1f6:	81 54       	subi	r24, 0x41	; 65
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     1fa:	86 2f       	mov	r24, r22
     1fc:	8d 56       	subi	r24, 0x6D	; 109
     1fe:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
     202:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     204:	86 2f       	mov	r24, r22
     206:	8d 52       	subi	r24, 0x2D	; 45
     208:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
     20c:	08 95       	ret

0000020e <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	8a 01       	movw	r16, r20
     218:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     21a:	88 23       	and	r24, r24
     21c:	11 f0       	breq	.+4      	; 0x222 <lcd_print+0x14>
     21e:	66 23       	and	r22, r22
     220:	19 f4       	brne	.+6      	; 0x228 <lcd_print+0x1a>
	{
		lcd_home();
     222:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_home>
     226:	02 c0       	rjmp	.+4      	; 0x22c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     228:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     22c:	c5 30       	cpi	r28, 0x05	; 5
     22e:	d1 05       	cpc	r29, r1
     230:	71 f4       	brne	.+28     	; 0x24e <lcd_print+0x40>
	{
		million=value/10000+48;
     232:	c8 01       	movw	r24, r16
     234:	60 e1       	ldi	r22, 0x10	; 16
     236:	77 e2       	ldi	r23, 0x27	; 39
     238:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__udivmodhi4>
     23c:	cb 01       	movw	r24, r22
     23e:	c0 96       	adiw	r24, 0x30	; 48
     240:	90 93 c6 01 	sts	0x01C6, r25
     244:	80 93 c5 01 	sts	0x01C5, r24
		lcd_wr_char(million);
     248:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     24c:	05 c0       	rjmp	.+10     	; 0x258 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     24e:	c4 30       	cpi	r28, 0x04	; 4
     250:	d1 05       	cpc	r29, r1
     252:	11 f0       	breq	.+4      	; 0x258 <lcd_print+0x4a>
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	16 c0       	rjmp	.+44     	; 0x284 <lcd_print+0x76>
	{
		temp = value/1000;
     258:	c8 01       	movw	r24, r16
     25a:	68 ee       	ldi	r22, 0xE8	; 232
     25c:	73 e0       	ldi	r23, 0x03	; 3
     25e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__udivmodhi4>
     262:	cb 01       	movw	r24, r22
     264:	60 93 c7 01 	sts	0x01C7, r22
     268:	90 93 c8 01 	sts	0x01C8, r25
		thousand = temp%10 + 48;
     26c:	6a e0       	ldi	r22, 0x0A	; 10
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__udivmodhi4>
     274:	c0 96       	adiw	r24, 0x30	; 48
     276:	90 93 d4 01 	sts	0x01D4, r25
     27a:	80 93 d3 01 	sts	0x01D3, r24
		lcd_wr_char(thousand);
     27e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     282:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     284:	c3 30       	cpi	r28, 0x03	; 3
     286:	d1 05       	cpc	r29, r1
     288:	21 f0       	breq	.+8      	; 0x292 <lcd_print+0x84>
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	11 f0       	breq	.+4      	; 0x292 <lcd_print+0x84>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	16 c0       	rjmp	.+44     	; 0x2be <lcd_print+0xb0>
	{
		temp = value/100;
     292:	c8 01       	movw	r24, r16
     294:	64 e6       	ldi	r22, 0x64	; 100
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__udivmodhi4>
     29c:	cb 01       	movw	r24, r22
     29e:	60 93 c7 01 	sts	0x01C7, r22
     2a2:	90 93 c8 01 	sts	0x01C8, r25
		hundred = temp%10 + 48;
     2a6:	6a e0       	ldi	r22, 0x0A	; 10
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__udivmodhi4>
     2ae:	c0 96       	adiw	r24, 0x30	; 48
     2b0:	90 93 d0 01 	sts	0x01D0, r25
     2b4:	80 93 cf 01 	sts	0x01CF, r24
		lcd_wr_char(hundred);
     2b8:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     2bc:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     2be:	c2 30       	cpi	r28, 0x02	; 2
     2c0:	d1 05       	cpc	r29, r1
     2c2:	21 f0       	breq	.+8      	; 0x2cc <lcd_print+0xbe>
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	11 f0       	breq	.+4      	; 0x2cc <lcd_print+0xbe>
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	16 c0       	rjmp	.+44     	; 0x2f8 <lcd_print+0xea>
	{
		temp = value/10;
     2cc:	c8 01       	movw	r24, r16
     2ce:	6a e0       	ldi	r22, 0x0A	; 10
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__udivmodhi4>
     2d6:	cb 01       	movw	r24, r22
     2d8:	60 93 c7 01 	sts	0x01C7, r22
     2dc:	90 93 c8 01 	sts	0x01C8, r25
		tens = temp%10 + 48;
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__udivmodhi4>
     2e8:	c0 96       	adiw	r24, 0x30	; 48
     2ea:	90 93 cd 01 	sts	0x01CD, r25
     2ee:	80 93 cc 01 	sts	0x01CC, r24
		lcd_wr_char(tens);
     2f2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     2f6:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     2f8:	c1 30       	cpi	r28, 0x01	; 1
     2fa:	d1 05       	cpc	r29, r1
     2fc:	11 f0       	breq	.+4      	; 0x302 <lcd_print+0xf4>
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	61 f4       	brne	.+24     	; 0x31a <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     302:	c8 01       	movw	r24, r16
     304:	6a e0       	ldi	r22, 0x0A	; 10
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__udivmodhi4>
     30c:	c0 96       	adiw	r24, 0x30	; 48
     30e:	90 93 d2 01 	sts	0x01D2, r25
     312:	80 93 d1 01 	sts	0x01D1, r24
		lcd_wr_char(unit);
     316:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
	}
	if(digits>5)
     31a:	26 97       	sbiw	r28, 0x06	; 6
     31c:	1c f0       	brlt	.+6      	; 0x324 <lcd_print+0x116>
	{
		lcd_wr_char('E');
     31e:	85 e4       	ldi	r24, 0x45	; 69
     320:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
	}
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	08 95       	ret

0000032e <lcd_port_config>:
#include <util/delay.h>

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     32e:	84 b3       	in	r24, 0x14	; 20
     330:	87 6f       	ori	r24, 0xF7	; 247
     332:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     334:	85 b3       	in	r24, 0x15	; 21
     336:	80 78       	andi	r24, 0x80	; 128
     338:	85 bb       	out	0x15, r24	; 21
}
     33a:	08 95       	ret

0000033c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;   //set PORTF direction as input
     33c:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00;  //set PORTF pins floating
     33e:	1b ba       	out	0x1b, r1	; 27
}
     340:	08 95       	ret

00000342 <motion_pin_config>:


void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
     342:	87 b3       	in	r24, 0x17	; 23
     344:	8f 60       	ori	r24, 0x0F	; 15
     346:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
     348:	88 b3       	in	r24, 0x18	; 24
     34a:	80 7f       	andi	r24, 0xF0	; 240
     34c:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
     34e:	81 b3       	in	r24, 0x11	; 17
     350:	80 63       	ori	r24, 0x30	; 48
     352:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
     354:	82 b3       	in	r24, 0x12	; 18
     356:	80 63       	ori	r24, 0x30	; 48
     358:	82 bb       	out	0x12, r24	; 18
}
     35a:	08 95       	ret

0000035c <buzzer_pin_config>:

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     35c:	a3 9a       	sbi	0x14, 3	; 20
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     35e:	ab 98       	cbi	0x15, 3	; 21
}
     360:	08 95       	ret

00000362 <port_init>:
#include <util/delay.h>

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     362:	84 b3       	in	r24, 0x14	; 20
     364:	87 6f       	ori	r24, 0xF7	; 247
     366:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     368:	85 b3       	in	r24, 0x15	; 21
     36a:	80 78       	andi	r24, 0x80	; 128
     36c:	85 bb       	out	0x15, r24	; 21
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;   //set PORTF direction as input
     36e:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00;  //set PORTF pins floating
     370:	1b ba       	out	0x1b, r1	; 27
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
}

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     372:	a3 9a       	sbi	0x14, 3	; 20
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     374:	ab 98       	cbi	0x15, 3	; 21
}


void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
     376:	87 b3       	in	r24, 0x17	; 23
     378:	8f 60       	ori	r24, 0x0F	; 15
     37a:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
     37c:	88 b3       	in	r24, 0x18	; 24
     37e:	80 7f       	andi	r24, 0xF0	; 240
     380:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
     382:	81 b3       	in	r24, 0x11	; 17
     384:	80 63       	ori	r24, 0x30	; 48
     386:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
     388:	82 b3       	in	r24, 0x12	; 18
     38a:	80 63       	ori	r24, 0x30	; 48
     38c:	82 bb       	out	0x12, r24	; 18
{
 lcd_port_config();
 adc_pin_config();
 buzzer_pin_config();		
 motion_pin_config();
}
     38e:	08 95       	ret

00000390 <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     390:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //setup
     392:	9f ef       	ldi	r25, 0xFF	; 255
     394:	9d bd       	out	0x2d, r25	; 45
 TCNT1L = 0x01;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	8c bd       	out	0x2c, r24	; 44
 OCR1AH = 0x00;
     39a:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;
     39c:	9a bd       	out	0x2a, r25	; 42
 OCR1BH = 0x00;
     39e:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;
     3a0:	98 bd       	out	0x28, r25	; 40
 ICR1H  = 0x00;
     3a2:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
     3a4:	96 bd       	out	0x26, r25	; 38
 TCCR1A = 0xA1;
     3a6:	81 ea       	ldi	r24, 0xA1	; 161
     3a8:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
     3aa:	8d e0       	ldi	r24, 0x0D	; 13
     3ac:	8e bd       	out	0x2e, r24	; 46
}
     3ae:	08 95       	ret

000003b0 <adc_init>:


//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
     3b0:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     3b2:	80 e2       	ldi	r24, 0x20	; 32
     3b4:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
     3b6:	80 e8       	ldi	r24, 0x80	; 128
     3b8:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     3ba:	86 e8       	ldi	r24, 0x86	; 134
     3bc:	86 b9       	out	0x06, r24	; 6
}
     3be:	08 95       	ret

000003c0 <uart0_init>:
// actual: baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     3c0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     3c2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = 0x86;
     3c4:	86 e8       	ldi	r24, 0x86	; 134
     3c6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
     3c8:	8f e2       	ldi	r24, 0x2F	; 47
     3ca:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     3cc:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98; 
     3ce:	88 e9       	ldi	r24, 0x98	; 152
     3d0:	8a b9       	out	0x0a, r24	; 10
}
     3d2:	08 95       	ret

000003d4 <init_devices>:



void init_devices (void)
{
     3d4:	1f 93       	push	r17
 cli();          //Clears the global interrupts
     3d6:	f8 94       	cli
 port_init();
     3d8:	0e 94 b1 01 	call	0x362	; 0x362 <port_init>
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     3dc:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //setup
     3de:	9f ef       	ldi	r25, 0xFF	; 255
     3e0:	9d bd       	out	0x2d, r25	; 45
 TCNT1L = 0x01;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	8c bd       	out	0x2c, r24	; 44
 OCR1AH = 0x00;
     3e6:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;
     3e8:	9a bd       	out	0x2a, r25	; 42
 OCR1BH = 0x00;
     3ea:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;
     3ec:	98 bd       	out	0x28, r25	; 40
 ICR1H  = 0x00;
     3ee:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
     3f0:	96 bd       	out	0x26, r25	; 38
 TCCR1A = 0xA1;
     3f2:	81 ea       	ldi	r24, 0xA1	; 161
     3f4:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
     3f6:	8d e0       	ldi	r24, 0x0D	; 13
     3f8:	8e bd       	out	0x2e, r24	; 46


//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
     3fa:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     3fc:	80 e2       	ldi	r24, 0x20	; 32
     3fe:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
     400:	80 e8       	ldi	r24, 0x80	; 128
     402:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     404:	16 e8       	ldi	r17, 0x86	; 134
     406:	16 b9       	out	0x06, r17	; 6
 cli();          //Clears the global interrupts
 port_init();
 
 timer1_init();
 adc_init();
 lcd_set_4bit();
     408:	0e 94 49 00 	call	0x92	; 0x92 <lcd_set_4bit>
 lcd_init();
     40c:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_init>
// actual: baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     410:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     412:	1b b8       	out	0x0b, r1	; 11
 UCSRC = 0x86;
     414:	10 bd       	out	0x20, r17	; 32
 UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
     416:	8f e2       	ldi	r24, 0x2F	; 47
     418:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     41a:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98; 
     41c:	88 e9       	ldi	r24, 0x98	; 152
     41e:	8a b9       	out	0x0a, r24	; 10
 timer1_init();
 adc_init();
 lcd_set_4bit();
 lcd_init();
 uart0_init();
 sei();          //Enables the global interrupts
     420:	78 94       	sei
}
     422:	1f 91       	pop	r17
     424:	08 95       	ret

00000426 <ADC_Conversion>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     426:	87 70       	andi	r24, 0x07	; 7
     428:	80 62       	ori	r24, 0x20	; 32
     42a:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     42c:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     42e:	34 9b       	sbis	0x06, 4	; 6
     430:	fe cf       	rjmp	.-4      	; 0x42e <ADC_Conversion+0x8>
 a=ADCH;
     432:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     434:	34 9a       	sbi	0x06, 4	; 6
 return a;
}
     436:	08 95       	ret

00000438 <print_sensor>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     438:	47 70       	andi	r20, 0x07	; 7
     43a:	40 62       	ori	r20, 0x20	; 32
     43c:	47 b9       	out	0x07, r20	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     43e:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     440:	34 9b       	sbis	0x06, 4	; 6
     442:	fe cf       	rjmp	.-4      	; 0x440 <print_sensor+0x8>
 a=ADCH;
     444:	45 b1       	in	r20, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     446:	34 9a       	sbi	0x06, 4	; 6

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
 ADC_Value = ADC_Conversion(channel);
     448:	40 93 c9 01 	sts	0x01C9, r20
 lcd_print(row, coloumn, ADC_Value, 3);
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	23 e0       	ldi	r18, 0x03	; 3
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_print>
}
     456:	08 95       	ret

00000458 <init_sensor_values>:
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 return a;
}

void init_sensor_values(void)
{
     458:	6f 92       	push	r6
     45a:	7f 92       	push	r7
     45c:	8f 92       	push	r8
     45e:	9f 92       	push	r9
     460:	af 92       	push	r10
     462:	bf 92       	push	r11
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     470:	83 e2       	ldi	r24, 0x23	; 35
     472:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     474:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     476:	34 9b       	sbis	0x06, 4	; 6
     478:	fe cf       	rjmp	.-4      	; 0x476 <__stack+0x17>
 a=ADCH;
     47a:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     47c:	34 9a       	sbi	0x06, 4	; 6
 return a;
}

void init_sensor_values(void)
{
	lline = ADC_Conversion(3);	//Getting data of Left WL Sensor
     47e:	80 93 b0 01 	sts	0x01B0, r24
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     482:	84 e2       	ldi	r24, 0x24	; 36
     484:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     486:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     488:	34 9b       	sbis	0x06, 4	; 6
     48a:	fe cf       	rjmp	.-4      	; 0x488 <__stack+0x29>
 a=ADCH;
     48c:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     48e:	34 9a       	sbi	0x06, 4	; 6
}

void init_sensor_values(void)
{
	lline = ADC_Conversion(3);	//Getting data of Left WL Sensor
	cline = ADC_Conversion(4);	//Getting data of Center WL Sensor
     490:	80 93 b1 01 	sts	0x01B1, r24
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     494:	85 e2       	ldi	r24, 0x25	; 37
     496:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     498:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     49a:	34 9b       	sbis	0x06, 4	; 6
     49c:	fe cf       	rjmp	.-4      	; 0x49a <__stack+0x3b>
 a=ADCH;
     49e:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     4a0:	34 9a       	sbi	0x06, 4	; 6

void init_sensor_values(void)
{
	lline = ADC_Conversion(3);	//Getting data of Left WL Sensor
	cline = ADC_Conversion(4);	//Getting data of Center WL Sensor
	rline = ADC_Conversion(5);	//Getting data of Right WL Sensor
     4a2:	80 93 b2 01 	sts	0x01B2, r24
	print_sensor(2,1,3);		//Prints value of White Line Sensor Left
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	43 e0       	ldi	r20, 0x03	; 3
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	0e 94 1c 02 	call	0x438	; 0x438 <print_sensor>
	print_sensor(2,5,4);		//Prints value of White Line Sensor Center
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	65 e0       	ldi	r22, 0x05	; 5
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	44 e0       	ldi	r20, 0x04	; 4
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	0e 94 1c 02 	call	0x438	; 0x438 <print_sensor>
	print_sensor(2,9,5);		//Prints Value of White Line Sensor Right
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	69 e0       	ldi	r22, 0x09	; 9
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	45 e0       	ldi	r20, 0x05	; 5
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	0e 94 1c 02 	call	0x438	; 0x438 <print_sensor>
	if(lline < thresh )
     4d6:	20 91 a4 00 	lds	r18, 0x00A4
     4da:	30 91 a5 00 	lds	r19, 0x00A5
     4de:	80 91 b0 01 	lds	r24, 0x01B0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	82 17       	cp	r24, r18
     4e6:	93 07       	cpc	r25, r19
     4e8:	e4 f4       	brge	.+56     	; 0x522 <__stack+0xc3>
	{
		if(cline < thresh) prop =max/2; // white white black
     4ea:	80 91 b1 01 	lds	r24, 0x01B1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	82 17       	cp	r24, r18
     4f2:	93 07       	cpc	r25, r19
     4f4:	3c f4       	brge	.+14     	; 0x504 <__stack+0xa5>
     4f6:	80 91 a2 00 	lds	r24, 0x00A2
     4fa:	90 91 a3 00 	lds	r25, 0x00A3
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	0c c0       	rjmp	.+24     	; 0x51c <__stack+0xbd>
		else if(rline>thresh) prop=max/4; //white black black 
     504:	80 91 b2 01 	lds	r24, 0x01B2
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	28 17       	cp	r18, r24
     50c:	39 07       	cpc	r19, r25
     50e:	4c f5       	brge	.+82     	; 0x562 <__stack+0x103>
     510:	80 91 a2 00 	lds	r24, 0x00A2
     514:	90 91 a3 00 	lds	r25, 0x00A3
     518:	64 e0       	ldi	r22, 0x04	; 4
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	0e 94 ef 0b 	call	0x17de	; 0x17de <__divmodhi4>
     520:	1c c0       	rjmp	.+56     	; 0x55a <__stack+0xfb>
	}
	else if(rline < thresh)
     522:	80 91 b2 01 	lds	r24, 0x01B2
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	82 17       	cp	r24, r18
     52a:	93 07       	cpc	r25, r19
     52c:	d4 f4       	brge	.+52     	; 0x562 <__stack+0x103>
	{
		if(lline<thresh) prop=0;  // white black white
		else if(cline<thresh) prop=-max/2; // black white white
     52e:	80 91 b1 01 	lds	r24, 0x01B1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	40 91 a2 00 	lds	r20, 0x00A2
     538:	50 91 a3 00 	lds	r21, 0x00A3
     53c:	82 17       	cp	r24, r18
     53e:	93 07       	cpc	r25, r19
     540:	24 f4       	brge	.+8      	; 0x54a <__stack+0xeb>
     542:	ca 01       	movw	r24, r20
     544:	62 e0       	ldi	r22, 0x02	; 2
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	03 c0       	rjmp	.+6      	; 0x550 <__stack+0xf1>
		else prop=-max/4; // black black white
     54a:	ca 01       	movw	r24, r20
     54c:	64 e0       	ldi	r22, 0x04	; 4
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	0e 94 ef 0b 	call	0x17de	; 0x17de <__divmodhi4>
     554:	70 95       	com	r23
     556:	61 95       	neg	r22
     558:	7f 4f       	sbci	r23, 0xFF	; 255
     55a:	70 93 b9 01 	sts	0x01B9, r23
     55e:	60 93 b8 01 	sts	0x01B8, r22
	}
	der = prop-last_prop; //derivative
     562:	60 91 b8 01 	lds	r22, 0x01B8
     566:	70 91 b9 01 	lds	r23, 0x01B9
     56a:	20 91 be 01 	lds	r18, 0x01BE
     56e:	30 91 bf 01 	lds	r19, 0x01BF
     572:	5b 01       	movw	r10, r22
     574:	a2 1a       	sub	r10, r18
     576:	b3 0a       	sbc	r11, r19
     578:	b0 92 bb 01 	sts	0x01BB, r11
     57c:	a0 92 ba 01 	sts	0x01BA, r10
	integral += prop; // integral
     580:	e0 90 bc 01 	lds	r14, 0x01BC
     584:	f0 90 bd 01 	lds	r15, 0x01BD
     588:	e6 0e       	add	r14, r22
     58a:	f7 1e       	adc	r15, r23
     58c:	f0 92 bd 01 	sts	0x01BD, r15
     590:	e0 92 bc 01 	sts	0x01BC, r14
	last_prop = prop; 
     594:	70 93 bf 01 	sts	0x01BF, r23
     598:	60 93 be 01 	sts	0x01BE, r22
	pow_diff = kp*prop + ki*integral + kd*der;
     59c:	88 27       	eor	r24, r24
     59e:	77 fd       	sbrc	r23, 7
     5a0:	80 95       	com	r24
     5a2:	98 2f       	mov	r25, r24
     5a4:	0e 94 8d 09 	call	0x131a	; 0x131a <__floatsisf>
     5a8:	20 91 9a 00 	lds	r18, 0x009A
     5ac:	30 91 9b 00 	lds	r19, 0x009B
     5b0:	40 91 9c 00 	lds	r20, 0x009C
     5b4:	50 91 9d 00 	lds	r21, 0x009D
     5b8:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3>
     5bc:	3b 01       	movw	r6, r22
     5be:	4c 01       	movw	r8, r24
     5c0:	00 27       	eor	r16, r16
     5c2:	f7 fc       	sbrc	r15, 7
     5c4:	00 95       	com	r16
     5c6:	10 2f       	mov	r17, r16
     5c8:	c8 01       	movw	r24, r16
     5ca:	b7 01       	movw	r22, r14
     5cc:	0e 94 8d 09 	call	0x131a	; 0x131a <__floatsisf>
     5d0:	20 91 b4 01 	lds	r18, 0x01B4
     5d4:	30 91 b5 01 	lds	r19, 0x01B5
     5d8:	40 91 b6 01 	lds	r20, 0x01B6
     5dc:	50 91 b7 01 	lds	r21, 0x01B7
     5e0:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3>
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	c4 01       	movw	r24, r8
     5ea:	b3 01       	movw	r22, r6
     5ec:	0e 94 66 08 	call	0x10cc	; 0x10cc <__addsf3>
     5f0:	7b 01       	movw	r14, r22
     5f2:	8c 01       	movw	r16, r24
     5f4:	cc 24       	eor	r12, r12
     5f6:	b7 fc       	sbrc	r11, 7
     5f8:	c0 94       	com	r12
     5fa:	dc 2c       	mov	r13, r12
     5fc:	c6 01       	movw	r24, r12
     5fe:	b5 01       	movw	r22, r10
     600:	0e 94 8d 09 	call	0x131a	; 0x131a <__floatsisf>
     604:	20 91 9e 00 	lds	r18, 0x009E
     608:	30 91 9f 00 	lds	r19, 0x009F
     60c:	40 91 a0 00 	lds	r20, 0x00A0
     610:	50 91 a1 00 	lds	r21, 0x00A1
     614:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3>
     618:	9b 01       	movw	r18, r22
     61a:	ac 01       	movw	r20, r24
     61c:	c8 01       	movw	r24, r16
     61e:	b7 01       	movw	r22, r14
     620:	0e 94 66 08 	call	0x10cc	; 0x10cc <__addsf3>
     624:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixsfsi>
     628:	70 93 d6 01 	sts	0x01D6, r23
     62c:	60 93 d5 01 	sts	0x01D5, r22
	if(pow_diff > max) pow_diff = max;
     630:	80 91 a2 00 	lds	r24, 0x00A2
     634:	90 91 a3 00 	lds	r25, 0x00A3
     638:	86 17       	cp	r24, r22
     63a:	97 07       	cpc	r25, r23
     63c:	24 f4       	brge	.+8      	; 0x646 <__stack+0x1e7>
     63e:	90 93 d6 01 	sts	0x01D6, r25
     642:	80 93 d5 01 	sts	0x01D5, r24
	if(pow_diff < -max) pow_diff = -max;
     646:	22 27       	eor	r18, r18
     648:	33 27       	eor	r19, r19
     64a:	28 1b       	sub	r18, r24
     64c:	39 0b       	sbc	r19, r25
     64e:	80 91 d5 01 	lds	r24, 0x01D5
     652:	90 91 d6 01 	lds	r25, 0x01D6
     656:	82 17       	cp	r24, r18
     658:	93 07       	cpc	r25, r19
     65a:	24 f4       	brge	.+8      	; 0x664 <__stack+0x205>
     65c:	30 93 d6 01 	sts	0x01D6, r19
     660:	20 93 d5 01 	sts	0x01D5, r18
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
     664:	81 e2       	ldi	r24, 0x21	; 33
     666:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     668:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     66a:	34 9b       	sbis	0x06, 4	; 6
     66c:	fe cf       	rjmp	.-4      	; 0x66a <__stack+0x20b>
 a=ADCH;
     66e:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     670:	34 9a       	sbi	0x06, 4	; 6
	last_prop = prop; 
	pow_diff = kp*prop + ki*integral + kd*der;
	if(pow_diff > max) pow_diff = max;
	if(pow_diff < -max) pow_diff = -max;
	
	fir = ADC_Conversion(1); // front IR
     672:	80 93 b3 01 	sts	0x01B3, r24
}
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	bf 90       	pop	r11
     684:	af 90       	pop	r10
     686:	9f 90       	pop	r9
     688:	8f 90       	pop	r8
     68a:	7f 90       	pop	r7
     68c:	6f 90       	pop	r6
     68e:	08 95       	ret

00000690 <checkobstacle>:
	take_turn(2);
}

int checkobstacle() //returns 0 if there is an obstacle
{
	init_sensor_values();
     690:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
	if(fir<0x28)
     694:	80 91 b3 01 	lds	r24, 0x01B3
     698:	88 32       	cpi	r24, 0x28	; 40
     69a:	18 f0       	brcs	.+6      	; 0x6a2 <checkobstacle+0x12>
     69c:	21 e0       	ldi	r18, 0x01	; 1
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <checkobstacle+0x34>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6a2:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6a4:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     6a6:	88 bb       	out	0x18, r24	; 24
	{
		
		stop();
		lcd_cursor(1,1);		
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
		lcd_string("Obstacle");		
     6b0:	80 e6       	ldi	r24, 0x60	; 96
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
     6b8:	88 ea       	ldi	r24, 0xA8	; 168
     6ba:	91 e6       	ldi	r25, 0x61	; 97
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <checkobstacle+0x2c>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(100);		
		return  0;
	}	
	return 1;
}
     6c4:	c9 01       	movw	r24, r18
     6c6:	08 95       	ret

000006c8 <buzzer_on>:
#include <util/delay.h>

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     6c8:	83 b3       	in	r24, 0x13	; 19
 port_restore = port_restore | 0x08;
     6ca:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     6cc:	85 bb       	out	0x15, r24	; 21
}
     6ce:	08 95       	ret

000006d0 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     6d0:	83 b3       	in	r24, 0x13	; 19
 port_restore = port_restore & 0xF7;
     6d2:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     6d4:	85 bb       	out	0x15, r24	; 21
}
     6d6:	08 95       	ret

000006d8 <motion>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6d8:	98 b3       	in	r25, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6da:	90 7f       	andi	r25, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     6dc:	8f 70       	andi	r24, 0x0F	; 15
     6de:	89 2b       	or	r24, r25
 PORTB = PortBRestore; 			// setting the command to the port
     6e0:	88 bb       	out	0x18, r24	; 24
}
     6e2:	08 95       	ret

000006e4 <forward>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6e4:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6e6:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     6e8:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
     6ea:	88 bb       	out	0x18, r24	; 24
}

void forward (void) //both wheels forward
{
  motion(0x06);
}
     6ec:	08 95       	ret

000006ee <stop>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6ee:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6f0:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     6f2:	88 bb       	out	0x18, r24	; 24
}

void stop (void) //hard stop
{
  motion(0x00);
}
     6f4:	08 95       	ret

000006f6 <backward>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6f6:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6f8:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     6fa:	89 60       	ori	r24, 0x09	; 9
 PORTB = PortBRestore; 			// setting the command to the port
     6fc:	88 bb       	out	0x18, r24	; 24
}

void backward (void)        //both wheels backward
{
  motion(0x09);
}
     6fe:	08 95       	ret

00000700 <left>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     700:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     702:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     704:	85 60       	ori	r24, 0x05	; 5
 PORTB = PortBRestore; 			// setting the command to the port
     706:	88 bb       	out	0x18, r24	; 24
}

void left (void)            //Left wheel backward, Right wheel forward
{
  motion(0x05);
}
     708:	08 95       	ret

0000070a <right>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     70a:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     70c:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     70e:	8a 60       	ori	r24, 0x0A	; 10
 PORTB = PortBRestore; 			// setting the command to the port
     710:	88 bb       	out	0x18, r24	; 24
}

void right (void)           //Left wheel forward, Right wheel backward
{   
  motion(0x0a);
}
     712:	08 95       	ret

00000714 <soft_right>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     714:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     716:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     718:	82 60       	ori	r24, 0x02	; 2
 PORTB = PortBRestore; 			// setting the command to the port
     71a:	88 bb       	out	0x18, r24	; 24
}

void soft_right(void)
{
	motion(0x02);
}
     71c:	08 95       	ret

0000071e <soft_left>:
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     71e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     720:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     722:	84 60       	ori	r24, 0x04	; 4
 PORTB = PortBRestore; 			// setting the command to the port
     724:	88 bb       	out	0x18, r24	; 24
}

void soft_left(void)
{
	motion(0x04);
}
     726:	08 95       	ret

00000728 <velocity>:
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     728:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor; 
     72a:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
     72c:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     72e:	68 bd       	out	0x28, r22	; 40
}
     730:	08 95       	ret

00000732 <follow>:
	}
	return 0;
}

void follow()
{
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
	lcd_cursor(1,1);		
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
	lcd_string("Go Straight");
     742:	89 e6       	ldi	r24, 0x69	; 105
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
	init_sensor_values();
     74a:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     74e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     750:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     752:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
     754:	88 bb       	out	0x18, r24	; 24
	forward();
	//if(pow_diff < 0) velocity(max+pow_diff, max);
	//else velocity(max, max-pow_diff);
	int left = leftspeed;
     756:	00 91 94 00 	lds	r16, 0x0094
     75a:	10 91 95 00 	lds	r17, 0x0095
	int right = rightspeed-delta;
     75e:	c0 91 96 00 	lds	r28, 0x0096
     762:	d0 91 97 00 	lds	r29, 0x0097
     766:	80 91 98 00 	lds	r24, 0x0098
     76a:	90 91 99 00 	lds	r25, 0x0099
     76e:	c8 1b       	sub	r28, r24
     770:	d9 0b       	sbc	r29, r25
	if(cline>thresh)
     772:	20 91 a4 00 	lds	r18, 0x00A4
     776:	30 91 a5 00 	lds	r19, 0x00A5
     77a:	80 91 b1 01 	lds	r24, 0x01B1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	40 91 b0 01 	lds	r20, 0x01B0
     784:	28 17       	cp	r18, r24
     786:	39 07       	cpc	r19, r25
     788:	6c f5       	brge	.+90     	; 0x7e4 <follow+0xb2>
	{
		if(lline>thresh) left = left*0.7;
     78a:	84 2f       	mov	r24, r20
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	28 17       	cp	r18, r24
     790:	39 07       	cpc	r19, r25
     792:	8c f4       	brge	.+34     	; 0x7b6 <follow+0x84>
     794:	b8 01       	movw	r22, r16
     796:	88 27       	eor	r24, r24
     798:	77 fd       	sbrc	r23, 7
     79a:	80 95       	com	r24
     79c:	98 2f       	mov	r25, r24
     79e:	0e 94 8d 09 	call	0x131a	; 0x131a <__floatsisf>
     7a2:	23 e3       	ldi	r18, 0x33	; 51
     7a4:	33 e3       	ldi	r19, 0x33	; 51
     7a6:	43 e3       	ldi	r20, 0x33	; 51
     7a8:	5f e3       	ldi	r21, 0x3F	; 63
     7aa:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3>
     7ae:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixsfsi>
     7b2:	8b 01       	movw	r16, r22
     7b4:	2f c0       	rjmp	.+94     	; 0x814 <follow+0xe2>
		else if(rline>thresh) right = right*0.7;
     7b6:	80 91 b2 01 	lds	r24, 0x01B2
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	28 17       	cp	r18, r24
     7be:	39 07       	cpc	r19, r25
     7c0:	4c f5       	brge	.+82     	; 0x814 <follow+0xe2>
     7c2:	be 01       	movw	r22, r28
     7c4:	88 27       	eor	r24, r24
     7c6:	77 fd       	sbrc	r23, 7
     7c8:	80 95       	com	r24
     7ca:	98 2f       	mov	r25, r24
     7cc:	0e 94 8d 09 	call	0x131a	; 0x131a <__floatsisf>
     7d0:	23 e3       	ldi	r18, 0x33	; 51
     7d2:	33 e3       	ldi	r19, 0x33	; 51
     7d4:	43 e3       	ldi	r20, 0x33	; 51
     7d6:	5f e3       	ldi	r21, 0x3F	; 63
     7d8:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3>
     7dc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixsfsi>
     7e0:	eb 01       	movw	r28, r22
     7e2:	18 c0       	rjmp	.+48     	; 0x814 <follow+0xe2>
	}
	else
	{
		if(lline>thresh) left = left/2;
     7e4:	84 2f       	mov	r24, r20
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	28 17       	cp	r18, r24
     7ea:	39 07       	cpc	r19, r25
     7ec:	3c f4       	brge	.+14     	; 0x7fc <follow+0xca>
     7ee:	c8 01       	movw	r24, r16
     7f0:	62 e0       	ldi	r22, 0x02	; 2
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	0e 94 ef 0b 	call	0x17de	; 0x17de <__divmodhi4>
     7f8:	8b 01       	movw	r16, r22
     7fa:	0c c0       	rjmp	.+24     	; 0x814 <follow+0xe2>
		else if(rline>thresh) right = right/2;
     7fc:	80 91 b2 01 	lds	r24, 0x01B2
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	28 17       	cp	r18, r24
     804:	39 07       	cpc	r19, r25
     806:	34 f4       	brge	.+12     	; 0x814 <follow+0xe2>
     808:	ce 01       	movw	r24, r28
     80a:	62 e0       	ldi	r22, 0x02	; 2
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	0e 94 ef 0b 	call	0x17de	; 0x17de <__divmodhi4>
     812:	eb 01       	movw	r28, r22
	}
	velocity(left,right);
     814:	c8 01       	movw	r24, r16
     816:	be 01       	movw	r22, r28
     818:	0e 94 94 03 	call	0x728	; 0x728 <velocity>
	
	if((cline<thresh) && (lline<thresh) && (rline<thresh) ) 
     81c:	20 91 a4 00 	lds	r18, 0x00A4
     820:	30 91 a5 00 	lds	r19, 0x00A5
     824:	80 91 b1 01 	lds	r24, 0x01B1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	82 17       	cp	r24, r18
     82c:	93 07       	cpc	r25, r19
     82e:	dc f4       	brge	.+54     	; 0x866 <follow+0x134>
     830:	80 91 b0 01 	lds	r24, 0x01B0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	82 17       	cp	r24, r18
     838:	93 07       	cpc	r25, r19
     83a:	ac f4       	brge	.+42     	; 0x866 <follow+0x134>
     83c:	80 91 b2 01 	lds	r24, 0x01B2
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	82 17       	cp	r24, r18
     844:	93 07       	cpc	r25, r19
     846:	7c f4       	brge	.+30     	; 0x866 <follow+0x134>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     848:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     84a:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     84c:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
     84e:	88 bb       	out	0x18, r24	; 24
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     850:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     852:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     854:	88 bb       	out	0x18, r24	; 24
	{
		forward();
		stop();
		lcd_cursor(1,1);		
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
		lcd_string("Stop");
     85e:	85 e7       	ldi	r24, 0x75	; 117
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
		
	}
	
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	08 95       	ret

00000870 <checkintersection>:



int checkintersection() 	//returns 1 if there is an intersection
{
	init_sensor_values();
     870:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
	if( cline>thresh && lline>thresh && rline >thresh ) //all on black
     874:	20 91 a4 00 	lds	r18, 0x00A4
     878:	30 91 a5 00 	lds	r19, 0x00A5
     87c:	80 91 b1 01 	lds	r24, 0x01B1
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	28 17       	cp	r18, r24
     884:	39 07       	cpc	r19, r25
     886:	0c f0       	brlt	.+2      	; 0x88a <checkintersection+0x1a>
     888:	41 c0       	rjmp	.+130    	; 0x90c <checkintersection+0x9c>
     88a:	80 91 b0 01 	lds	r24, 0x01B0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	28 17       	cp	r18, r24
     892:	39 07       	cpc	r19, r25
     894:	0c f0       	brlt	.+2      	; 0x898 <checkintersection+0x28>
     896:	3a c0       	rjmp	.+116    	; 0x90c <checkintersection+0x9c>
     898:	80 91 b2 01 	lds	r24, 0x01B2
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	28 17       	cp	r18, r24
     8a0:	39 07       	cpc	r19, r25
     8a2:	a4 f5       	brge	.+104    	; 0x90c <checkintersection+0x9c>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     8a4:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     8a6:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     8a8:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
     8aa:	88 bb       	out	0x18, r24	; 24
	{
		
		forward();
		velocity(leftspeed,(rightspeed-delta));
     8ac:	60 91 96 00 	lds	r22, 0x0096
     8b0:	70 91 97 00 	lds	r23, 0x0097
     8b4:	80 91 98 00 	lds	r24, 0x0098
     8b8:	90 91 99 00 	lds	r25, 0x0099
     8bc:	68 1b       	sub	r22, r24
     8be:	79 0b       	sbc	r23, r25
     8c0:	80 91 94 00 	lds	r24, 0x0094
     8c4:	90 91 95 00 	lds	r25, 0x0095
     8c8:	0e 94 94 03 	call	0x728	; 0x728 <velocity>
     8cc:	8c e0       	ldi	r24, 0x0C	; 12
     8ce:	9b e7       	ldi	r25, 0x7B	; 123
     8d0:	29 e1       	ldi	r18, 0x19	; 25
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	f9 01       	movw	r30, r18
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <checkintersection+0x66>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8dc:	d9 f7       	brne	.-10     	; 0x8d4 <checkintersection+0x64>
		_delay_ms(3150);
		lcd_cursor(1,1);		
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
		lcd_string("Intersection");
     8e6:	8a e7       	ldi	r24, 0x7A	; 122
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     8ee:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     8f0:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     8f2:	88 bb       	out	0x18, r24	; 24
     8f4:	80 e3       	ldi	r24, 0x30	; 48
     8f6:	95 e7       	ldi	r25, 0x75	; 117
     8f8:	29 e1       	ldi	r18, 0x19	; 25
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	f9 01       	movw	r30, r18
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <checkintersection+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     902:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     904:	d9 f7       	brne	.-10     	; 0x8fc <checkintersection+0x8c>
     906:	21 e0       	ldi	r18, 0x01	; 1
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	02 c0       	rjmp	.+4      	; 0x910 <checkintersection+0xa0>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
		stop();
		_delay_ms(3000);
		return 1;
	}
	return 0;
}
     910:	c9 01       	movw	r24, r18
     912:	08 95       	ret

00000914 <take_turn>:
 lcd_print(row, coloumn, ADC_Value, 3);
}


void take_turn(int d)
{
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     91e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     920:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     922:	89 60       	ori	r24, 0x09	; 9
 PORTB = PortBRestore; 			// setting the command to the port
     924:	88 bb       	out	0x18, r24	; 24
	int left1;
	int right1;
	int flag=0;
	backward();
	
	if(d==1)
     926:	c1 30       	cpi	r28, 0x01	; 1
     928:	d1 05       	cpc	r29, r1
     92a:	31 f5       	brne	.+76     	; 0x978 <take_turn+0x64>
	{
		velocity(leftspeed*1.2,(rightspeed-delta));
     92c:	60 91 94 00 	lds	r22, 0x0094
     930:	70 91 95 00 	lds	r23, 0x0095
     934:	88 27       	eor	r24, r24
     936:	77 fd       	sbrc	r23, 7
     938:	80 95       	com	r24
     93a:	98 2f       	mov	r25, r24
     93c:	0e 94 8d 09 	call	0x131a	; 0x131a <__floatsisf>
     940:	2a e9       	ldi	r18, 0x9A	; 154
     942:	39 e9       	ldi	r19, 0x99	; 153
     944:	49 e9       	ldi	r20, 0x99	; 153
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3>
     94c:	40 91 96 00 	lds	r20, 0x0096
     950:	50 91 97 00 	lds	r21, 0x0097
     954:	20 91 98 00 	lds	r18, 0x0098
     958:	30 91 99 00 	lds	r19, 0x0099
     95c:	42 1b       	sub	r20, r18
     95e:	53 0b       	sbc	r21, r19
     960:	0e 94 94 03 	call	0x728	; 0x728 <velocity>
     964:	80 e6       	ldi	r24, 0x60	; 96
     966:	9a ee       	ldi	r25, 0xEA	; 234
     968:	29 e1       	ldi	r18, 0x19	; 25
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	f9 01       	movw	r30, r18
     96e:	31 97       	sbiw	r30, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <take_turn+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     972:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     974:	d9 f7       	brne	.-10     	; 0x96c <take_turn+0x58>
     976:	1a c0       	rjmp	.+52     	; 0x9ac <take_turn+0x98>
		_delay_ms(6000);
	}
	else if(d==2) 
     978:	c2 30       	cpi	r28, 0x02	; 2
     97a:	d1 05       	cpc	r29, r1
     97c:	b9 f4       	brne	.+46     	; 0x9ac <take_turn+0x98>
	{
		velocity(0,(rightspeed-delta));
     97e:	60 91 96 00 	lds	r22, 0x0096
     982:	70 91 97 00 	lds	r23, 0x0097
     986:	80 91 98 00 	lds	r24, 0x0098
     98a:	90 91 99 00 	lds	r25, 0x0099
     98e:	68 1b       	sub	r22, r24
     990:	79 0b       	sbc	r23, r25
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 94 03 	call	0x728	; 0x728 <velocity>
     99a:	80 e6       	ldi	r24, 0x60	; 96
     99c:	9a ee       	ldi	r25, 0xEA	; 234
     99e:	29 e1       	ldi	r18, 0x19	; 25
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	f9 01       	movw	r30, r18
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <take_turn+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9aa:	d9 f7       	brne	.-10     	; 0x9a2 <take_turn+0x8e>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     9ac:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     9ae:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     9b0:	88 bb       	out	0x18, r24	; 24
     9b2:	80 e1       	ldi	r24, 0x10	; 16
     9b4:	97 e2       	ldi	r25, 0x27	; 39
     9b6:	29 e1       	ldi	r18, 0x19	; 25
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	f9 01       	movw	r30, r18
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	f1 f7       	brne	.-4      	; 0x9bc <take_turn+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c2:	d9 f7       	brne	.-10     	; 0x9ba <take_turn+0xa6>
		_delay_ms(6000);
	}
	
	stop();
	_delay_ms(1000);
	if(d==1) soft_left();
     9c4:	c1 30       	cpi	r28, 0x01	; 1
     9c6:	d1 05       	cpc	r29, r1
     9c8:	21 f4       	brne	.+8      	; 0x9d2 <take_turn+0xbe>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     9ca:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     9cc:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     9ce:	84 60       	ori	r24, 0x04	; 4
     9d0:	05 c0       	rjmp	.+10     	; 0x9dc <take_turn+0xc8>
	else if(d==2) soft_right();
     9d2:	22 97       	sbiw	r28, 0x02	; 2
     9d4:	21 f4       	brne	.+8      	; 0x9de <take_turn+0xca>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     9d6:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     9d8:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     9da:	82 60       	ori	r24, 0x02	; 2
 PORTB = PortBRestore; 			// setting the command to the port
     9dc:	88 bb       	out	0x18, r24	; 24
	while(1)
	{
		init_sensor_values();
     9de:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
		int left1 = leftspeed;
     9e2:	00 91 94 00 	lds	r16, 0x0094
     9e6:	10 91 95 00 	lds	r17, 0x0095
		int right1 = rightspeed-delta;
     9ea:	c0 91 96 00 	lds	r28, 0x0096
     9ee:	d0 91 97 00 	lds	r29, 0x0097
     9f2:	80 91 98 00 	lds	r24, 0x0098
     9f6:	90 91 99 00 	lds	r25, 0x0099
     9fa:	c8 1b       	sub	r28, r24
     9fc:	d9 0b       	sbc	r29, r25
		if(cline>thresh)
     9fe:	20 91 a4 00 	lds	r18, 0x00A4
     a02:	30 91 a5 00 	lds	r19, 0x00A5
     a06:	80 91 b1 01 	lds	r24, 0x01B1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	40 91 b0 01 	lds	r20, 0x01B0
     a10:	28 17       	cp	r18, r24
     a12:	39 07       	cpc	r19, r25
     a14:	6c f5       	brge	.+90     	; 0xa70 <take_turn+0x15c>
		{
			if(lline>thresh) left1 = left1*0.7;
     a16:	84 2f       	mov	r24, r20
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	28 17       	cp	r18, r24
     a1c:	39 07       	cpc	r19, r25
     a1e:	8c f4       	brge	.+34     	; 0xa42 <take_turn+0x12e>
     a20:	b8 01       	movw	r22, r16
     a22:	88 27       	eor	r24, r24
     a24:	77 fd       	sbrc	r23, 7
     a26:	80 95       	com	r24
     a28:	98 2f       	mov	r25, r24
     a2a:	0e 94 8d 09 	call	0x131a	; 0x131a <__floatsisf>
     a2e:	23 e3       	ldi	r18, 0x33	; 51
     a30:	33 e3       	ldi	r19, 0x33	; 51
     a32:	43 e3       	ldi	r20, 0x33	; 51
     a34:	5f e3       	ldi	r21, 0x3F	; 63
     a36:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3>
     a3a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixsfsi>
     a3e:	8b 01       	movw	r16, r22
     a40:	2f c0       	rjmp	.+94     	; 0xaa0 <take_turn+0x18c>
			else if(rline>thresh) right1 = right1*0.7;
     a42:	80 91 b2 01 	lds	r24, 0x01B2
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	28 17       	cp	r18, r24
     a4a:	39 07       	cpc	r19, r25
     a4c:	4c f5       	brge	.+82     	; 0xaa0 <take_turn+0x18c>
     a4e:	be 01       	movw	r22, r28
     a50:	88 27       	eor	r24, r24
     a52:	77 fd       	sbrc	r23, 7
     a54:	80 95       	com	r24
     a56:	98 2f       	mov	r25, r24
     a58:	0e 94 8d 09 	call	0x131a	; 0x131a <__floatsisf>
     a5c:	23 e3       	ldi	r18, 0x33	; 51
     a5e:	33 e3       	ldi	r19, 0x33	; 51
     a60:	43 e3       	ldi	r20, 0x33	; 51
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3>
     a68:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixsfsi>
     a6c:	eb 01       	movw	r28, r22
     a6e:	18 c0       	rjmp	.+48     	; 0xaa0 <take_turn+0x18c>
		}
		else
		{
			if(lline>thresh) left1 = left1/2;
     a70:	84 2f       	mov	r24, r20
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	28 17       	cp	r18, r24
     a76:	39 07       	cpc	r19, r25
     a78:	3c f4       	brge	.+14     	; 0xa88 <take_turn+0x174>
     a7a:	c8 01       	movw	r24, r16
     a7c:	62 e0       	ldi	r22, 0x02	; 2
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	0e 94 ef 0b 	call	0x17de	; 0x17de <__divmodhi4>
     a84:	8b 01       	movw	r16, r22
     a86:	0c c0       	rjmp	.+24     	; 0xaa0 <take_turn+0x18c>
			else if(rline>thresh) right1 = right1/2;
     a88:	80 91 b2 01 	lds	r24, 0x01B2
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	28 17       	cp	r18, r24
     a90:	39 07       	cpc	r19, r25
     a92:	34 f4       	brge	.+12     	; 0xaa0 <take_turn+0x18c>
     a94:	ce 01       	movw	r24, r28
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	0e 94 ef 0b 	call	0x17de	; 0x17de <__divmodhi4>
     a9e:	eb 01       	movw	r28, r22
		}
		velocity(left1,right1);
     aa0:	c8 01       	movw	r24, r16
     aa2:	be 01       	movw	r22, r28
     aa4:	0e 94 94 03 	call	0x728	; 0x728 <velocity>
		if(lline<thresh && cline>thresh && rline<thresh) break;
     aa8:	20 91 a4 00 	lds	r18, 0x00A4
     aac:	30 91 a5 00 	lds	r19, 0x00A5
     ab0:	80 91 b0 01 	lds	r24, 0x01B0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	82 17       	cp	r24, r18
     ab8:	93 07       	cpc	r25, r19
     aba:	0c f0       	brlt	.+2      	; 0xabe <take_turn+0x1aa>
     abc:	90 cf       	rjmp	.-224    	; 0x9de <take_turn+0xca>
     abe:	80 91 b1 01 	lds	r24, 0x01B1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	28 17       	cp	r18, r24
     ac6:	39 07       	cpc	r19, r25
     ac8:	0c f0       	brlt	.+2      	; 0xacc <take_turn+0x1b8>
     aca:	89 cf       	rjmp	.-238    	; 0x9de <take_turn+0xca>
     acc:	80 91 b2 01 	lds	r24, 0x01B2
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	82 17       	cp	r24, r18
     ad4:	93 07       	cpc	r25, r19
     ad6:	0c f0       	brlt	.+2      	; 0xada <take_turn+0x1c6>
     ad8:	82 cf       	rjmp	.-252    	; 0x9de <take_turn+0xca>
			_delay_ms(40);
			break;
		}
	}
	*/
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	08 95       	ret

00000ae4 <turn_right>:
	lcd_string("Left");
	take_turn(1);
}
void turn_right()
{
	lcd_cursor(1,1);		
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
	lcd_string("Right");
     aec:	87 e8       	ldi	r24, 0x87	; 135
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
	take_turn(2);
     af4:	82 e0       	ldi	r24, 0x02	; 2
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 8a 04 	call	0x914	; 0x914 <take_turn>
}
     afc:	08 95       	ret

00000afe <turn_left>:
	}
	*/
}
void turn_left()
{
	lcd_cursor(1,1);		
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
	lcd_string("Left");
     b06:	8d e8       	ldi	r24, 0x8D	; 141
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
	take_turn(1);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 8a 04 	call	0x914	; 0x914 <take_turn>
}
     b16:	08 95       	ret

00000b18 <__vector_11>:
unsigned char chkid2 = '\0';
unsigned char mytemp;
const char myid = '0'; // 0 is bot 1 and 1 is bot 2
int recv_count=0;
SIGNAL(SIG_USART_RECV) 		// ISR for receive complete interrupt
{
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	0f 92       	push	r0
     b20:	11 24       	eor	r1, r1
     b22:	2f 93       	push	r18
     b24:	8f 93       	push	r24
     b26:	9f 93       	push	r25
	//receiving protocol : d myid data --> 3chars sent by coordinator
	cli();
     b28:	f8 94       	cli
	mytemp = UDR ;
     b2a:	2c b1       	in	r18, 0x0c	; 12
     b2c:	20 93 c4 01 	sts	0x01C4, r18
	if(recv_count==0) { chkid1=mytemp; recv_count++; }
     b30:	80 91 c2 01 	lds	r24, 0x01C2
     b34:	90 91 c3 01 	lds	r25, 0x01C3
     b38:	00 97       	sbiw	r24, 0x00	; 0
     b3a:	29 f4       	brne	.+10     	; 0xb46 <__vector_11+0x2e>
     b3c:	20 93 c0 01 	sts	0x01C0, r18
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	07 c0       	rjmp	.+14     	; 0xb54 <__vector_11+0x3c>
	else if (recv_count==1) { chkid2=mytemp; recv_count++; }
     b46:	81 30       	cpi	r24, 0x01	; 1
     b48:	91 05       	cpc	r25, r1
     b4a:	49 f4       	brne	.+18     	; 0xb5e <__vector_11+0x46>
     b4c:	20 93 c1 01 	sts	0x01C1, r18
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	90 93 c3 01 	sts	0x01C3, r25
     b58:	80 93 c2 01 	sts	0x01C2, r24
     b5c:	14 c0       	rjmp	.+40     	; 0xb86 <__vector_11+0x6e>
	else if(recv_count==2)
     b5e:	02 97       	sbiw	r24, 0x02	; 2
     b60:	91 f4       	brne	.+36     	; 0xb86 <__vector_11+0x6e>
	{
		if(chkid1 == 'd' && chkid2 == myid)
     b62:	80 91 c0 01 	lds	r24, 0x01C0
     b66:	84 36       	cpi	r24, 0x64	; 100
     b68:	31 f4       	brne	.+12     	; 0xb76 <__vector_11+0x5e>
     b6a:	80 91 c1 01 	lds	r24, 0x01C1
     b6e:	80 33       	cpi	r24, 0x30	; 48
     b70:	11 f4       	brne	.+4      	; 0xb76 <__vector_11+0x5e>
		{
			data=mytemp;
     b72:	20 93 ce 01 	sts	0x01CE, r18
		}
		chkid1='\0';
     b76:	10 92 c0 01 	sts	0x01C0, r1
		chkid2='\0';
     b7a:	10 92 c1 01 	sts	0x01C1, r1
		recv_count=0;
     b7e:	10 92 c3 01 	sts	0x01C3, r1
     b82:	10 92 c2 01 	sts	0x01C2, r1
	}
	
	sei();
     b86:	78 94       	sei
}
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	2f 91       	pop	r18
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0
     b94:	1f 90       	pop	r1
     b96:	18 95       	reti

00000b98 <xbee_sendString>:

void xbee_sendString(char str[],int strlngt)
{	
     b98:	ac 01       	movw	r20, r24
	cli();
     b9a:	f8 94       	cli
	int i;
	UDR='#';
     b9c:	83 e2       	ldi	r24, 0x23	; 35
     b9e:	8c b9       	out	0x0c, r24	; 12
     ba0:	e4 ed       	ldi	r30, 0xD4	; 212
     ba2:	f0 e3       	ldi	r31, 0x30	; 48
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <xbee_sendString+0xc>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(50);
	for(i=0;i<strlngt;i++)
	{
		UDR=str[i];
     bac:	a4 ed       	ldi	r26, 0xD4	; 212
     bae:	b0 e3       	ldi	r27, 0x30	; 48
     bb0:	0a c0       	rjmp	.+20     	; 0xbc6 <xbee_sendString+0x2e>
     bb2:	fa 01       	movw	r30, r20
     bb4:	e2 0f       	add	r30, r18
     bb6:	f3 1f       	adc	r31, r19
     bb8:	80 81       	ld	r24, Z
     bba:	8c b9       	out	0x0c, r24	; 12
     bbc:	fd 01       	movw	r30, r26
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <xbee_sendString+0x26>
{	
	cli();
	int i;
	UDR='#';
	_delay_ms(50);
	for(i=0;i<strlngt;i++)
     bc2:	2f 5f       	subi	r18, 0xFF	; 255
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	26 17       	cp	r18, r22
     bc8:	37 07       	cpc	r19, r23
     bca:	9c f3       	brlt	.-26     	; 0xbb2 <xbee_sendString+0x1a>
	{
		UDR=str[i];
		_delay_ms(50);
	}
	UDR='#';
     bcc:	83 e2       	ldi	r24, 0x23	; 35
     bce:	8c b9       	out	0x0c, r24	; 12
     bd0:	84 ed       	ldi	r24, 0xD4	; 212
     bd2:	90 e3       	ldi	r25, 0x30	; 48
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <xbee_sendString+0x3c>
	_delay_ms(50);
	sei();
     bd8:	78 94       	sei
}
     bda:	08 95       	ret

00000bdc <comintersection>:

//protocol : dbot :#d srcid/destid.data#
void comintersection()
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <comintersection+0x6>
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <comintersection+0x8>
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
	char str[4];
	str[0] = 'd';
	str[1] = myid;
     be8:	80 e3       	ldi	r24, 0x30	; 48
     bea:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '.';
     bec:	8e e2       	ldi	r24, 0x2E	; 46
     bee:	8b 83       	std	Y+3, r24	; 0x03
	sei();
}

void xbee_sendString(char str[],int strlngt)
{	
	cli();
     bf0:	f8 94       	cli
	int i;
	UDR='#';
     bf2:	93 e2       	ldi	r25, 0x23	; 35
     bf4:	9c b9       	out	0x0c, r25	; 12
     bf6:	24 ed       	ldi	r18, 0xD4	; 212
     bf8:	30 e3       	ldi	r19, 0x30	; 48
     bfa:	f9 01       	movw	r30, r18
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <comintersection+0x20>
	_delay_ms(50);
	for(i=0;i<strlngt;i++)
	{
		UDR=str[i];
     c00:	84 e6       	ldi	r24, 0x64	; 100
     c02:	8c b9       	out	0x0c, r24	; 12
     c04:	f9 01       	movw	r30, r18
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <comintersection+0x2a>
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	8c b9       	out	0x0c, r24	; 12
     c0e:	f9 01       	movw	r30, r18
     c10:	31 97       	sbiw	r30, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <comintersection+0x34>
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	8c b9       	out	0x0c, r24	; 12
     c18:	f9 01       	movw	r30, r18
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <comintersection+0x3e>
		_delay_ms(50);
	}
	UDR='#';
     c1e:	9c b9       	out	0x0c, r25	; 12
     c20:	c9 01       	movw	r24, r18
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <comintersection+0x46>
	_delay_ms(50);
	sei();
     c26:	78 94       	sei
	str[0] = 'd';
	str[1] = myid;
	str[2] = '.';
	str[3] = '\0';
	xbee_sendString(str,3);
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <move_bot>:
#include "motion.h"
#include "signals.h"
	
int move_bot()
{
	init_sensor_values();
     c36:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
	while(checkobstacle()==0) {} 
     c3a:	0e 94 48 03 	call	0x690	; 0x690 <checkobstacle>
     c3e:	89 2b       	or	r24, r25
     c40:	e1 f3       	breq	.-8      	; 0xc3a <move_bot+0x4>
	if(checkintersection() == 1)
     c42:	0e 94 38 04 	call	0x870	; 0x870 <checkintersection>
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	89 f4       	brne	.+34     	; 0xc6c <move_bot+0x36>
	{	
		//communicate with coordinator
		comintersection();
     c4a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <comintersection>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     c4e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     c50:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     c52:	88 bb       	out	0x18, r24	; 24
     c54:	80 e1       	ldi	r24, 0x10	; 16
     c56:	97 e2       	ldi	r25, 0x27	; 39
     c58:	29 e1       	ldi	r18, 0x19	; 25
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	f9 01       	movw	r30, r18
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <move_bot+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c62:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c64:	d9 f7       	brne	.-10     	; 0xc5c <move_bot+0x26>
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <move_bot+0x3e>
		_delay_ms(1000);
		return 0;
	}
	else 
	{
		follow();
     c6c:	0e 94 99 03 	call	0x732	; 0x732 <follow>
     c70:	21 e0       	ldi	r18, 0x01	; 1
     c72:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	}
}
     c74:	c9 01       	movw	r24, r18
     c76:	08 95       	ret

00000c78 <run>:

void run(void)
{
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
	data='w';
     c82:	87 e7       	ldi	r24, 0x77	; 119
     c84:	80 93 ce 01 	sts	0x01CE, r24
     c88:	09 e1       	ldi	r16, 0x19	; 25
     c8a:	10 e0       	ldi	r17, 0x00	; 0
			continue;
		
		}
		if(data == 'o') // origin
		{
			data='w';
     c8c:	c8 ea       	ldi	r28, 0xA8	; 168
     c8e:	d1 e6       	ldi	r29, 0x61	; 97
     c90:	87 e7       	ldi	r24, 0x77	; 119
     c92:	f8 2e       	mov	r15, r24
     c94:	08 c0       	rjmp	.+16     	; 0xca6 <run+0x2e>
	data='w';
	while(1)
	{
		while(data == 'w') //waiting for signal
		{
			lcd_cursor(1,1);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
			lcd_string("w");
     c9e:	82 e9       	ldi	r24, 0x92	; 146
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
void run(void)
{
	data='w';
	while(1)
	{
		while(data == 'w') //waiting for signal
     ca6:	80 91 ce 01 	lds	r24, 0x01CE
     caa:	87 37       	cpi	r24, 0x77	; 119
     cac:	a1 f3       	breq	.-24     	; 0xc96 <run+0x1e>
		{
			lcd_cursor(1,1);
			lcd_string("w");
		}
		lcd_cursor(1,1);
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_cursor>
		lcd_string(data);
     cb6:	80 91 ce 01 	lds	r24, 0x01CE
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_string>
     cc0:	0f c0       	rjmp	.+30     	; 0xce0 <run+0x68>
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     cc2:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     cc4:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     cc6:	88 bb       	out	0x18, r24	; 24
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	9f ef       	ldi	r25, 0xFF	; 255
     ccc:	f8 01       	movw	r30, r16
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <run+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd4:	d9 f7       	brne	.-10     	; 0xccc <run+0x54>
		while(data == '\0' )
		{
			stop();
			_delay_ms(500000);
			comintersection();
     cd6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <comintersection>
     cda:	ce 01       	movw	r24, r28
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <run+0x64>
			lcd_cursor(1,1);
			lcd_string("w");
		}
		lcd_cursor(1,1);
		lcd_string(data);
		while(data == '\0' )
     ce0:	80 91 ce 01 	lds	r24, 0x01CE
     ce4:	88 23       	and	r24, r24
     ce6:	69 f3       	breq	.-38     	; 0xcc2 <run+0x4a>
			stop();
			_delay_ms(500000);
			comintersection();
			_delay_ms(100);
		}
		if(data=='f') // forward
     ce8:	86 36       	cpi	r24, 0x66	; 102
     cea:	11 f4       	brne	.+4      	; 0xcf0 <run+0x78>
		{
			data='\0';
     cec:	10 92 ce 01 	sts	0x01CE, r1
		}
		if(data=='r') // right	
     cf0:	80 91 ce 01 	lds	r24, 0x01CE
     cf4:	82 37       	cpi	r24, 0x72	; 114
     cf6:	21 f4       	brne	.+8      	; 0xd00 <run+0x88>
		{
			data='\0';
     cf8:	10 92 ce 01 	sts	0x01CE, r1
			turn_right();
     cfc:	0e 94 72 05 	call	0xae4	; 0xae4 <turn_right>
		}
		if(data=='l') // left
     d00:	80 91 ce 01 	lds	r24, 0x01CE
     d04:	8c 36       	cpi	r24, 0x6C	; 108
     d06:	21 f4       	brne	.+8      	; 0xd10 <run+0x98>
		{
			data='\0';
     d08:	10 92 ce 01 	sts	0x01CE, r1
			turn_left();
     d0c:	0e 94 7f 05 	call	0xafe	; 0xafe <turn_left>
		} 
		if(data == 'h') // halt
     d10:	80 91 ce 01 	lds	r24, 0x01CE
     d14:	88 36       	cpi	r24, 0x68	; 104
     d16:	19 f4       	brne	.+6      	; 0xd1e <run+0xa6>
		{
			data='\0';
     d18:	10 92 ce 01 	sts	0x01CE, r1
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <run+0xae>
			stop();
			_delay_ms(100);
			continue;
		
		}
		if(data == 'o') // origin
     d1e:	8f 36       	cpi	r24, 0x6F	; 111
     d20:	49 f4       	brne	.+18     	; 0xd34 <run+0xbc>
		{
			data='w';
     d22:	f0 92 ce 01 	sts	0x01CE, r15
void motion (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     d26:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     d28:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     d2a:	88 bb       	out	0x18, r24	; 24
     d2c:	ce 01       	movw	r24, r28
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <run+0xb6>
     d32:	b9 cf       	rjmp	.-142    	; 0xca6 <run+0x2e>
			stop();
			_delay_ms(100);
			continue;
		}
		while(move_bot() == 1) { }
     d34:	0e 94 1b 06 	call	0xc36	; 0xc36 <move_bot>
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	e1 f3       	breq	.-8      	; 0xd34 <run+0xbc>
     d3c:	b4 cf       	rjmp	.-152    	; 0xca6 <run+0x2e>

00000d3e <checkfollow>:
	}
}

void checkfollow()
{
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	d0 e0       	ldi	r29, 0x00	; 0
	int temp=0;
	while(1)
	{
		init_sensor_values();
     d46:	0e 94 2c 02 	call	0x458	; 0x458 <init_sensor_values>
		//code to check line following:
	 	while(checkobstacle()==0) 
     d4a:	0e 94 48 03 	call	0x690	; 0x690 <checkobstacle>
     d4e:	89 2b       	or	r24, r25
     d50:	e1 f3       	breq	.-8      	; 0xd4a <checkfollow+0xc>
		{}
	 
		if(checkintersection() == 1)
     d52:	0e 94 38 04 	call	0x870	; 0x870 <checkintersection>
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	09 f5       	brne	.+66     	; 0xd9c <checkfollow+0x5e>
		{
			temp++;
     d5a:	21 96       	adiw	r28, 0x01	; 1
			if(temp==1 || temp > 7) { turn_left(); }
     d5c:	c1 30       	cpi	r28, 0x01	; 1
     d5e:	d1 05       	cpc	r29, r1
     d60:	19 f0       	breq	.+6      	; 0xd68 <checkfollow+0x2a>
     d62:	c8 30       	cpi	r28, 0x08	; 8
     d64:	d1 05       	cpc	r29, r1
     d66:	14 f0       	brlt	.+4      	; 0xd6c <checkfollow+0x2e>
     d68:	0e 94 7f 05 	call	0xafe	; 0xafe <turn_left>
			if(temp==2 || temp ==3 || temp == 5 || temp==6) { turn_right();  }
     d6c:	ce 01       	movw	r24, r28
     d6e:	02 97       	sbiw	r24, 0x02	; 2
     d70:	02 97       	sbiw	r24, 0x02	; 2
     d72:	30 f0       	brcs	.+12     	; 0xd80 <checkfollow+0x42>
     d74:	c5 30       	cpi	r28, 0x05	; 5
     d76:	d1 05       	cpc	r29, r1
     d78:	19 f0       	breq	.+6      	; 0xd80 <checkfollow+0x42>
     d7a:	c6 30       	cpi	r28, 0x06	; 6
     d7c:	d1 05       	cpc	r29, r1
     d7e:	11 f4       	brne	.+4      	; 0xd84 <checkfollow+0x46>
     d80:	0e 94 72 05 	call	0xae4	; 0xae4 <turn_right>
			if(temp == 4 || temp==7) { follow(); }
     d84:	c4 30       	cpi	r28, 0x04	; 4
     d86:	d1 05       	cpc	r29, r1
     d88:	19 f0       	breq	.+6      	; 0xd90 <checkfollow+0x52>
     d8a:	c7 30       	cpi	r28, 0x07	; 7
     d8c:	d1 05       	cpc	r29, r1
     d8e:	11 f4       	brne	.+4      	; 0xd94 <checkfollow+0x56>
     d90:	0e 94 99 03 	call	0x732	; 0x732 <follow>
			if(temp ==10 ) temp=0;
     d94:	ca 30       	cpi	r28, 0x0A	; 10
     d96:	d1 05       	cpc	r29, r1
     d98:	b1 f6       	brne	.-84     	; 0xd46 <checkfollow+0x8>
     d9a:	d3 cf       	rjmp	.-90     	; 0xd42 <checkfollow+0x4>
		}
		else 
		{
			follow();
     d9c:	0e 94 99 03 	call	0x732	; 0x732 <follow>
     da0:	d2 cf       	rjmp	.-92     	; 0xd46 <checkfollow+0x8>

00000da2 <checkstraight>:

void checkstraight()
{
	while(1)
	{
		follow();
     da2:	0e 94 99 03 	call	0x732	; 0x732 <follow>
     da6:	fd cf       	rjmp	.-6      	; 0xda2 <checkstraight>

00000da8 <checkxbee>:
	}
}

void checkxbee()
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	c9 e1       	ldi	r28, 0x19	; 25
     dae:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		
		comintersection();
     db0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <comintersection>
     db4:	88 e9       	ldi	r24, 0x98	; 152
     db6:	9a e3       	ldi	r25, 0x3A	; 58
     db8:	fe 01       	movw	r30, r28
     dba:	31 97       	sbiw	r30, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <checkxbee+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc0:	d9 f7       	brne	.-10     	; 0xdb8 <checkxbee+0x10>
     dc2:	f6 cf       	rjmp	.-20     	; 0xdb0 <checkxbee+0x8>

00000dc4 <main>:

//Main Function
int main(void)
{
 
 init_devices();
     dc4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <init_devices>

 
 //checkstraight();
 run();
     dc8:	0e 94 3c 06 	call	0xc78	; 0xc78 <run>
 //checkfollow();
 //checkxbee();
}
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	08 95       	ret

00000dd2 <_fpadd_parts>:
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ef ee       	ldi	r30, 0xEF	; 239
     dd8:	f6 e0       	ldi	r31, 0x06	; 6
     dda:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__prologue_saves__>
     dde:	dc 01       	movw	r26, r24
     de0:	2b 01       	movw	r4, r22
     de2:	fa 01       	movw	r30, r20
     de4:	9c 91       	ld	r25, X
     de6:	92 30       	cpi	r25, 0x02	; 2
     de8:	08 f4       	brcc	.+2      	; 0xdec <_fpadd_parts+0x1a>
     dea:	39 c1       	rjmp	.+626    	; 0x105e <_fpadd_parts+0x28c>
     dec:	eb 01       	movw	r28, r22
     dee:	88 81       	ld	r24, Y
     df0:	82 30       	cpi	r24, 0x02	; 2
     df2:	08 f4       	brcc	.+2      	; 0xdf6 <_fpadd_parts+0x24>
     df4:	33 c1       	rjmp	.+614    	; 0x105c <_fpadd_parts+0x28a>
     df6:	94 30       	cpi	r25, 0x04	; 4
     df8:	69 f4       	brne	.+26     	; 0xe14 <_fpadd_parts+0x42>
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	09 f0       	breq	.+2      	; 0xe00 <_fpadd_parts+0x2e>
     dfe:	2f c1       	rjmp	.+606    	; 0x105e <_fpadd_parts+0x28c>
     e00:	11 96       	adiw	r26, 0x01	; 1
     e02:	9c 91       	ld	r25, X
     e04:	11 97       	sbiw	r26, 0x01	; 1
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	98 17       	cp	r25, r24
     e0a:	09 f4       	brne	.+2      	; 0xe0e <_fpadd_parts+0x3c>
     e0c:	28 c1       	rjmp	.+592    	; 0x105e <_fpadd_parts+0x28c>
     e0e:	a7 ea       	ldi	r26, 0xA7	; 167
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	25 c1       	rjmp	.+586    	; 0x105e <_fpadd_parts+0x28c>
     e14:	84 30       	cpi	r24, 0x04	; 4
     e16:	09 f4       	brne	.+2      	; 0xe1a <_fpadd_parts+0x48>
     e18:	21 c1       	rjmp	.+578    	; 0x105c <_fpadd_parts+0x28a>
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	a9 f4       	brne	.+42     	; 0xe48 <_fpadd_parts+0x76>
     e1e:	92 30       	cpi	r25, 0x02	; 2
     e20:	09 f0       	breq	.+2      	; 0xe24 <_fpadd_parts+0x52>
     e22:	1d c1       	rjmp	.+570    	; 0x105e <_fpadd_parts+0x28c>
     e24:	9a 01       	movw	r18, r20
     e26:	ad 01       	movw	r20, r26
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	ea 01       	movw	r28, r20
     e2c:	09 90       	ld	r0, Y+
     e2e:	ae 01       	movw	r20, r28
     e30:	e9 01       	movw	r28, r18
     e32:	09 92       	st	Y+, r0
     e34:	9e 01       	movw	r18, r28
     e36:	81 50       	subi	r24, 0x01	; 1
     e38:	c1 f7       	brne	.-16     	; 0xe2a <_fpadd_parts+0x58>
     e3a:	e2 01       	movw	r28, r4
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	11 96       	adiw	r26, 0x01	; 1
     e40:	9c 91       	ld	r25, X
     e42:	89 23       	and	r24, r25
     e44:	81 83       	std	Z+1, r24	; 0x01
     e46:	08 c1       	rjmp	.+528    	; 0x1058 <_fpadd_parts+0x286>
     e48:	92 30       	cpi	r25, 0x02	; 2
     e4a:	09 f4       	brne	.+2      	; 0xe4e <_fpadd_parts+0x7c>
     e4c:	07 c1       	rjmp	.+526    	; 0x105c <_fpadd_parts+0x28a>
     e4e:	12 96       	adiw	r26, 0x02	; 2
     e50:	2d 90       	ld	r2, X+
     e52:	3c 90       	ld	r3, X
     e54:	13 97       	sbiw	r26, 0x03	; 3
     e56:	eb 01       	movw	r28, r22
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	9b 81       	ldd	r25, Y+3	; 0x03
     e5c:	14 96       	adiw	r26, 0x04	; 4
     e5e:	ad 90       	ld	r10, X+
     e60:	bd 90       	ld	r11, X+
     e62:	cd 90       	ld	r12, X+
     e64:	dc 90       	ld	r13, X
     e66:	17 97       	sbiw	r26, 0x07	; 7
     e68:	ec 80       	ldd	r14, Y+4	; 0x04
     e6a:	fd 80       	ldd	r15, Y+5	; 0x05
     e6c:	0e 81       	ldd	r16, Y+6	; 0x06
     e6e:	1f 81       	ldd	r17, Y+7	; 0x07
     e70:	91 01       	movw	r18, r2
     e72:	28 1b       	sub	r18, r24
     e74:	39 0b       	sbc	r19, r25
     e76:	b9 01       	movw	r22, r18
     e78:	37 ff       	sbrs	r19, 7
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <_fpadd_parts+0xb2>
     e7c:	66 27       	eor	r22, r22
     e7e:	77 27       	eor	r23, r23
     e80:	62 1b       	sub	r22, r18
     e82:	73 0b       	sbc	r23, r19
     e84:	60 32       	cpi	r22, 0x20	; 32
     e86:	71 05       	cpc	r23, r1
     e88:	0c f0       	brlt	.+2      	; 0xe8c <_fpadd_parts+0xba>
     e8a:	61 c0       	rjmp	.+194    	; 0xf4e <_fpadd_parts+0x17c>
     e8c:	12 16       	cp	r1, r18
     e8e:	13 06       	cpc	r1, r19
     e90:	6c f5       	brge	.+90     	; 0xeec <_fpadd_parts+0x11a>
     e92:	37 01       	movw	r6, r14
     e94:	48 01       	movw	r8, r16
     e96:	06 2e       	mov	r0, r22
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <_fpadd_parts+0xd0>
     e9a:	96 94       	lsr	r9
     e9c:	87 94       	ror	r8
     e9e:	77 94       	ror	r7
     ea0:	67 94       	ror	r6
     ea2:	0a 94       	dec	r0
     ea4:	d2 f7       	brpl	.-12     	; 0xe9a <_fpadd_parts+0xc8>
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <_fpadd_parts+0xe6>
     eb0:	22 0f       	add	r18, r18
     eb2:	33 1f       	adc	r19, r19
     eb4:	44 1f       	adc	r20, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	6a 95       	dec	r22
     eba:	d2 f7       	brpl	.-12     	; 0xeb0 <_fpadd_parts+0xde>
     ebc:	21 50       	subi	r18, 0x01	; 1
     ebe:	30 40       	sbci	r19, 0x00	; 0
     ec0:	40 40       	sbci	r20, 0x00	; 0
     ec2:	50 40       	sbci	r21, 0x00	; 0
     ec4:	2e 21       	and	r18, r14
     ec6:	3f 21       	and	r19, r15
     ec8:	40 23       	and	r20, r16
     eca:	51 23       	and	r21, r17
     ecc:	21 15       	cp	r18, r1
     ece:	31 05       	cpc	r19, r1
     ed0:	41 05       	cpc	r20, r1
     ed2:	51 05       	cpc	r21, r1
     ed4:	21 f0       	breq	.+8      	; 0xede <_fpadd_parts+0x10c>
     ed6:	21 e0       	ldi	r18, 0x01	; 1
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	79 01       	movw	r14, r18
     ee0:	8a 01       	movw	r16, r20
     ee2:	e6 28       	or	r14, r6
     ee4:	f7 28       	or	r15, r7
     ee6:	08 29       	or	r16, r8
     ee8:	19 29       	or	r17, r9
     eea:	3c c0       	rjmp	.+120    	; 0xf64 <_fpadd_parts+0x192>
     eec:	23 2b       	or	r18, r19
     eee:	d1 f1       	breq	.+116    	; 0xf64 <_fpadd_parts+0x192>
     ef0:	26 0e       	add	r2, r22
     ef2:	37 1e       	adc	r3, r23
     ef4:	35 01       	movw	r6, r10
     ef6:	46 01       	movw	r8, r12
     ef8:	06 2e       	mov	r0, r22
     efa:	04 c0       	rjmp	.+8      	; 0xf04 <_fpadd_parts+0x132>
     efc:	96 94       	lsr	r9
     efe:	87 94       	ror	r8
     f00:	77 94       	ror	r7
     f02:	67 94       	ror	r6
     f04:	0a 94       	dec	r0
     f06:	d2 f7       	brpl	.-12     	; 0xefc <_fpadd_parts+0x12a>
     f08:	21 e0       	ldi	r18, 0x01	; 1
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <_fpadd_parts+0x148>
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	44 1f       	adc	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	6a 95       	dec	r22
     f1c:	d2 f7       	brpl	.-12     	; 0xf12 <_fpadd_parts+0x140>
     f1e:	21 50       	subi	r18, 0x01	; 1
     f20:	30 40       	sbci	r19, 0x00	; 0
     f22:	40 40       	sbci	r20, 0x00	; 0
     f24:	50 40       	sbci	r21, 0x00	; 0
     f26:	2a 21       	and	r18, r10
     f28:	3b 21       	and	r19, r11
     f2a:	4c 21       	and	r20, r12
     f2c:	5d 21       	and	r21, r13
     f2e:	21 15       	cp	r18, r1
     f30:	31 05       	cpc	r19, r1
     f32:	41 05       	cpc	r20, r1
     f34:	51 05       	cpc	r21, r1
     f36:	21 f0       	breq	.+8      	; 0xf40 <_fpadd_parts+0x16e>
     f38:	21 e0       	ldi	r18, 0x01	; 1
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	59 01       	movw	r10, r18
     f42:	6a 01       	movw	r12, r20
     f44:	a6 28       	or	r10, r6
     f46:	b7 28       	or	r11, r7
     f48:	c8 28       	or	r12, r8
     f4a:	d9 28       	or	r13, r9
     f4c:	0b c0       	rjmp	.+22     	; 0xf64 <_fpadd_parts+0x192>
     f4e:	82 15       	cp	r24, r2
     f50:	93 05       	cpc	r25, r3
     f52:	2c f0       	brlt	.+10     	; 0xf5e <_fpadd_parts+0x18c>
     f54:	1c 01       	movw	r2, r24
     f56:	aa 24       	eor	r10, r10
     f58:	bb 24       	eor	r11, r11
     f5a:	65 01       	movw	r12, r10
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <_fpadd_parts+0x192>
     f5e:	ee 24       	eor	r14, r14
     f60:	ff 24       	eor	r15, r15
     f62:	87 01       	movw	r16, r14
     f64:	11 96       	adiw	r26, 0x01	; 1
     f66:	9c 91       	ld	r25, X
     f68:	d2 01       	movw	r26, r4
     f6a:	11 96       	adiw	r26, 0x01	; 1
     f6c:	8c 91       	ld	r24, X
     f6e:	98 17       	cp	r25, r24
     f70:	09 f4       	brne	.+2      	; 0xf74 <_fpadd_parts+0x1a2>
     f72:	45 c0       	rjmp	.+138    	; 0xffe <_fpadd_parts+0x22c>
     f74:	99 23       	and	r25, r25
     f76:	39 f0       	breq	.+14     	; 0xf86 <_fpadd_parts+0x1b4>
     f78:	a8 01       	movw	r20, r16
     f7a:	97 01       	movw	r18, r14
     f7c:	2a 19       	sub	r18, r10
     f7e:	3b 09       	sbc	r19, r11
     f80:	4c 09       	sbc	r20, r12
     f82:	5d 09       	sbc	r21, r13
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <_fpadd_parts+0x1c0>
     f86:	a6 01       	movw	r20, r12
     f88:	95 01       	movw	r18, r10
     f8a:	2e 19       	sub	r18, r14
     f8c:	3f 09       	sbc	r19, r15
     f8e:	40 0b       	sbc	r20, r16
     f90:	51 0b       	sbc	r21, r17
     f92:	57 fd       	sbrc	r21, 7
     f94:	08 c0       	rjmp	.+16     	; 0xfa6 <_fpadd_parts+0x1d4>
     f96:	11 82       	std	Z+1, r1	; 0x01
     f98:	33 82       	std	Z+3, r3	; 0x03
     f9a:	22 82       	std	Z+2, r2	; 0x02
     f9c:	24 83       	std	Z+4, r18	; 0x04
     f9e:	35 83       	std	Z+5, r19	; 0x05
     fa0:	46 83       	std	Z+6, r20	; 0x06
     fa2:	57 83       	std	Z+7, r21	; 0x07
     fa4:	1d c0       	rjmp	.+58     	; 0xfe0 <_fpadd_parts+0x20e>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	81 83       	std	Z+1, r24	; 0x01
     faa:	33 82       	std	Z+3, r3	; 0x03
     fac:	22 82       	std	Z+2, r2	; 0x02
     fae:	88 27       	eor	r24, r24
     fb0:	99 27       	eor	r25, r25
     fb2:	dc 01       	movw	r26, r24
     fb4:	82 1b       	sub	r24, r18
     fb6:	93 0b       	sbc	r25, r19
     fb8:	a4 0b       	sbc	r26, r20
     fba:	b5 0b       	sbc	r27, r21
     fbc:	84 83       	std	Z+4, r24	; 0x04
     fbe:	95 83       	std	Z+5, r25	; 0x05
     fc0:	a6 83       	std	Z+6, r26	; 0x06
     fc2:	b7 83       	std	Z+7, r27	; 0x07
     fc4:	0d c0       	rjmp	.+26     	; 0xfe0 <_fpadd_parts+0x20e>
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	44 1f       	adc	r20, r20
     fcc:	55 1f       	adc	r21, r21
     fce:	24 83       	std	Z+4, r18	; 0x04
     fd0:	35 83       	std	Z+5, r19	; 0x05
     fd2:	46 83       	std	Z+6, r20	; 0x06
     fd4:	57 83       	std	Z+7, r21	; 0x07
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	93 83       	std	Z+3, r25	; 0x03
     fde:	82 83       	std	Z+2, r24	; 0x02
     fe0:	24 81       	ldd	r18, Z+4	; 0x04
     fe2:	35 81       	ldd	r19, Z+5	; 0x05
     fe4:	46 81       	ldd	r20, Z+6	; 0x06
     fe6:	57 81       	ldd	r21, Z+7	; 0x07
     fe8:	da 01       	movw	r26, r20
     fea:	c9 01       	movw	r24, r18
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	a1 09       	sbc	r26, r1
     ff0:	b1 09       	sbc	r27, r1
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	af 4f       	sbci	r26, 0xFF	; 255
     ff8:	bf 43       	sbci	r27, 0x3F	; 63
     ffa:	28 f3       	brcs	.-54     	; 0xfc6 <_fpadd_parts+0x1f4>
     ffc:	0b c0       	rjmp	.+22     	; 0x1014 <_fpadd_parts+0x242>
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	33 82       	std	Z+3, r3	; 0x03
    1002:	22 82       	std	Z+2, r2	; 0x02
    1004:	ea 0c       	add	r14, r10
    1006:	fb 1c       	adc	r15, r11
    1008:	0c 1d       	adc	r16, r12
    100a:	1d 1d       	adc	r17, r13
    100c:	e4 82       	std	Z+4, r14	; 0x04
    100e:	f5 82       	std	Z+5, r15	; 0x05
    1010:	06 83       	std	Z+6, r16	; 0x06
    1012:	17 83       	std	Z+7, r17	; 0x07
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	80 83       	st	Z, r24
    1018:	24 81       	ldd	r18, Z+4	; 0x04
    101a:	35 81       	ldd	r19, Z+5	; 0x05
    101c:	46 81       	ldd	r20, Z+6	; 0x06
    101e:	57 81       	ldd	r21, Z+7	; 0x07
    1020:	57 ff       	sbrs	r21, 7
    1022:	1a c0       	rjmp	.+52     	; 0x1058 <_fpadd_parts+0x286>
    1024:	c9 01       	movw	r24, r18
    1026:	aa 27       	eor	r26, r26
    1028:	97 fd       	sbrc	r25, 7
    102a:	a0 95       	com	r26
    102c:	ba 2f       	mov	r27, r26
    102e:	81 70       	andi	r24, 0x01	; 1
    1030:	90 70       	andi	r25, 0x00	; 0
    1032:	a0 70       	andi	r26, 0x00	; 0
    1034:	b0 70       	andi	r27, 0x00	; 0
    1036:	56 95       	lsr	r21
    1038:	47 95       	ror	r20
    103a:	37 95       	ror	r19
    103c:	27 95       	ror	r18
    103e:	82 2b       	or	r24, r18
    1040:	93 2b       	or	r25, r19
    1042:	a4 2b       	or	r26, r20
    1044:	b5 2b       	or	r27, r21
    1046:	84 83       	std	Z+4, r24	; 0x04
    1048:	95 83       	std	Z+5, r25	; 0x05
    104a:	a6 83       	std	Z+6, r26	; 0x06
    104c:	b7 83       	std	Z+7, r27	; 0x07
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	93 83       	std	Z+3, r25	; 0x03
    1056:	82 83       	std	Z+2, r24	; 0x02
    1058:	df 01       	movw	r26, r30
    105a:	01 c0       	rjmp	.+2      	; 0x105e <_fpadd_parts+0x28c>
    105c:	d2 01       	movw	r26, r4
    105e:	cd 01       	movw	r24, r26
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	e2 e1       	ldi	r30, 0x12	; 18
    1066:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__epilogue_restores__>

0000106a <__subsf3>:
    106a:	a0 e2       	ldi	r26, 0x20	; 32
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	eb e3       	ldi	r30, 0x3B	; 59
    1070:	f8 e0       	ldi	r31, 0x08	; 8
    1072:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__prologue_saves__+0x18>
    1076:	69 83       	std	Y+1, r22	; 0x01
    1078:	7a 83       	std	Y+2, r23	; 0x02
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	9c 83       	std	Y+4, r25	; 0x04
    107e:	2d 83       	std	Y+5, r18	; 0x05
    1080:	3e 83       	std	Y+6, r19	; 0x06
    1082:	4f 83       	std	Y+7, r20	; 0x07
    1084:	58 87       	std	Y+8, r21	; 0x08
    1086:	e9 e0       	ldi	r30, 0x09	; 9
    1088:	ee 2e       	mov	r14, r30
    108a:	f1 2c       	mov	r15, r1
    108c:	ec 0e       	add	r14, r28
    108e:	fd 1e       	adc	r15, r29
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	b7 01       	movw	r22, r14
    1096:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__unpack_f>
    109a:	8e 01       	movw	r16, r28
    109c:	0f 5e       	subi	r16, 0xEF	; 239
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	ce 01       	movw	r24, r28
    10a2:	05 96       	adiw	r24, 0x05	; 5
    10a4:	b8 01       	movw	r22, r16
    10a6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__unpack_f>
    10aa:	8a 89       	ldd	r24, Y+18	; 0x12
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	89 27       	eor	r24, r25
    10b0:	8a 8b       	std	Y+18, r24	; 0x12
    10b2:	c7 01       	movw	r24, r14
    10b4:	b8 01       	movw	r22, r16
    10b6:	ae 01       	movw	r20, r28
    10b8:	47 5e       	subi	r20, 0xE7	; 231
    10ba:	5f 4f       	sbci	r21, 0xFF	; 255
    10bc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_fpadd_parts>
    10c0:	0e 94 8e 0a 	call	0x151c	; 0x151c <__pack_f>
    10c4:	a0 96       	adiw	r28, 0x20	; 32
    10c6:	e6 e0       	ldi	r30, 0x06	; 6
    10c8:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__epilogue_restores__+0x18>

000010cc <__addsf3>:
    10cc:	a0 e2       	ldi	r26, 0x20	; 32
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ec e6       	ldi	r30, 0x6C	; 108
    10d2:	f8 e0       	ldi	r31, 0x08	; 8
    10d4:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__prologue_saves__+0x18>
    10d8:	69 83       	std	Y+1, r22	; 0x01
    10da:	7a 83       	std	Y+2, r23	; 0x02
    10dc:	8b 83       	std	Y+3, r24	; 0x03
    10de:	9c 83       	std	Y+4, r25	; 0x04
    10e0:	2d 83       	std	Y+5, r18	; 0x05
    10e2:	3e 83       	std	Y+6, r19	; 0x06
    10e4:	4f 83       	std	Y+7, r20	; 0x07
    10e6:	58 87       	std	Y+8, r21	; 0x08
    10e8:	f9 e0       	ldi	r31, 0x09	; 9
    10ea:	ef 2e       	mov	r14, r31
    10ec:	f1 2c       	mov	r15, r1
    10ee:	ec 0e       	add	r14, r28
    10f0:	fd 1e       	adc	r15, r29
    10f2:	ce 01       	movw	r24, r28
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	b7 01       	movw	r22, r14
    10f8:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__unpack_f>
    10fc:	8e 01       	movw	r16, r28
    10fe:	0f 5e       	subi	r16, 0xEF	; 239
    1100:	1f 4f       	sbci	r17, 0xFF	; 255
    1102:	ce 01       	movw	r24, r28
    1104:	05 96       	adiw	r24, 0x05	; 5
    1106:	b8 01       	movw	r22, r16
    1108:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__unpack_f>
    110c:	c7 01       	movw	r24, r14
    110e:	b8 01       	movw	r22, r16
    1110:	ae 01       	movw	r20, r28
    1112:	47 5e       	subi	r20, 0xE7	; 231
    1114:	5f 4f       	sbci	r21, 0xFF	; 255
    1116:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_fpadd_parts>
    111a:	0e 94 8e 0a 	call	0x151c	; 0x151c <__pack_f>
    111e:	a0 96       	adiw	r28, 0x20	; 32
    1120:	e6 e0       	ldi	r30, 0x06	; 6
    1122:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__epilogue_restores__+0x18>

00001126 <__mulsf3>:
    1126:	a0 e2       	ldi	r26, 0x20	; 32
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e9 e9       	ldi	r30, 0x99	; 153
    112c:	f8 e0       	ldi	r31, 0x08	; 8
    112e:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__prologue_saves__>
    1132:	69 83       	std	Y+1, r22	; 0x01
    1134:	7a 83       	std	Y+2, r23	; 0x02
    1136:	8b 83       	std	Y+3, r24	; 0x03
    1138:	9c 83       	std	Y+4, r25	; 0x04
    113a:	2d 83       	std	Y+5, r18	; 0x05
    113c:	3e 83       	std	Y+6, r19	; 0x06
    113e:	4f 83       	std	Y+7, r20	; 0x07
    1140:	58 87       	std	Y+8, r21	; 0x08
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	be 01       	movw	r22, r28
    1148:	67 5f       	subi	r22, 0xF7	; 247
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__unpack_f>
    1150:	ce 01       	movw	r24, r28
    1152:	05 96       	adiw	r24, 0x05	; 5
    1154:	be 01       	movw	r22, r28
    1156:	6f 5e       	subi	r22, 0xEF	; 239
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__unpack_f>
    115e:	99 85       	ldd	r25, Y+9	; 0x09
    1160:	92 30       	cpi	r25, 0x02	; 2
    1162:	88 f0       	brcs	.+34     	; 0x1186 <__mulsf3+0x60>
    1164:	89 89       	ldd	r24, Y+17	; 0x11
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	c8 f0       	brcs	.+50     	; 0x119c <__mulsf3+0x76>
    116a:	94 30       	cpi	r25, 0x04	; 4
    116c:	19 f4       	brne	.+6      	; 0x1174 <__mulsf3+0x4e>
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	51 f4       	brne	.+20     	; 0x1186 <__mulsf3+0x60>
    1172:	04 c0       	rjmp	.+8      	; 0x117c <__mulsf3+0x56>
    1174:	84 30       	cpi	r24, 0x04	; 4
    1176:	29 f4       	brne	.+10     	; 0x1182 <__mulsf3+0x5c>
    1178:	92 30       	cpi	r25, 0x02	; 2
    117a:	81 f4       	brne	.+32     	; 0x119c <__mulsf3+0x76>
    117c:	87 ea       	ldi	r24, 0xA7	; 167
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	c6 c0       	rjmp	.+396    	; 0x130e <__mulsf3+0x1e8>
    1182:	92 30       	cpi	r25, 0x02	; 2
    1184:	49 f4       	brne	.+18     	; 0x1198 <__mulsf3+0x72>
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	8a 89       	ldd	r24, Y+18	; 0x12
    118c:	98 13       	cpse	r25, r24
    118e:	21 e0       	ldi	r18, 0x01	; 1
    1190:	2a 87       	std	Y+10, r18	; 0x0a
    1192:	ce 01       	movw	r24, r28
    1194:	09 96       	adiw	r24, 0x09	; 9
    1196:	bb c0       	rjmp	.+374    	; 0x130e <__mulsf3+0x1e8>
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	49 f4       	brne	.+18     	; 0x11ae <__mulsf3+0x88>
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	8a 89       	ldd	r24, Y+18	; 0x12
    11a2:	98 13       	cpse	r25, r24
    11a4:	21 e0       	ldi	r18, 0x01	; 1
    11a6:	2a 8b       	std	Y+18, r18	; 0x12
    11a8:	ce 01       	movw	r24, r28
    11aa:	41 96       	adiw	r24, 0x11	; 17
    11ac:	b0 c0       	rjmp	.+352    	; 0x130e <__mulsf3+0x1e8>
    11ae:	2d 84       	ldd	r2, Y+13	; 0x0d
    11b0:	3e 84       	ldd	r3, Y+14	; 0x0e
    11b2:	4f 84       	ldd	r4, Y+15	; 0x0f
    11b4:	58 88       	ldd	r5, Y+16	; 0x10
    11b6:	6d 88       	ldd	r6, Y+21	; 0x15
    11b8:	7e 88       	ldd	r7, Y+22	; 0x16
    11ba:	8f 88       	ldd	r8, Y+23	; 0x17
    11bc:	98 8c       	ldd	r9, Y+24	; 0x18
    11be:	ee 24       	eor	r14, r14
    11c0:	ff 24       	eor	r15, r15
    11c2:	87 01       	movw	r16, r14
    11c4:	aa 24       	eor	r10, r10
    11c6:	bb 24       	eor	r11, r11
    11c8:	65 01       	movw	r12, r10
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	e0 e0       	ldi	r30, 0x00	; 0
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	c1 01       	movw	r24, r2
    11d8:	81 70       	andi	r24, 0x01	; 1
    11da:	90 70       	andi	r25, 0x00	; 0
    11dc:	89 2b       	or	r24, r25
    11de:	e9 f0       	breq	.+58     	; 0x121a <__mulsf3+0xf4>
    11e0:	e6 0c       	add	r14, r6
    11e2:	f7 1c       	adc	r15, r7
    11e4:	08 1d       	adc	r16, r8
    11e6:	19 1d       	adc	r17, r9
    11e8:	9a 01       	movw	r18, r20
    11ea:	ab 01       	movw	r20, r22
    11ec:	2a 0d       	add	r18, r10
    11ee:	3b 1d       	adc	r19, r11
    11f0:	4c 1d       	adc	r20, r12
    11f2:	5d 1d       	adc	r21, r13
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e6 14       	cp	r14, r6
    11fe:	f7 04       	cpc	r15, r7
    1200:	08 05       	cpc	r16, r8
    1202:	19 05       	cpc	r17, r9
    1204:	20 f4       	brcc	.+8      	; 0x120e <__mulsf3+0xe8>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a0 e0       	ldi	r26, 0x00	; 0
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ba 01       	movw	r22, r20
    1210:	a9 01       	movw	r20, r18
    1212:	48 0f       	add	r20, r24
    1214:	59 1f       	adc	r21, r25
    1216:	6a 1f       	adc	r22, r26
    1218:	7b 1f       	adc	r23, r27
    121a:	aa 0c       	add	r10, r10
    121c:	bb 1c       	adc	r11, r11
    121e:	cc 1c       	adc	r12, r12
    1220:	dd 1c       	adc	r13, r13
    1222:	97 fe       	sbrs	r9, 7
    1224:	08 c0       	rjmp	.+16     	; 0x1236 <__mulsf3+0x110>
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	a8 2a       	or	r10, r24
    1230:	b9 2a       	or	r11, r25
    1232:	ca 2a       	or	r12, r26
    1234:	db 2a       	or	r13, r27
    1236:	31 96       	adiw	r30, 0x01	; 1
    1238:	e0 32       	cpi	r30, 0x20	; 32
    123a:	f1 05       	cpc	r31, r1
    123c:	49 f0       	breq	.+18     	; 0x1250 <__mulsf3+0x12a>
    123e:	66 0c       	add	r6, r6
    1240:	77 1c       	adc	r7, r7
    1242:	88 1c       	adc	r8, r8
    1244:	99 1c       	adc	r9, r9
    1246:	56 94       	lsr	r5
    1248:	47 94       	ror	r4
    124a:	37 94       	ror	r3
    124c:	27 94       	ror	r2
    124e:	c3 cf       	rjmp	.-122    	; 0x11d6 <__mulsf3+0xb0>
    1250:	fa 85       	ldd	r31, Y+10	; 0x0a
    1252:	ea 89       	ldd	r30, Y+18	; 0x12
    1254:	2b 89       	ldd	r18, Y+19	; 0x13
    1256:	3c 89       	ldd	r19, Y+20	; 0x14
    1258:	8b 85       	ldd	r24, Y+11	; 0x0b
    125a:	9c 85       	ldd	r25, Y+12	; 0x0c
    125c:	28 0f       	add	r18, r24
    125e:	39 1f       	adc	r19, r25
    1260:	2e 5f       	subi	r18, 0xFE	; 254
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	17 c0       	rjmp	.+46     	; 0x1294 <__mulsf3+0x16e>
    1266:	ca 01       	movw	r24, r20
    1268:	81 70       	andi	r24, 0x01	; 1
    126a:	90 70       	andi	r25, 0x00	; 0
    126c:	89 2b       	or	r24, r25
    126e:	61 f0       	breq	.+24     	; 0x1288 <__mulsf3+0x162>
    1270:	16 95       	lsr	r17
    1272:	07 95       	ror	r16
    1274:	f7 94       	ror	r15
    1276:	e7 94       	ror	r14
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 e0       	ldi	r26, 0x00	; 0
    127e:	b0 e8       	ldi	r27, 0x80	; 128
    1280:	e8 2a       	or	r14, r24
    1282:	f9 2a       	or	r15, r25
    1284:	0a 2b       	or	r16, r26
    1286:	1b 2b       	or	r17, r27
    1288:	76 95       	lsr	r23
    128a:	67 95       	ror	r22
    128c:	57 95       	ror	r21
    128e:	47 95       	ror	r20
    1290:	2f 5f       	subi	r18, 0xFF	; 255
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	77 fd       	sbrc	r23, 7
    1296:	e7 cf       	rjmp	.-50     	; 0x1266 <__mulsf3+0x140>
    1298:	0c c0       	rjmp	.+24     	; 0x12b2 <__mulsf3+0x18c>
    129a:	44 0f       	add	r20, r20
    129c:	55 1f       	adc	r21, r21
    129e:	66 1f       	adc	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	17 fd       	sbrc	r17, 7
    12a4:	41 60       	ori	r20, 0x01	; 1
    12a6:	ee 0c       	add	r14, r14
    12a8:	ff 1c       	adc	r15, r15
    12aa:	00 1f       	adc	r16, r16
    12ac:	11 1f       	adc	r17, r17
    12ae:	21 50       	subi	r18, 0x01	; 1
    12b0:	30 40       	sbci	r19, 0x00	; 0
    12b2:	40 30       	cpi	r20, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	59 07       	cpc	r21, r25
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	69 07       	cpc	r22, r25
    12bc:	90 e4       	ldi	r25, 0x40	; 64
    12be:	79 07       	cpc	r23, r25
    12c0:	60 f3       	brcs	.-40     	; 0x129a <__mulsf3+0x174>
    12c2:	2b 8f       	std	Y+27, r18	; 0x1b
    12c4:	3c 8f       	std	Y+28, r19	; 0x1c
    12c6:	db 01       	movw	r26, r22
    12c8:	ca 01       	movw	r24, r20
    12ca:	8f 77       	andi	r24, 0x7F	; 127
    12cc:	90 70       	andi	r25, 0x00	; 0
    12ce:	a0 70       	andi	r26, 0x00	; 0
    12d0:	b0 70       	andi	r27, 0x00	; 0
    12d2:	80 34       	cpi	r24, 0x40	; 64
    12d4:	91 05       	cpc	r25, r1
    12d6:	a1 05       	cpc	r26, r1
    12d8:	b1 05       	cpc	r27, r1
    12da:	61 f4       	brne	.+24     	; 0x12f4 <__mulsf3+0x1ce>
    12dc:	47 fd       	sbrc	r20, 7
    12de:	0a c0       	rjmp	.+20     	; 0x12f4 <__mulsf3+0x1ce>
    12e0:	e1 14       	cp	r14, r1
    12e2:	f1 04       	cpc	r15, r1
    12e4:	01 05       	cpc	r16, r1
    12e6:	11 05       	cpc	r17, r1
    12e8:	29 f0       	breq	.+10     	; 0x12f4 <__mulsf3+0x1ce>
    12ea:	40 5c       	subi	r20, 0xC0	; 192
    12ec:	5f 4f       	sbci	r21, 0xFF	; 255
    12ee:	6f 4f       	sbci	r22, 0xFF	; 255
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	40 78       	andi	r20, 0x80	; 128
    12f4:	1a 8e       	std	Y+26, r1	; 0x1a
    12f6:	fe 17       	cp	r31, r30
    12f8:	11 f0       	breq	.+4      	; 0x12fe <__mulsf3+0x1d8>
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	8a 8f       	std	Y+26, r24	; 0x1a
    12fe:	4d 8f       	std	Y+29, r20	; 0x1d
    1300:	5e 8f       	std	Y+30, r21	; 0x1e
    1302:	6f 8f       	std	Y+31, r22	; 0x1f
    1304:	78 a3       	std	Y+32, r23	; 0x20
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	89 8f       	std	Y+25, r24	; 0x19
    130a:	ce 01       	movw	r24, r28
    130c:	49 96       	adiw	r24, 0x19	; 25
    130e:	0e 94 8e 0a 	call	0x151c	; 0x151c <__pack_f>
    1312:	a0 96       	adiw	r28, 0x20	; 32
    1314:	e2 e1       	ldi	r30, 0x12	; 18
    1316:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__epilogue_restores__>

0000131a <__floatsisf>:
    131a:	a8 e0       	ldi	r26, 0x08	; 8
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e3 e9       	ldi	r30, 0x93	; 147
    1320:	f9 e0       	ldi	r31, 0x09	; 9
    1322:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__prologue_saves__+0x12>
    1326:	9b 01       	movw	r18, r22
    1328:	ac 01       	movw	r20, r24
    132a:	83 e0       	ldi	r24, 0x03	; 3
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	da 01       	movw	r26, r20
    1330:	c9 01       	movw	r24, r18
    1332:	88 27       	eor	r24, r24
    1334:	b7 fd       	sbrc	r27, 7
    1336:	83 95       	inc	r24
    1338:	99 27       	eor	r25, r25
    133a:	aa 27       	eor	r26, r26
    133c:	bb 27       	eor	r27, r27
    133e:	b8 2e       	mov	r11, r24
    1340:	21 15       	cp	r18, r1
    1342:	31 05       	cpc	r19, r1
    1344:	41 05       	cpc	r20, r1
    1346:	51 05       	cpc	r21, r1
    1348:	19 f4       	brne	.+6      	; 0x1350 <__floatsisf+0x36>
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	3a c0       	rjmp	.+116    	; 0x13c4 <__floatsisf+0xaa>
    1350:	88 23       	and	r24, r24
    1352:	a9 f0       	breq	.+42     	; 0x137e <__floatsisf+0x64>
    1354:	20 30       	cpi	r18, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	38 07       	cpc	r19, r24
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	48 07       	cpc	r20, r24
    135e:	80 e8       	ldi	r24, 0x80	; 128
    1360:	58 07       	cpc	r21, r24
    1362:	29 f4       	brne	.+10     	; 0x136e <__floatsisf+0x54>
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	9f ec       	ldi	r25, 0xCF	; 207
    136c:	30 c0       	rjmp	.+96     	; 0x13ce <__floatsisf+0xb4>
    136e:	ee 24       	eor	r14, r14
    1370:	ff 24       	eor	r15, r15
    1372:	87 01       	movw	r16, r14
    1374:	e2 1a       	sub	r14, r18
    1376:	f3 0a       	sbc	r15, r19
    1378:	04 0b       	sbc	r16, r20
    137a:	15 0b       	sbc	r17, r21
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <__floatsisf+0x68>
    137e:	79 01       	movw	r14, r18
    1380:	8a 01       	movw	r16, r20
    1382:	8e e1       	ldi	r24, 0x1E	; 30
    1384:	c8 2e       	mov	r12, r24
    1386:	d1 2c       	mov	r13, r1
    1388:	dc 82       	std	Y+4, r13	; 0x04
    138a:	cb 82       	std	Y+3, r12	; 0x03
    138c:	ed 82       	std	Y+5, r14	; 0x05
    138e:	fe 82       	std	Y+6, r15	; 0x06
    1390:	0f 83       	std	Y+7, r16	; 0x07
    1392:	18 87       	std	Y+8, r17	; 0x08
    1394:	c8 01       	movw	r24, r16
    1396:	b7 01       	movw	r22, r14
    1398:	0e 94 3f 0a 	call	0x147e	; 0x147e <__clzsi2>
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	18 16       	cp	r1, r24
    13a0:	19 06       	cpc	r1, r25
    13a2:	84 f4       	brge	.+32     	; 0x13c4 <__floatsisf+0xaa>
    13a4:	08 2e       	mov	r0, r24
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <__floatsisf+0x96>
    13a8:	ee 0c       	add	r14, r14
    13aa:	ff 1c       	adc	r15, r15
    13ac:	00 1f       	adc	r16, r16
    13ae:	11 1f       	adc	r17, r17
    13b0:	0a 94       	dec	r0
    13b2:	d2 f7       	brpl	.-12     	; 0x13a8 <__floatsisf+0x8e>
    13b4:	ed 82       	std	Y+5, r14	; 0x05
    13b6:	fe 82       	std	Y+6, r15	; 0x06
    13b8:	0f 83       	std	Y+7, r16	; 0x07
    13ba:	18 87       	std	Y+8, r17	; 0x08
    13bc:	c8 1a       	sub	r12, r24
    13be:	d9 0a       	sbc	r13, r25
    13c0:	dc 82       	std	Y+4, r13	; 0x04
    13c2:	cb 82       	std	Y+3, r12	; 0x03
    13c4:	ba 82       	std	Y+2, r11	; 0x02
    13c6:	ce 01       	movw	r24, r28
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	0e 94 8e 0a 	call	0x151c	; 0x151c <__pack_f>
    13ce:	28 96       	adiw	r28, 0x08	; 8
    13d0:	e9 e0       	ldi	r30, 0x09	; 9
    13d2:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__epilogue_restores__+0x12>

000013d6 <__fixsfsi>:
    13d6:	ac e0       	ldi	r26, 0x0C	; 12
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e1 ef       	ldi	r30, 0xF1	; 241
    13dc:	f9 e0       	ldi	r31, 0x09	; 9
    13de:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__prologue_saves__+0x20>
    13e2:	69 83       	std	Y+1, r22	; 0x01
    13e4:	7a 83       	std	Y+2, r23	; 0x02
    13e6:	8b 83       	std	Y+3, r24	; 0x03
    13e8:	9c 83       	std	Y+4, r25	; 0x04
    13ea:	ce 01       	movw	r24, r28
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	be 01       	movw	r22, r28
    13f0:	6b 5f       	subi	r22, 0xFB	; 251
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__unpack_f>
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	82 30       	cpi	r24, 0x02	; 2
    13fc:	61 f1       	breq	.+88     	; 0x1456 <__fixsfsi+0x80>
    13fe:	82 30       	cpi	r24, 0x02	; 2
    1400:	50 f1       	brcs	.+84     	; 0x1456 <__fixsfsi+0x80>
    1402:	84 30       	cpi	r24, 0x04	; 4
    1404:	21 f4       	brne	.+8      	; 0x140e <__fixsfsi+0x38>
    1406:	8e 81       	ldd	r24, Y+6	; 0x06
    1408:	88 23       	and	r24, r24
    140a:	51 f1       	breq	.+84     	; 0x1460 <__fixsfsi+0x8a>
    140c:	2e c0       	rjmp	.+92     	; 0x146a <__fixsfsi+0x94>
    140e:	2f 81       	ldd	r18, Y+7	; 0x07
    1410:	38 85       	ldd	r19, Y+8	; 0x08
    1412:	37 fd       	sbrc	r19, 7
    1414:	20 c0       	rjmp	.+64     	; 0x1456 <__fixsfsi+0x80>
    1416:	6e 81       	ldd	r22, Y+6	; 0x06
    1418:	2f 31       	cpi	r18, 0x1F	; 31
    141a:	31 05       	cpc	r19, r1
    141c:	1c f0       	brlt	.+6      	; 0x1424 <__fixsfsi+0x4e>
    141e:	66 23       	and	r22, r22
    1420:	f9 f0       	breq	.+62     	; 0x1460 <__fixsfsi+0x8a>
    1422:	23 c0       	rjmp	.+70     	; 0x146a <__fixsfsi+0x94>
    1424:	8e e1       	ldi	r24, 0x1E	; 30
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	82 1b       	sub	r24, r18
    142a:	93 0b       	sbc	r25, r19
    142c:	29 85       	ldd	r18, Y+9	; 0x09
    142e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1430:	4b 85       	ldd	r20, Y+11	; 0x0b
    1432:	5c 85       	ldd	r21, Y+12	; 0x0c
    1434:	04 c0       	rjmp	.+8      	; 0x143e <__fixsfsi+0x68>
    1436:	56 95       	lsr	r21
    1438:	47 95       	ror	r20
    143a:	37 95       	ror	r19
    143c:	27 95       	ror	r18
    143e:	8a 95       	dec	r24
    1440:	d2 f7       	brpl	.-12     	; 0x1436 <__fixsfsi+0x60>
    1442:	66 23       	and	r22, r22
    1444:	b1 f0       	breq	.+44     	; 0x1472 <__fixsfsi+0x9c>
    1446:	50 95       	com	r21
    1448:	40 95       	com	r20
    144a:	30 95       	com	r19
    144c:	21 95       	neg	r18
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	4f 4f       	sbci	r20, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    1454:	0e c0       	rjmp	.+28     	; 0x1472 <__fixsfsi+0x9c>
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <__fixsfsi+0x9c>
    1460:	2f ef       	ldi	r18, 0xFF	; 255
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f ef       	ldi	r20, 0xFF	; 255
    1466:	5f e7       	ldi	r21, 0x7F	; 127
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__fixsfsi+0x9c>
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	50 e8       	ldi	r21, 0x80	; 128
    1472:	b9 01       	movw	r22, r18
    1474:	ca 01       	movw	r24, r20
    1476:	2c 96       	adiw	r28, 0x0c	; 12
    1478:	e2 e0       	ldi	r30, 0x02	; 2
    147a:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__epilogue_restores__+0x20>

0000147e <__clzsi2>:
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	7b 01       	movw	r14, r22
    1488:	8c 01       	movw	r16, r24
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	e8 16       	cp	r14, r24
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	f8 06       	cpc	r15, r24
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	08 07       	cpc	r16, r24
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	18 07       	cpc	r17, r24
    149a:	88 f4       	brcc	.+34     	; 0x14be <__clzsi2+0x40>
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	e8 16       	cp	r14, r24
    14a0:	f1 04       	cpc	r15, r1
    14a2:	01 05       	cpc	r16, r1
    14a4:	11 05       	cpc	r17, r1
    14a6:	31 f0       	breq	.+12     	; 0x14b4 <__clzsi2+0x36>
    14a8:	28 f0       	brcs	.+10     	; 0x14b4 <__clzsi2+0x36>
    14aa:	88 e0       	ldi	r24, 0x08	; 8
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e0       	ldi	r26, 0x00	; 0
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	17 c0       	rjmp	.+46     	; 0x14e2 <__clzsi2+0x64>
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	12 c0       	rjmp	.+36     	; 0x14e2 <__clzsi2+0x64>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	e8 16       	cp	r14, r24
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	f8 06       	cpc	r15, r24
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	08 07       	cpc	r16, r24
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	18 07       	cpc	r17, r24
    14ce:	28 f0       	brcs	.+10     	; 0x14da <__clzsi2+0x5c>
    14d0:	88 e1       	ldi	r24, 0x18	; 24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a0 e0       	ldi	r26, 0x00	; 0
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <__clzsi2+0x64>
    14da:	80 e1       	ldi	r24, 0x10	; 16
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 e0       	ldi	r26, 0x00	; 0
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	20 e2       	ldi	r18, 0x20	; 32
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	28 1b       	sub	r18, r24
    14ec:	39 0b       	sbc	r19, r25
    14ee:	4a 0b       	sbc	r20, r26
    14f0:	5b 0b       	sbc	r21, r27
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <__clzsi2+0x7e>
    14f4:	16 95       	lsr	r17
    14f6:	07 95       	ror	r16
    14f8:	f7 94       	ror	r15
    14fa:	e7 94       	ror	r14
    14fc:	8a 95       	dec	r24
    14fe:	d2 f7       	brpl	.-12     	; 0x14f4 <__clzsi2+0x76>
    1500:	f7 01       	movw	r30, r14
    1502:	e1 55       	subi	r30, 0x51	; 81
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	80 81       	ld	r24, Z
    1508:	28 1b       	sub	r18, r24
    150a:	31 09       	sbc	r19, r1
    150c:	41 09       	sbc	r20, r1
    150e:	51 09       	sbc	r21, r1
    1510:	c9 01       	movw	r24, r18
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	08 95       	ret

0000151c <__pack_f>:
    151c:	df 92       	push	r13
    151e:	ef 92       	push	r14
    1520:	ff 92       	push	r15
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	fc 01       	movw	r30, r24
    1528:	e4 80       	ldd	r14, Z+4	; 0x04
    152a:	f5 80       	ldd	r15, Z+5	; 0x05
    152c:	06 81       	ldd	r16, Z+6	; 0x06
    152e:	17 81       	ldd	r17, Z+7	; 0x07
    1530:	d1 80       	ldd	r13, Z+1	; 0x01
    1532:	80 81       	ld	r24, Z
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	48 f4       	brcc	.+18     	; 0x154a <__pack_f+0x2e>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a0 e1       	ldi	r26, 0x10	; 16
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e8 2a       	or	r14, r24
    1542:	f9 2a       	or	r15, r25
    1544:	0a 2b       	or	r16, r26
    1546:	1b 2b       	or	r17, r27
    1548:	a5 c0       	rjmp	.+330    	; 0x1694 <__pack_f+0x178>
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	09 f4       	brne	.+2      	; 0x1550 <__pack_f+0x34>
    154e:	9f c0       	rjmp	.+318    	; 0x168e <__pack_f+0x172>
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	21 f4       	brne	.+8      	; 0x155c <__pack_f+0x40>
    1554:	ee 24       	eor	r14, r14
    1556:	ff 24       	eor	r15, r15
    1558:	87 01       	movw	r16, r14
    155a:	05 c0       	rjmp	.+10     	; 0x1566 <__pack_f+0x4a>
    155c:	e1 14       	cp	r14, r1
    155e:	f1 04       	cpc	r15, r1
    1560:	01 05       	cpc	r16, r1
    1562:	11 05       	cpc	r17, r1
    1564:	19 f4       	brne	.+6      	; 0x156c <__pack_f+0x50>
    1566:	e0 e0       	ldi	r30, 0x00	; 0
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	96 c0       	rjmp	.+300    	; 0x1698 <__pack_f+0x17c>
    156c:	62 81       	ldd	r22, Z+2	; 0x02
    156e:	73 81       	ldd	r23, Z+3	; 0x03
    1570:	9f ef       	ldi	r25, 0xFF	; 255
    1572:	62 38       	cpi	r22, 0x82	; 130
    1574:	79 07       	cpc	r23, r25
    1576:	0c f0       	brlt	.+2      	; 0x157a <__pack_f+0x5e>
    1578:	5b c0       	rjmp	.+182    	; 0x1630 <__pack_f+0x114>
    157a:	22 e8       	ldi	r18, 0x82	; 130
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	26 1b       	sub	r18, r22
    1580:	37 0b       	sbc	r19, r23
    1582:	2a 31       	cpi	r18, 0x1A	; 26
    1584:	31 05       	cpc	r19, r1
    1586:	2c f0       	brlt	.+10     	; 0x1592 <__pack_f+0x76>
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	2a c0       	rjmp	.+84     	; 0x15e6 <__pack_f+0xca>
    1592:	b8 01       	movw	r22, r16
    1594:	a7 01       	movw	r20, r14
    1596:	02 2e       	mov	r0, r18
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <__pack_f+0x86>
    159a:	76 95       	lsr	r23
    159c:	67 95       	ror	r22
    159e:	57 95       	ror	r21
    15a0:	47 95       	ror	r20
    15a2:	0a 94       	dec	r0
    15a4:	d2 f7       	brpl	.-12     	; 0x159a <__pack_f+0x7e>
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <__pack_f+0x9c>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	aa 1f       	adc	r26, r26
    15b6:	bb 1f       	adc	r27, r27
    15b8:	2a 95       	dec	r18
    15ba:	d2 f7       	brpl	.-12     	; 0x15b0 <__pack_f+0x94>
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	a1 09       	sbc	r26, r1
    15c0:	b1 09       	sbc	r27, r1
    15c2:	8e 21       	and	r24, r14
    15c4:	9f 21       	and	r25, r15
    15c6:	a0 23       	and	r26, r16
    15c8:	b1 23       	and	r27, r17
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	a1 05       	cpc	r26, r1
    15ce:	b1 05       	cpc	r27, r1
    15d0:	21 f0       	breq	.+8      	; 0x15da <__pack_f+0xbe>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a0 e0       	ldi	r26, 0x00	; 0
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	9a 01       	movw	r18, r20
    15dc:	ab 01       	movw	r20, r22
    15de:	28 2b       	or	r18, r24
    15e0:	39 2b       	or	r19, r25
    15e2:	4a 2b       	or	r20, r26
    15e4:	5b 2b       	or	r21, r27
    15e6:	da 01       	movw	r26, r20
    15e8:	c9 01       	movw	r24, r18
    15ea:	8f 77       	andi	r24, 0x7F	; 127
    15ec:	90 70       	andi	r25, 0x00	; 0
    15ee:	a0 70       	andi	r26, 0x00	; 0
    15f0:	b0 70       	andi	r27, 0x00	; 0
    15f2:	80 34       	cpi	r24, 0x40	; 64
    15f4:	91 05       	cpc	r25, r1
    15f6:	a1 05       	cpc	r26, r1
    15f8:	b1 05       	cpc	r27, r1
    15fa:	39 f4       	brne	.+14     	; 0x160a <__pack_f+0xee>
    15fc:	27 ff       	sbrs	r18, 7
    15fe:	09 c0       	rjmp	.+18     	; 0x1612 <__pack_f+0xf6>
    1600:	20 5c       	subi	r18, 0xC0	; 192
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	4f 4f       	sbci	r20, 0xFF	; 255
    1606:	5f 4f       	sbci	r21, 0xFF	; 255
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <__pack_f+0xf6>
    160a:	21 5c       	subi	r18, 0xC1	; 193
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	4f 4f       	sbci	r20, 0xFF	; 255
    1610:	5f 4f       	sbci	r21, 0xFF	; 255
    1612:	e0 e0       	ldi	r30, 0x00	; 0
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	20 30       	cpi	r18, 0x00	; 0
    1618:	a0 e0       	ldi	r26, 0x00	; 0
    161a:	3a 07       	cpc	r19, r26
    161c:	a0 e0       	ldi	r26, 0x00	; 0
    161e:	4a 07       	cpc	r20, r26
    1620:	a0 e4       	ldi	r26, 0x40	; 64
    1622:	5a 07       	cpc	r21, r26
    1624:	10 f0       	brcs	.+4      	; 0x162a <__pack_f+0x10e>
    1626:	e1 e0       	ldi	r30, 0x01	; 1
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	79 01       	movw	r14, r18
    162c:	8a 01       	movw	r16, r20
    162e:	27 c0       	rjmp	.+78     	; 0x167e <__pack_f+0x162>
    1630:	60 38       	cpi	r22, 0x80	; 128
    1632:	71 05       	cpc	r23, r1
    1634:	64 f5       	brge	.+88     	; 0x168e <__pack_f+0x172>
    1636:	fb 01       	movw	r30, r22
    1638:	e1 58       	subi	r30, 0x81	; 129
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	d8 01       	movw	r26, r16
    163e:	c7 01       	movw	r24, r14
    1640:	8f 77       	andi	r24, 0x7F	; 127
    1642:	90 70       	andi	r25, 0x00	; 0
    1644:	a0 70       	andi	r26, 0x00	; 0
    1646:	b0 70       	andi	r27, 0x00	; 0
    1648:	80 34       	cpi	r24, 0x40	; 64
    164a:	91 05       	cpc	r25, r1
    164c:	a1 05       	cpc	r26, r1
    164e:	b1 05       	cpc	r27, r1
    1650:	39 f4       	brne	.+14     	; 0x1660 <__pack_f+0x144>
    1652:	e7 fe       	sbrs	r14, 7
    1654:	0d c0       	rjmp	.+26     	; 0x1670 <__pack_f+0x154>
    1656:	80 e4       	ldi	r24, 0x40	; 64
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__pack_f+0x14c>
    1660:	8f e3       	ldi	r24, 0x3F	; 63
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e8 0e       	add	r14, r24
    166a:	f9 1e       	adc	r15, r25
    166c:	0a 1f       	adc	r16, r26
    166e:	1b 1f       	adc	r17, r27
    1670:	17 ff       	sbrs	r17, 7
    1672:	05 c0       	rjmp	.+10     	; 0x167e <__pack_f+0x162>
    1674:	16 95       	lsr	r17
    1676:	07 95       	ror	r16
    1678:	f7 94       	ror	r15
    167a:	e7 94       	ror	r14
    167c:	31 96       	adiw	r30, 0x01	; 1
    167e:	87 e0       	ldi	r24, 0x07	; 7
    1680:	16 95       	lsr	r17
    1682:	07 95       	ror	r16
    1684:	f7 94       	ror	r15
    1686:	e7 94       	ror	r14
    1688:	8a 95       	dec	r24
    168a:	d1 f7       	brne	.-12     	; 0x1680 <__pack_f+0x164>
    168c:	05 c0       	rjmp	.+10     	; 0x1698 <__pack_f+0x17c>
    168e:	ee 24       	eor	r14, r14
    1690:	ff 24       	eor	r15, r15
    1692:	87 01       	movw	r16, r14
    1694:	ef ef       	ldi	r30, 0xFF	; 255
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	6e 2f       	mov	r22, r30
    169a:	67 95       	ror	r22
    169c:	66 27       	eor	r22, r22
    169e:	67 95       	ror	r22
    16a0:	90 2f       	mov	r25, r16
    16a2:	9f 77       	andi	r25, 0x7F	; 127
    16a4:	d7 94       	ror	r13
    16a6:	dd 24       	eor	r13, r13
    16a8:	d7 94       	ror	r13
    16aa:	8e 2f       	mov	r24, r30
    16ac:	86 95       	lsr	r24
    16ae:	49 2f       	mov	r20, r25
    16b0:	46 2b       	or	r20, r22
    16b2:	58 2f       	mov	r21, r24
    16b4:	5d 29       	or	r21, r13
    16b6:	b7 01       	movw	r22, r14
    16b8:	ca 01       	movw	r24, r20
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	08 95       	ret

000016c6 <__unpack_f>:
    16c6:	fc 01       	movw	r30, r24
    16c8:	db 01       	movw	r26, r22
    16ca:	40 81       	ld	r20, Z
    16cc:	51 81       	ldd	r21, Z+1	; 0x01
    16ce:	22 81       	ldd	r18, Z+2	; 0x02
    16d0:	62 2f       	mov	r22, r18
    16d2:	6f 77       	andi	r22, 0x7F	; 127
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	22 1f       	adc	r18, r18
    16d8:	22 27       	eor	r18, r18
    16da:	22 1f       	adc	r18, r18
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	89 2f       	mov	r24, r25
    16e0:	88 0f       	add	r24, r24
    16e2:	82 2b       	or	r24, r18
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	99 1f       	adc	r25, r25
    16ea:	99 27       	eor	r25, r25
    16ec:	99 1f       	adc	r25, r25
    16ee:	11 96       	adiw	r26, 0x01	; 1
    16f0:	9c 93       	st	X, r25
    16f2:	11 97       	sbiw	r26, 0x01	; 1
    16f4:	21 15       	cp	r18, r1
    16f6:	31 05       	cpc	r19, r1
    16f8:	a9 f5       	brne	.+106    	; 0x1764 <__unpack_f+0x9e>
    16fa:	41 15       	cp	r20, r1
    16fc:	51 05       	cpc	r21, r1
    16fe:	61 05       	cpc	r22, r1
    1700:	71 05       	cpc	r23, r1
    1702:	11 f4       	brne	.+4      	; 0x1708 <__unpack_f+0x42>
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	37 c0       	rjmp	.+110    	; 0x1776 <__unpack_f+0xb0>
    1708:	82 e8       	ldi	r24, 0x82	; 130
    170a:	9f ef       	ldi	r25, 0xFF	; 255
    170c:	13 96       	adiw	r26, 0x03	; 3
    170e:	9c 93       	st	X, r25
    1710:	8e 93       	st	-X, r24
    1712:	12 97       	sbiw	r26, 0x02	; 2
    1714:	9a 01       	movw	r18, r20
    1716:	ab 01       	movw	r20, r22
    1718:	67 e0       	ldi	r22, 0x07	; 7
    171a:	22 0f       	add	r18, r18
    171c:	33 1f       	adc	r19, r19
    171e:	44 1f       	adc	r20, r20
    1720:	55 1f       	adc	r21, r21
    1722:	6a 95       	dec	r22
    1724:	d1 f7       	brne	.-12     	; 0x171a <__unpack_f+0x54>
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	8c 93       	st	X, r24
    172a:	0d c0       	rjmp	.+26     	; 0x1746 <__unpack_f+0x80>
    172c:	22 0f       	add	r18, r18
    172e:	33 1f       	adc	r19, r19
    1730:	44 1f       	adc	r20, r20
    1732:	55 1f       	adc	r21, r21
    1734:	12 96       	adiw	r26, 0x02	; 2
    1736:	8d 91       	ld	r24, X+
    1738:	9c 91       	ld	r25, X
    173a:	13 97       	sbiw	r26, 0x03	; 3
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	13 96       	adiw	r26, 0x03	; 3
    1740:	9c 93       	st	X, r25
    1742:	8e 93       	st	-X, r24
    1744:	12 97       	sbiw	r26, 0x02	; 2
    1746:	20 30       	cpi	r18, 0x00	; 0
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	38 07       	cpc	r19, r24
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	48 07       	cpc	r20, r24
    1750:	80 e4       	ldi	r24, 0x40	; 64
    1752:	58 07       	cpc	r21, r24
    1754:	58 f3       	brcs	.-42     	; 0x172c <__unpack_f+0x66>
    1756:	14 96       	adiw	r26, 0x04	; 4
    1758:	2d 93       	st	X+, r18
    175a:	3d 93       	st	X+, r19
    175c:	4d 93       	st	X+, r20
    175e:	5c 93       	st	X, r21
    1760:	17 97       	sbiw	r26, 0x07	; 7
    1762:	08 95       	ret
    1764:	2f 3f       	cpi	r18, 0xFF	; 255
    1766:	31 05       	cpc	r19, r1
    1768:	79 f4       	brne	.+30     	; 0x1788 <__unpack_f+0xc2>
    176a:	41 15       	cp	r20, r1
    176c:	51 05       	cpc	r21, r1
    176e:	61 05       	cpc	r22, r1
    1770:	71 05       	cpc	r23, r1
    1772:	19 f4       	brne	.+6      	; 0x177a <__unpack_f+0xb4>
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	8c 93       	st	X, r24
    1778:	08 95       	ret
    177a:	64 ff       	sbrs	r22, 4
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <__unpack_f+0xbe>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	8c 93       	st	X, r24
    1782:	12 c0       	rjmp	.+36     	; 0x17a8 <__unpack_f+0xe2>
    1784:	1c 92       	st	X, r1
    1786:	10 c0       	rjmp	.+32     	; 0x17a8 <__unpack_f+0xe2>
    1788:	2f 57       	subi	r18, 0x7F	; 127
    178a:	30 40       	sbci	r19, 0x00	; 0
    178c:	13 96       	adiw	r26, 0x03	; 3
    178e:	3c 93       	st	X, r19
    1790:	2e 93       	st	-X, r18
    1792:	12 97       	sbiw	r26, 0x02	; 2
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	8c 93       	st	X, r24
    1798:	87 e0       	ldi	r24, 0x07	; 7
    179a:	44 0f       	add	r20, r20
    179c:	55 1f       	adc	r21, r21
    179e:	66 1f       	adc	r22, r22
    17a0:	77 1f       	adc	r23, r23
    17a2:	8a 95       	dec	r24
    17a4:	d1 f7       	brne	.-12     	; 0x179a <__unpack_f+0xd4>
    17a6:	70 64       	ori	r23, 0x40	; 64
    17a8:	14 96       	adiw	r26, 0x04	; 4
    17aa:	4d 93       	st	X+, r20
    17ac:	5d 93       	st	X+, r21
    17ae:	6d 93       	st	X+, r22
    17b0:	7c 93       	st	X, r23
    17b2:	17 97       	sbiw	r26, 0x07	; 7
    17b4:	08 95       	ret

000017b6 <__udivmodhi4>:
    17b6:	aa 1b       	sub	r26, r26
    17b8:	bb 1b       	sub	r27, r27
    17ba:	51 e1       	ldi	r21, 0x11	; 17
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <__udivmodhi4_ep>

000017be <__udivmodhi4_loop>:
    17be:	aa 1f       	adc	r26, r26
    17c0:	bb 1f       	adc	r27, r27
    17c2:	a6 17       	cp	r26, r22
    17c4:	b7 07       	cpc	r27, r23
    17c6:	10 f0       	brcs	.+4      	; 0x17cc <__udivmodhi4_ep>
    17c8:	a6 1b       	sub	r26, r22
    17ca:	b7 0b       	sbc	r27, r23

000017cc <__udivmodhi4_ep>:
    17cc:	88 1f       	adc	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	5a 95       	dec	r21
    17d2:	a9 f7       	brne	.-22     	; 0x17be <__udivmodhi4_loop>
    17d4:	80 95       	com	r24
    17d6:	90 95       	com	r25
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	08 95       	ret

000017de <__divmodhi4>:
    17de:	97 fb       	bst	r25, 7
    17e0:	09 2e       	mov	r0, r25
    17e2:	07 26       	eor	r0, r23
    17e4:	0a d0       	rcall	.+20     	; 0x17fa <__divmodhi4_neg1>
    17e6:	77 fd       	sbrc	r23, 7
    17e8:	04 d0       	rcall	.+8      	; 0x17f2 <__divmodhi4_neg2>
    17ea:	e5 df       	rcall	.-54     	; 0x17b6 <__udivmodhi4>
    17ec:	06 d0       	rcall	.+12     	; 0x17fa <__divmodhi4_neg1>
    17ee:	00 20       	and	r0, r0
    17f0:	1a f4       	brpl	.+6      	; 0x17f8 <__divmodhi4_exit>

000017f2 <__divmodhi4_neg2>:
    17f2:	70 95       	com	r23
    17f4:	61 95       	neg	r22
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255

000017f8 <__divmodhi4_exit>:
    17f8:	08 95       	ret

000017fa <__divmodhi4_neg1>:
    17fa:	f6 f7       	brtc	.-4      	; 0x17f8 <__divmodhi4_exit>
    17fc:	90 95       	com	r25
    17fe:	81 95       	neg	r24
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	08 95       	ret

00001804 <__prologue_saves__>:
    1804:	2f 92       	push	r2
    1806:	3f 92       	push	r3
    1808:	4f 92       	push	r4
    180a:	5f 92       	push	r5
    180c:	6f 92       	push	r6
    180e:	7f 92       	push	r7
    1810:	8f 92       	push	r8
    1812:	9f 92       	push	r9
    1814:	af 92       	push	r10
    1816:	bf 92       	push	r11
    1818:	cf 92       	push	r12
    181a:	df 92       	push	r13
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	ca 1b       	sub	r28, r26
    182e:	db 0b       	sbc	r29, r27
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	09 94       	ijmp

0000183c <__epilogue_restores__>:
    183c:	2a 88       	ldd	r2, Y+18	; 0x12
    183e:	39 88       	ldd	r3, Y+17	; 0x11
    1840:	48 88       	ldd	r4, Y+16	; 0x10
    1842:	5f 84       	ldd	r5, Y+15	; 0x0f
    1844:	6e 84       	ldd	r6, Y+14	; 0x0e
    1846:	7d 84       	ldd	r7, Y+13	; 0x0d
    1848:	8c 84       	ldd	r8, Y+12	; 0x0c
    184a:	9b 84       	ldd	r9, Y+11	; 0x0b
    184c:	aa 84       	ldd	r10, Y+10	; 0x0a
    184e:	b9 84       	ldd	r11, Y+9	; 0x09
    1850:	c8 84       	ldd	r12, Y+8	; 0x08
    1852:	df 80       	ldd	r13, Y+7	; 0x07
    1854:	ee 80       	ldd	r14, Y+6	; 0x06
    1856:	fd 80       	ldd	r15, Y+5	; 0x05
    1858:	0c 81       	ldd	r16, Y+4	; 0x04
    185a:	1b 81       	ldd	r17, Y+3	; 0x03
    185c:	aa 81       	ldd	r26, Y+2	; 0x02
    185e:	b9 81       	ldd	r27, Y+1	; 0x01
    1860:	ce 0f       	add	r28, r30
    1862:	d1 1d       	adc	r29, r1
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	ed 01       	movw	r28, r26
    1870:	08 95       	ret

00001872 <_exit>:
    1872:	f8 94       	cli

00001874 <__stop_program>:
    1874:	ff cf       	rjmp	.-2      	; 0x1874 <__stop_program>
